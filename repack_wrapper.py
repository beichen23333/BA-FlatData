import flatbuffers
from lib.encryption import xor, create_key, convert_short, convert_ushort, convert_int, convert_uint, convert_long, convert_ulong, encrypt_float, encrypt_double, encrypt_string
from . import *
    

def pack_GroundVector3(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GroundVector3") if encrypt else None
    X_val = encrypt_float(data.get('X', 0), password)
    Y_val = encrypt_float(data.get('Y', 0), password)
    Z_val = encrypt_float(data.get('Z', 0), password)
    GroundVector3.Start(builder)
    GroundVector3.AddX(builder, X_val)
    GroundVector3.AddY(builder, Y_val)
    GroundVector3.AddZ(builder, Z_val)
    return GroundVector3.End(builder)

def pack_AnimationBlendTable(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AnimationBlendTable") if encrypt else None
    DataList_vec = 0
    if 'DataList' in data:
        DataList_items = data['DataList']
        DataList_vec = builder.EndVector(len(DataList_items))
    AnimationBlendTable.Start(builder)
    AnimationBlendTable.AddDataList(builder, DataList_vec)
    return AnimationBlendTable.End(builder)

def pack_BlendData(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BlendData") if encrypt else None
    InfoList_vec = 0
    if 'InfoList' in data:
        InfoList_items = data['InfoList']
        InfoList_vec = builder.EndVector(len(InfoList_items))
    Type_val = convert_int(data.get('Type', 0), password)
    BlendData.Start(builder)
    BlendData.AddType(builder, Type_val)
    BlendData.AddInfoList(builder, InfoList_vec)
    return BlendData.End(builder)

def pack_BlendInfo(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BlendInfo") if encrypt else None
    From_val = convert_int(data.get('From', 0), password)
    To_val = convert_int(data.get('To', 0), password)
    Blend_val = encrypt_float(data.get('Blend', 0), password)
    BlendInfo.Start(builder)
    BlendInfo.AddFrom(builder, From_val)
    BlendInfo.AddTo(builder, To_val)
    BlendInfo.AddBlend(builder, Blend_val)
    return BlendInfo.End(builder)

def pack_AnimatorDataTable(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AnimatorDataTable") if encrypt else None
    DataList_vec = 0
    if 'DataList' in data:
        DataList_items = data['DataList']
        DataList_vec = builder.EndVector(len(DataList_items))
    AnimatorDataTable.Start(builder)
    AnimatorDataTable.AddDataList(builder, DataList_vec)
    return AnimatorDataTable.End(builder)

def pack_AnimatorData(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AnimatorData") if encrypt else None
    DefaultStateName_off = builder.CreateString(encrypt_string(data.get('DefaultStateName', ''), password))
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    DataList_vec = 0
    if 'DataList' in data:
        DataList_items = data['DataList']
        DataList_vec = builder.EndVector(len(DataList_items))
    AnimatorData.Start(builder)
    AnimatorData.AddDefaultStateName(builder, DefaultStateName_off)
    AnimatorData.AddName(builder, Name_off)
    AnimatorData.AddDataList(builder, DataList_vec)
    return AnimatorData.End(builder)

def pack_AniStateData(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AniStateData") if encrypt else None
    StateName_off = builder.CreateString(encrypt_string(data.get('StateName', ''), password))
    StatePrefix_off = builder.CreateString(encrypt_string(data.get('StatePrefix', ''), password))
    StateNameWithPrefix_off = builder.CreateString(encrypt_string(data.get('StateNameWithPrefix', ''), password))
    Tag_off = builder.CreateString(encrypt_string(data.get('Tag', ''), password))
    SpeedParameterName_off = builder.CreateString(encrypt_string(data.get('SpeedParameterName', ''), password))
    ClipName_off = builder.CreateString(encrypt_string(data.get('ClipName', ''), password))
    Events_vec = 0
    if 'Events' in data:
        Events_items = data['Events']
        Events_vec = builder.EndVector(len(Events_items))
    SpeedParamter_val = encrypt_float(data.get('SpeedParamter', 0), password)
    StateSpeed_val = encrypt_float(data.get('StateSpeed', 0), password)
    Length_val = encrypt_float(data.get('Length', 0), password)
    FrameRate_val = encrypt_float(data.get('FrameRate', 0), password)
    IsLooping_val = data.get('IsLooping', 0)
    AniStateData.Start(builder)
    AniStateData.AddStateName(builder, StateName_off)
    AniStateData.AddStatePrefix(builder, StatePrefix_off)
    AniStateData.AddStateNameWithPrefix(builder, StateNameWithPrefix_off)
    AniStateData.AddTag(builder, Tag_off)
    AniStateData.AddSpeedParameterName(builder, SpeedParameterName_off)
    AniStateData.AddSpeedParamter(builder, SpeedParamter_val)
    AniStateData.AddStateSpeed(builder, StateSpeed_val)
    AniStateData.AddClipName(builder, ClipName_off)
    AniStateData.AddLength(builder, Length_val)
    AniStateData.AddFrameRate(builder, FrameRate_val)
    AniStateData.AddIsLooping(builder, IsLooping_val)
    AniStateData.AddEvents(builder, Events_vec)
    return AniStateData.End(builder)

def pack_AniEventData(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AniEventData") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StringParam_off = builder.CreateString(encrypt_string(data.get('StringParam', ''), password))
    Time_val = encrypt_float(data.get('Time', 0), password)
    IntParam_val = convert_int(data.get('IntParam', 0), password)
    FloatParam_val = encrypt_float(data.get('FloatParam', 0), password)
    AniEventData.Start(builder)
    AniEventData.AddName(builder, Name_off)
    AniEventData.AddTime(builder, Time_val)
    AniEventData.AddIntParam(builder, IntParam_val)
    AniEventData.AddFloatParam(builder, FloatParam_val)
    AniEventData.AddStringParam(builder, StringParam_off)
    return AniEventData.End(builder)

def pack_BattleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Battle") if encrypt else None
    None_vec = 0
    if 'None' in data:
        None_items = data['None']
        BattleExcel.StartNoneVector(builder, len(None_items))
        for item in reversed(None_items):
            builder.PrependInt32(convert_int(getattr(UnitType, item), password))
        None_vec = builder.EndVector(len(None_items))
    Normal_vec = 0
    if 'Normal' in data:
        Normal_items = data['Normal']
        BattleExcel.StartNormalVector(builder, len(Normal_items))
        for item in reversed(Normal_items):
            builder.PrependInt32(convert_int(getattr(BulletType, item), password))
        Normal_vec = builder.EndVector(len(Normal_items))
    Single_val = convert_int(getattr(AttackType, data.get('Single', 0)), password)
    Guided_val = convert_int(getattr(ProjectileType, data.get('Guided', 0)), password)
    Blue_val = convert_int(getattr(DamageFontColor, data.get('Blue', 0)), password)
    CoverEnter_val = convert_int(getattr(EmoticonEvent, data.get('CoverEnter', 0)), password)
    Crush_val = convert_int(getattr(ActionType, data.get('Crush', 0)), password)
    Able_val = convert_int(getattr(BuffOverlap, data.get('Able', 0)), password)
    AllySelf_val = convert_int(getattr(ReArrangeTargetType, data.get('AllySelf', 0)), password)
    LightArmor_val = convert_int(getattr(ArmorType, data.get('LightArmor', 0)), password)
    Wood_val = convert_int(getattr(EntityMaterialType, data.get('Wood', 0)), password)
    All_val = convert_int(getattr(CoverMotionType, data.get('All', 0)), password)
    DISTANCE_val = convert_int(getattr(TargetSortBy, data.get('DISTANCE', 0)), password)
    CloseToObstacle_val = convert_int(getattr(PositioningType, data.get('CloseToObstacle', 0)), password)
    Students_val = convert_int(getattr(FormationLine, data.get('Students', 0)), password)
    Sequence_val = convert_int(getattr(ExternalBTNodeType, data.get('Sequence', 0)), password)
    UseNextExSkill_val = convert_int(getattr(ExternalBehavior, data.get('UseNextExSkill', 0)), password)
    Student_val = convert_int(getattr(TacticEntityType, data.get('Student', 0)), password)
    SearchAndMove_val = convert_int(getattr(EngageType, data.get('SearchAndMove', 0)), password)
    Position_val = convert_int(getattr(HitEffectPosition, data.get('Position', 0)), password)
    Street_val = convert_int(getattr(StageTopography, data.get('Street', 0)), password)
    D_val = convert_int(getattr(TerrainAdaptationStat, data.get('D', 0)), password)
    MAIN_val = convert_int(getattr(ObstacleClass, data.get('MAIN', 0)), password)
    Remain_val = convert_int(getattr(ObstacleDestroyType, data.get('Remain', 0)), password)
    Low_val = convert_int(getattr(ObstacleHeightType, data.get('Low', 0)), password)
    Resist_val = convert_int(getattr(DamageAttribute, data.get('Resist', 0)), password)
    Ally_val = convert_int(getattr(SkillPriorityCheckTarget, data.get('Ally', 0)), password)
    Main_val = convert_int(getattr(StageType, data.get('Main', 0)), password)
    TargetToCaster_val = convert_int(getattr(KnockbackDirection, data.get('TargetToCaster', 0)), password)
    Duration_val = convert_int(getattr(EndCondition, data.get('Duration', 0)), password)
    Preset_val = convert_int(getattr(ArenaSimulatorServer, data.get('Preset', 0)), password)
    FinalDamage_val = convert_int(getattr(BattleCalculationStat, data.get('FinalDamage', 0)), password)
    SpecialTransStat_val = convert_int(getattr(StatTransType, data.get('SpecialTransStat', 0)), password)
    Talk_val = convert_int(getattr(BattleDialogType, data.get('Talk', 0)), password)
    BattleExcel.Start(builder)
    BattleExcel.AddNone(builder, None_vec)
    BattleExcel.AddSingle(builder, Single_val)
    BattleExcel.AddGuided(builder, Guided_val)
    BattleExcel.AddBlue(builder, Blue_val)
    BattleExcel.AddCoverEnter(builder, CoverEnter_val)
    BattleExcel.AddNormal(builder, Normal_vec)
    BattleExcel.AddCrush(builder, Crush_val)
    BattleExcel.AddAble(builder, Able_val)
    BattleExcel.AddAllySelf(builder, AllySelf_val)
    BattleExcel.AddLightArmor(builder, LightArmor_val)
    BattleExcel.AddWood(builder, Wood_val)
    BattleExcel.AddAll(builder, All_val)
    BattleExcel.AddDISTANCE(builder, DISTANCE_val)
    BattleExcel.AddCloseToObstacle(builder, CloseToObstacle_val)
    BattleExcel.AddStudents(builder, Students_val)
    BattleExcel.AddSequence(builder, Sequence_val)
    BattleExcel.AddUseNextExSkill(builder, UseNextExSkill_val)
    BattleExcel.AddStudent(builder, Student_val)
    BattleExcel.AddSearchAndMove(builder, SearchAndMove_val)
    BattleExcel.AddPosition(builder, Position_val)
    BattleExcel.AddStreet(builder, Street_val)
    BattleExcel.AddD(builder, D_val)
    BattleExcel.AddMAIN(builder, MAIN_val)
    BattleExcel.AddRemain(builder, Remain_val)
    BattleExcel.AddLow(builder, Low_val)
    BattleExcel.AddResist(builder, Resist_val)
    BattleExcel.AddAlly(builder, Ally_val)
    BattleExcel.AddMain(builder, Main_val)
    BattleExcel.AddTargetToCaster(builder, TargetToCaster_val)
    BattleExcel.AddDuration(builder, Duration_val)
    BattleExcel.AddPreset(builder, Preset_val)
    BattleExcel.AddFinalDamage(builder, FinalDamage_val)
    BattleExcel.AddSpecialTransStat(builder, SpecialTransStat_val)
    BattleExcel.AddTalk(builder, Talk_val)
    return BattleExcel.End(builder)

def pack_BossPhaseExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BossPhase") if encrypt else None
    NormalAttackSkillUniqueName_off = builder.CreateString(encrypt_string(data.get('NormalAttackSkillUniqueName', ''), password))
    UseExSkill_vec = 0
    if 'UseExSkill' in data:
        UseExSkill_items = data['UseExSkill']
        BossPhaseExcel.StartUseExSkillVector(builder, len(UseExSkill_items))
        for item in reversed(UseExSkill_items):
            builder.PrependBool(item)
        UseExSkill_vec = builder.EndVector(len(UseExSkill_items))
    Id_val = convert_long(data.get('Id', 0), password)
    AIPhase_val = convert_long(data.get('AIPhase', 0), password)
    BossPhaseExcel.Start(builder)
    BossPhaseExcel.AddId(builder, Id_val)
    BossPhaseExcel.AddAIPhase(builder, AIPhase_val)
    BossPhaseExcel.AddNormalAttackSkillUniqueName(builder, NormalAttackSkillUniqueName_off)
    BossPhaseExcel.AddUseExSkill(builder, UseExSkill_vec)
    return BossPhaseExcel.End(builder)

def pack_BuffParticleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BuffParticle") if encrypt else None
    UniqueName_off = builder.CreateString(encrypt_string(data.get('UniqueName', ''), password))
    BuffType_off = builder.CreateString(encrypt_string(data.get('BuffType', ''), password))
    BuffName_off = builder.CreateString(encrypt_string(data.get('BuffName', ''), password))
    ResourcePath_off = builder.CreateString(encrypt_string(data.get('ResourcePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    BuffParticleExcel.Start(builder)
    BuffParticleExcel.AddUniqueId(builder, UniqueId_val)
    BuffParticleExcel.AddUniqueName(builder, UniqueName_off)
    BuffParticleExcel.AddBuffType(builder, BuffType_off)
    BuffParticleExcel.AddBuffName(builder, BuffName_off)
    BuffParticleExcel.AddResourcePath(builder, ResourcePath_off)
    return BuffParticleExcel.End(builder)

def pack_CharacterDialogEmojiExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogEmoji") if encrypt else None
    DialogType_off = builder.CreateString(encrypt_string(data.get('DialogType', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    TargetIndex_val = convert_int(data.get('TargetIndex', 0), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    HideUI_val = data.get('HideUI', 0)
    CharacterDialogEmojiExcel.Start(builder)
    CharacterDialogEmojiExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogEmojiExcel.AddTargetIndex(builder, TargetIndex_val)
    CharacterDialogEmojiExcel.AddDialogType(builder, DialogType_off)
    CharacterDialogEmojiExcel.AddDuration(builder, Duration_val)
    CharacterDialogEmojiExcel.AddHideUI(builder, HideUI_val)
    CharacterDialogEmojiExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogEmojiExcel.AddLocalizeJP(builder, LocalizeJP_off)
    return CharacterDialogEmojiExcel.End(builder)

def pack_CharacterDialogFieldExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogField") if encrypt else None
    MotionName_off = builder.CreateString(encrypt_string(data.get('MotionName', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    Phase_val = convert_int(data.get('Phase', 0), password)
    TargetIndex_val = convert_int(data.get('TargetIndex', 0), password)
    DialogType_val = convert_int(getattr(FieldDialogType, data.get('DialogType', 0)), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    IsInteractionDialog_val = data.get('IsInteractionDialog', 0)
    HideUI_val = data.get('HideUI', 0)
    CharacterDialogFieldExcel.Start(builder)
    CharacterDialogFieldExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogFieldExcel.AddPhase(builder, Phase_val)
    CharacterDialogFieldExcel.AddTargetIndex(builder, TargetIndex_val)
    CharacterDialogFieldExcel.AddDialogType(builder, DialogType_val)
    CharacterDialogFieldExcel.AddDuration(builder, Duration_val)
    CharacterDialogFieldExcel.AddMotionName(builder, MotionName_off)
    CharacterDialogFieldExcel.AddIsInteractionDialog(builder, IsInteractionDialog_val)
    CharacterDialogFieldExcel.AddHideUI(builder, HideUI_val)
    CharacterDialogFieldExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogFieldExcel.AddLocalizeJP(builder, LocalizeJP_off)
    return CharacterDialogFieldExcel.End(builder)

def pack_ClearDeckRuleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ClearDeckRule") if encrypt else None
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    SizeLimit_val = convert_long(data.get('SizeLimit', 0), password)
    ClearDeckRuleExcel.Start(builder)
    ClearDeckRuleExcel.AddContentType(builder, ContentType_val)
    ClearDeckRuleExcel.AddSizeLimit(builder, SizeLimit_val)
    return ClearDeckRuleExcel.End(builder)

def pack_ConquestStepExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestStep") if encrypt else None
    StepGoalLocalize_off = builder.CreateString(encrypt_string(data.get('StepGoalLocalize', ''), password))
    UnexpectedEventPrefab_off = builder.CreateString(encrypt_string(data.get('UnexpectedEventPrefab', ''), password))
    UnexpectedEventUnitId_vec = 0
    if 'UnexpectedEventUnitId' in data:
        UnexpectedEventUnitId_items = data['UnexpectedEventUnitId']
        ConquestStepExcel.StartUnexpectedEventUnitIdVector(builder, len(UnexpectedEventUnitId_items))
        for item in reversed(UnexpectedEventUnitId_items):
            builder.PrependInt64(convert_long(item, password))
        UnexpectedEventUnitId_vec = builder.EndVector(len(UnexpectedEventUnitId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    MapDifficulty_val = convert_int(getattr(StageDifficulty, data.get('MapDifficulty', 0)), password)
    Step_val = convert_int(data.get('Step', 0), password)
    StepEnterScenarioGroupId_val = convert_long(data.get('StepEnterScenarioGroupId', 0), password)
    StepEnterItemType_val = convert_int(getattr(ParcelType, data.get('StepEnterItemType', 0)), password)
    StepEnterItemUniqueId_val = convert_long(data.get('StepEnterItemUniqueId', 0), password)
    StepEnterItemAmount_val = convert_long(data.get('StepEnterItemAmount', 0), password)
    TreasureBoxObjectId_val = convert_long(data.get('TreasureBoxObjectId', 0), password)
    TreasureBoxCountPerStepOpen_val = convert_int(data.get('TreasureBoxCountPerStepOpen', 0), password)
    ConquestStepExcel.Start(builder)
    ConquestStepExcel.AddEventContentId(builder, EventContentId_val)
    ConquestStepExcel.AddMapDifficulty(builder, MapDifficulty_val)
    ConquestStepExcel.AddStep(builder, Step_val)
    ConquestStepExcel.AddStepGoalLocalize(builder, StepGoalLocalize_off)
    ConquestStepExcel.AddStepEnterScenarioGroupId(builder, StepEnterScenarioGroupId_val)
    ConquestStepExcel.AddStepEnterItemType(builder, StepEnterItemType_val)
    ConquestStepExcel.AddStepEnterItemUniqueId(builder, StepEnterItemUniqueId_val)
    ConquestStepExcel.AddStepEnterItemAmount(builder, StepEnterItemAmount_val)
    ConquestStepExcel.AddUnexpectedEventUnitId(builder, UnexpectedEventUnitId_vec)
    ConquestStepExcel.AddUnexpectedEventPrefab(builder, UnexpectedEventPrefab_off)
    ConquestStepExcel.AddTreasureBoxObjectId(builder, TreasureBoxObjectId_val)
    ConquestStepExcel.AddTreasureBoxCountPerStepOpen(builder, TreasureBoxCountPerStepOpen_val)
    return ConquestStepExcel.End(builder)

def pack_ConstArenaExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstArena") if encrypt else None
    DailyRewardResetTime_off = builder.CreateString(encrypt_string(data.get('DailyRewardResetTime', ''), password))
    OpenScenarioId_off = builder.CreateString(encrypt_string(data.get('OpenScenarioId', ''), password))
    HiddenCharacterImagePath_off = builder.CreateString(encrypt_string(data.get('HiddenCharacterImagePath', ''), password))
    ShowSeasonChangeInfoStartTime_off = builder.CreateString(encrypt_string(data.get('ShowSeasonChangeInfoStartTime', ''), password))
    ShowSeasonChangeInfoEndTime_off = builder.CreateString(encrypt_string(data.get('ShowSeasonChangeInfoEndTime', ''), password))
    CharacterSlotHideRank_vec = 0
    if 'CharacterSlotHideRank' in data:
        CharacterSlotHideRank_items = data['CharacterSlotHideRank']
        ConstArenaExcel.StartCharacterSlotHideRankVector(builder, len(CharacterSlotHideRank_items))
        for item in reversed(CharacterSlotHideRank_items):
            builder.PrependInt64(convert_long(item, password))
        CharacterSlotHideRank_vec = builder.EndVector(len(CharacterSlotHideRank_items))
    RelativeOpponentRankStart_vec = 0
    if 'RelativeOpponentRankStart' in data:
        RelativeOpponentRankStart_items = data['RelativeOpponentRankStart']
        ConstArenaExcel.StartRelativeOpponentRankStartVector(builder, len(RelativeOpponentRankStart_items))
        for item in reversed(RelativeOpponentRankStart_items):
            builder.PrependInt64(convert_long(item, password))
        RelativeOpponentRankStart_vec = builder.EndVector(len(RelativeOpponentRankStart_items))
    RelativeOpponentRankEnd_vec = 0
    if 'RelativeOpponentRankEnd' in data:
        RelativeOpponentRankEnd_items = data['RelativeOpponentRankEnd']
        ConstArenaExcel.StartRelativeOpponentRankEndVector(builder, len(RelativeOpponentRankEnd_items))
        for item in reversed(RelativeOpponentRankEnd_items):
            builder.PrependInt64(convert_long(item, password))
        RelativeOpponentRankEnd_vec = builder.EndVector(len(RelativeOpponentRankEnd_items))
    ModifiedStatType_vec = 0
    if 'ModifiedStatType' in data:
        ModifiedStatType_items = data['ModifiedStatType']
        ConstArenaExcel.StartModifiedStatTypeVector(builder, len(ModifiedStatType_items))
        for item in reversed(ModifiedStatType_items):
            builder.PrependInt32(convert_int(getattr(StatType, item), password))
        ModifiedStatType_vec = builder.EndVector(len(ModifiedStatType_items))
    StatMulFactor_vec = 0
    if 'StatMulFactor' in data:
        StatMulFactor_items = data['StatMulFactor']
        ConstArenaExcel.StartStatMulFactorVector(builder, len(StatMulFactor_items))
        for item in reversed(StatMulFactor_items):
            builder.PrependInt64(convert_long(item, password))
        StatMulFactor_vec = builder.EndVector(len(StatMulFactor_items))
    StatSumFactor_vec = 0
    if 'StatSumFactor' in data:
        StatSumFactor_items = data['StatSumFactor']
        ConstArenaExcel.StartStatSumFactorVector(builder, len(StatSumFactor_items))
        for item in reversed(StatSumFactor_items):
            builder.PrependInt64(convert_long(item, password))
        StatSumFactor_vec = builder.EndVector(len(StatSumFactor_items))
    NPCName_vec = 0
    if 'NPCName' in data:
        NPCName_items = data['NPCName']
        NPCName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in NPCName_items]
        ConstArenaExcel.StartNPCNameVector(builder, len(NPCName_str_offsets))
        for offset in reversed(NPCName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        NPCName_vec = builder.EndVector(len(NPCName_items))
    AttackCoolTime_val = convert_long(data.get('AttackCoolTime', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    DefenseCoolTime_val = convert_long(data.get('DefenseCoolTime', 0), password)
    TSSStartCoolTime_val = convert_long(data.get('TSSStartCoolTime', 0), password)
    EndAlarm_val = convert_long(data.get('EndAlarm', 0), password)
    TimeRewardMaxAmount_val = convert_long(data.get('TimeRewardMaxAmount', 0), password)
    EnterCostType_val = convert_int(getattr(ParcelType, data.get('EnterCostType', 0)), password)
    EnterCostId_val = convert_long(data.get('EnterCostId', 0), password)
    TicketCost_val = convert_long(data.get('TicketCost', 0), password)
    MapSlotHideRank_val = convert_long(data.get('MapSlotHideRank', 0), password)
    NPCMainCharacterCount_val = convert_long(data.get('NPCMainCharacterCount', 0), password)
    NPCSupportCharacterCount_val = convert_long(data.get('NPCSupportCharacterCount', 0), password)
    NPCCharacterSkillLevel_val = convert_long(data.get('NPCCharacterSkillLevel', 0), password)
    TimeSpanInDaysForBattleHistory_val = convert_long(data.get('TimeSpanInDaysForBattleHistory', 0), password)
    DefenseVictoryRewardMaxCount_val = convert_long(data.get('DefenseVictoryRewardMaxCount', 0), password)
    TopRankerCountLimit_val = convert_long(data.get('TopRankerCountLimit', 0), password)
    AutoRefreshIntervalMilliSeconds_val = convert_long(data.get('AutoRefreshIntervalMilliSeconds', 0), password)
    EchelonSettingIntervalMilliSeconds_val = convert_long(data.get('EchelonSettingIntervalMilliSeconds', 0), password)
    SkipAllowedTimeMilliSeconds_val = convert_long(data.get('SkipAllowedTimeMilliSeconds', 0), password)
    ShowSeasonId_val = convert_long(data.get('ShowSeasonId', 0), password)
    ArenaHistoryQueryLimitDays_val = convert_int(data.get('ArenaHistoryQueryLimitDays', 0), password)
    ConstArenaExcel.Start(builder)
    ConstArenaExcel.AddAttackCoolTime(builder, AttackCoolTime_val)
    ConstArenaExcel.AddBattleDuration(builder, BattleDuration_val)
    ConstArenaExcel.AddDefenseCoolTime(builder, DefenseCoolTime_val)
    ConstArenaExcel.AddTSSStartCoolTime(builder, TSSStartCoolTime_val)
    ConstArenaExcel.AddEndAlarm(builder, EndAlarm_val)
    ConstArenaExcel.AddTimeRewardMaxAmount(builder, TimeRewardMaxAmount_val)
    ConstArenaExcel.AddEnterCostType(builder, EnterCostType_val)
    ConstArenaExcel.AddEnterCostId(builder, EnterCostId_val)
    ConstArenaExcel.AddTicketCost(builder, TicketCost_val)
    ConstArenaExcel.AddDailyRewardResetTime(builder, DailyRewardResetTime_off)
    ConstArenaExcel.AddOpenScenarioId(builder, OpenScenarioId_off)
    ConstArenaExcel.AddCharacterSlotHideRank(builder, CharacterSlotHideRank_vec)
    ConstArenaExcel.AddMapSlotHideRank(builder, MapSlotHideRank_val)
    ConstArenaExcel.AddRelativeOpponentRankStart(builder, RelativeOpponentRankStart_vec)
    ConstArenaExcel.AddRelativeOpponentRankEnd(builder, RelativeOpponentRankEnd_vec)
    ConstArenaExcel.AddModifiedStatType(builder, ModifiedStatType_vec)
    ConstArenaExcel.AddStatMulFactor(builder, StatMulFactor_vec)
    ConstArenaExcel.AddStatSumFactor(builder, StatSumFactor_vec)
    ConstArenaExcel.AddNPCName(builder, NPCName_vec)
    ConstArenaExcel.AddNPCMainCharacterCount(builder, NPCMainCharacterCount_val)
    ConstArenaExcel.AddNPCSupportCharacterCount(builder, NPCSupportCharacterCount_val)
    ConstArenaExcel.AddNPCCharacterSkillLevel(builder, NPCCharacterSkillLevel_val)
    ConstArenaExcel.AddTimeSpanInDaysForBattleHistory(builder, TimeSpanInDaysForBattleHistory_val)
    ConstArenaExcel.AddHiddenCharacterImagePath(builder, HiddenCharacterImagePath_off)
    ConstArenaExcel.AddDefenseVictoryRewardMaxCount(builder, DefenseVictoryRewardMaxCount_val)
    ConstArenaExcel.AddTopRankerCountLimit(builder, TopRankerCountLimit_val)
    ConstArenaExcel.AddAutoRefreshIntervalMilliSeconds(builder, AutoRefreshIntervalMilliSeconds_val)
    ConstArenaExcel.AddEchelonSettingIntervalMilliSeconds(builder, EchelonSettingIntervalMilliSeconds_val)
    ConstArenaExcel.AddSkipAllowedTimeMilliSeconds(builder, SkipAllowedTimeMilliSeconds_val)
    ConstArenaExcel.AddShowSeasonChangeInfoStartTime(builder, ShowSeasonChangeInfoStartTime_off)
    ConstArenaExcel.AddShowSeasonChangeInfoEndTime(builder, ShowSeasonChangeInfoEndTime_off)
    ConstArenaExcel.AddShowSeasonId(builder, ShowSeasonId_val)
    ConstArenaExcel.AddArenaHistoryQueryLimitDays(builder, ArenaHistoryQueryLimitDays_val)
    return ConstArenaExcel.End(builder)

def pack_ConstAudioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstAudio") if encrypt else None
    DefaultSnapShotName_off = builder.CreateString(encrypt_string(data.get('DefaultSnapShotName', ''), password))
    BattleSnapShotName_off = builder.CreateString(encrypt_string(data.get('BattleSnapShotName', ''), password))
    RaidSnapShotName_off = builder.CreateString(encrypt_string(data.get('RaidSnapShotName', ''), password))
    ExSkillCutInSnapShotName_off = builder.CreateString(encrypt_string(data.get('ExSkillCutInSnapShotName', ''), password))
    ConstAudioExcel.Start(builder)
    ConstAudioExcel.AddDefaultSnapShotName(builder, DefaultSnapShotName_off)
    ConstAudioExcel.AddBattleSnapShotName(builder, BattleSnapShotName_off)
    ConstAudioExcel.AddRaidSnapShotName(builder, RaidSnapShotName_off)
    ConstAudioExcel.AddExSkillCutInSnapShotName(builder, ExSkillCutInSnapShotName_off)
    return ConstAudioExcel.End(builder)

def pack_ConstCombatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstCombat") if encrypt else None
    SuppliesConditionStringId_off = builder.CreateString(encrypt_string(data.get('SuppliesConditionStringId', ''), password))
    EngageTimelinePath_off = builder.CreateString(encrypt_string(data.get('EngageTimelinePath', ''), password))
    EngageWithSupporterTimelinePath_off = builder.CreateString(encrypt_string(data.get('EngageWithSupporterTimelinePath', ''), password))
    VictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('VictoryTimelinePath', ''), password))
    RaidOpenScenarioId_off = builder.CreateString(encrypt_string(data.get('RaidOpenScenarioId', ''), password))
    EliminateRaidOpenScenarioId_off = builder.CreateString(encrypt_string(data.get('EliminateRaidOpenScenarioId', ''), password))
    EchelonExtensionEngageTimelinePath_off = builder.CreateString(encrypt_string(data.get('EchelonExtensionEngageTimelinePath', ''), password))
    EchelonExtensionEngageWithSupporterTimelinePath_off = builder.CreateString(encrypt_string(data.get('EchelonExtensionEngageWithSupporterTimelinePath', ''), password))
    EchelonExtensionVictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('EchelonExtensionVictoryTimelinePath', ''), password))
    SkillHandCount_val = convert_int(data.get('SkillHandCount', 0), password)
    DyingTime_val = convert_int(data.get('DyingTime', 0), password)
    BuffIconBlinkTime_val = convert_int(data.get('BuffIconBlinkTime', 0), password)
    ShowBufficonEXSkill_val = data.get('ShowBufficonEXSkill', 0)
    ShowBufficonPassiveSkill_val = data.get('ShowBufficonPassiveSkill', 0)
    ShowBufficonExtraPassiveSkill_val = data.get('ShowBufficonExtraPassiveSkill', 0)
    ShowBufficonLeaderSkill_val = data.get('ShowBufficonLeaderSkill', 0)
    ShowBufficonGroundPassiveSkill_val = data.get('ShowBufficonGroundPassiveSkill', 0)
    PublicSpeechBubbleOffsetX_val = encrypt_float(data.get('PublicSpeechBubbleOffsetX', 0), password)
    PublicSpeechBubbleOffsetY_val = encrypt_float(data.get('PublicSpeechBubbleOffsetY', 0), password)
    PublicSpeechBubbleOffsetZ_val = encrypt_float(data.get('PublicSpeechBubbleOffsetZ', 0), password)
    ShowRaidListCount_val = convert_int(data.get('ShowRaidListCount', 0), password)
    MaxRaidTicketCount_val = convert_long(data.get('MaxRaidTicketCount', 0), password)
    MaxRaidBossSkillSlot_val = convert_long(data.get('MaxRaidBossSkillSlot', 0), password)
    TimeLimitAlarm_val = convert_long(data.get('TimeLimitAlarm', 0), password)
    EchelonMaxCommonCost_val = convert_int(data.get('EchelonMaxCommonCost', 0), password)
    EchelonInitCommonCost_val = convert_int(data.get('EchelonInitCommonCost', 0), password)
    SkillSlotCoolTime_val = convert_long(data.get('SkillSlotCoolTime', 0), password)
    EnemyRegenCost_val = convert_long(data.get('EnemyRegenCost', 0), password)
    ChampionRegenCost_val = convert_long(data.get('ChampionRegenCost', 0), password)
    PlayerRegenCostDelay_val = convert_long(data.get('PlayerRegenCostDelay', 0), password)
    CrowdControlFactor_val = convert_long(data.get('CrowdControlFactor', 0), password)
    DefenceConstA_val = convert_long(data.get('DefenceConstA', 0), password)
    DefenceConstB_val = convert_long(data.get('DefenceConstB', 0), password)
    DefenceConstC_val = convert_long(data.get('DefenceConstC', 0), password)
    DefenceConstD_val = convert_long(data.get('DefenceConstD', 0), password)
    AccuracyConstA_val = convert_long(data.get('AccuracyConstA', 0), password)
    AccuracyConstB_val = convert_long(data.get('AccuracyConstB', 0), password)
    AccuracyConstC_val = convert_long(data.get('AccuracyConstC', 0), password)
    AccuracyConstD_val = convert_long(data.get('AccuracyConstD', 0), password)
    CriticalConstA_val = convert_long(data.get('CriticalConstA', 0), password)
    CriticalConstB_val = convert_long(data.get('CriticalConstB', 0), password)
    CriticalConstC_val = convert_long(data.get('CriticalConstC', 0), password)
    CriticalConstD_val = convert_long(data.get('CriticalConstD', 0), password)
    MaxGroupBuffLevel_val = convert_int(data.get('MaxGroupBuffLevel', 0), password)
    EmojiDefaultTime_val = convert_int(data.get('EmojiDefaultTime', 0), password)
    TimeLineActionRotateSpeed_val = convert_long(data.get('TimeLineActionRotateSpeed', 0), password)
    BodyRotateSpeed_val = convert_long(data.get('BodyRotateSpeed', 0), password)
    NormalTimeScale_val = convert_long(data.get('NormalTimeScale', 0), password)
    FastTimeScale_val = convert_long(data.get('FastTimeScale', 0), password)
    BulletTimeScale_val = convert_long(data.get('BulletTimeScale', 0), password)
    UIDisplayDelayAfterSkillCutIn_val = convert_long(data.get('UIDisplayDelayAfterSkillCutIn', 0), password)
    UseInitialRangeForCoverMove_val = data.get('UseInitialRangeForCoverMove', 0)
    SlowTimeScale_val = convert_long(data.get('SlowTimeScale', 0), password)
    AimIKMinDegree_val = encrypt_float(data.get('AimIKMinDegree', 0), password)
    AimIKMaxDegree_val = encrypt_float(data.get('AimIKMaxDegree', 0), password)
    MinimumClearTime_val = convert_int(data.get('MinimumClearTime', 0), password)
    MinimumClearLevelGap_val = convert_int(data.get('MinimumClearLevelGap', 0), password)
    CheckCheaterMaxUseCostNonArena_val = convert_int(data.get('CheckCheaterMaxUseCostNonArena', 0), password)
    CheckCheaterMaxUseCostArena_val = convert_int(data.get('CheckCheaterMaxUseCostArena', 0), password)
    AllowedMaxTimeScale_val = convert_long(data.get('AllowedMaxTimeScale', 0), password)
    RandomAnimationOutput_val = convert_long(data.get('RandomAnimationOutput', 0), password)
    SummonedTeleportDistance_val = convert_long(data.get('SummonedTeleportDistance', 0), password)
    ArenaMinimumClearTime_val = convert_int(data.get('ArenaMinimumClearTime', 0), password)
    WORLDBOSSBATTLELITTLE_val = convert_long(data.get('WORLDBOSSBATTLELITTLE', 0), password)
    WORLDBOSSBATTLEMIDDLE_val = convert_long(data.get('WORLDBOSSBATTLEMIDDLE', 0), password)
    WORLDBOSSBATTLEHIGH_val = convert_long(data.get('WORLDBOSSBATTLEHIGH', 0), password)
    WORLDBOSSBATTLEVERYHIGH_val = convert_long(data.get('WORLDBOSSBATTLEVERYHIGH', 0), password)
    WorldRaidAutoSyncTermSecond_val = convert_long(data.get('WorldRaidAutoSyncTermSecond', 0), password)
    WorldRaidBossHpDecreaseTerm_val = convert_long(data.get('WorldRaidBossHpDecreaseTerm', 0), password)
    WorldRaidBossParcelReactionDelay_val = convert_long(data.get('WorldRaidBossParcelReactionDelay', 0), password)
    RaidRankingJumpMinimumWaitingTime_val = convert_long(data.get('RaidRankingJumpMinimumWaitingTime', 0), password)
    EffectTeleportDistance_val = encrypt_float(data.get('EffectTeleportDistance', 0), password)
    AuraExitThresholdMargin_val = convert_long(data.get('AuraExitThresholdMargin', 0), password)
    TSAInteractionDamageFactor_val = convert_long(data.get('TSAInteractionDamageFactor', 0), password)
    VictoryInteractionRate_val = convert_long(data.get('VictoryInteractionRate', 0), password)
    EchelonExtensionEchelonMaxCommonCost_val = convert_int(data.get('EchelonExtensionEchelonMaxCommonCost', 0), password)
    EchelonMaxOverloadCost_val = convert_long(data.get('EchelonMaxOverloadCost', 0), password)
    EchelonExtensionMaxOverloadCost_val = convert_long(data.get('EchelonExtensionMaxOverloadCost', 0), password)
    EchelonExtensionEchelonInitCommonCost_val = convert_int(data.get('EchelonExtensionEchelonInitCommonCost', 0), password)
    EchelonExtensionCostRegenRatio_val = convert_long(data.get('EchelonExtensionCostRegenRatio', 0), password)
    EchelonOverloadCostRegenRatio_val = convert_long(data.get('EchelonOverloadCostRegenRatio', 0), password)
    EchelonExtensionOverloadCostRegenRatio_val = convert_long(data.get('EchelonExtensionOverloadCostRegenRatio', 0), password)
    CheckCheaterMaxUseCostMultiFloorRaid_val = convert_int(data.get('CheckCheaterMaxUseCostMultiFloorRaid', 0), password)
    ExcessiveTouchCheckTime_val = encrypt_float(data.get('ExcessiveTouchCheckTime', 0), password)
    ExcessiveTouchCheckCount_val = convert_int(data.get('ExcessiveTouchCheckCount', 0), password)
    CampaignAlertPopupLevelGap_val = convert_int(data.get('CampaignAlertPopupLevelGap', 0), password)
    MoveCorrectionSkipRatio_val = convert_int(data.get('MoveCorrectionSkipRatio', 0), password)
    ConstCombatExcel.Start(builder)
    ConstCombatExcel.AddSkillHandCount(builder, SkillHandCount_val)
    ConstCombatExcel.AddDyingTime(builder, DyingTime_val)
    ConstCombatExcel.AddBuffIconBlinkTime(builder, BuffIconBlinkTime_val)
    ConstCombatExcel.AddShowBufficonEXSkill(builder, ShowBufficonEXSkill_val)
    ConstCombatExcel.AddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill_val)
    ConstCombatExcel.AddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill_val)
    ConstCombatExcel.AddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill_val)
    ConstCombatExcel.AddShowBufficonGroundPassiveSkill(builder, ShowBufficonGroundPassiveSkill_val)
    ConstCombatExcel.AddSuppliesConditionStringId(builder, SuppliesConditionStringId_off)
    ConstCombatExcel.AddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX_val)
    ConstCombatExcel.AddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY_val)
    ConstCombatExcel.AddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ_val)
    ConstCombatExcel.AddShowRaidListCount(builder, ShowRaidListCount_val)
    ConstCombatExcel.AddMaxRaidTicketCount(builder, MaxRaidTicketCount_val)
    ConstCombatExcel.AddMaxRaidBossSkillSlot(builder, MaxRaidBossSkillSlot_val)
    ConstCombatExcel.AddEngageTimelinePath(builder, EngageTimelinePath_off)
    ConstCombatExcel.AddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePath_off)
    ConstCombatExcel.AddVictoryTimelinePath(builder, VictoryTimelinePath_off)
    ConstCombatExcel.AddTimeLimitAlarm(builder, TimeLimitAlarm_val)
    ConstCombatExcel.AddEchelonMaxCommonCost(builder, EchelonMaxCommonCost_val)
    ConstCombatExcel.AddEchelonInitCommonCost(builder, EchelonInitCommonCost_val)
    ConstCombatExcel.AddSkillSlotCoolTime(builder, SkillSlotCoolTime_val)
    ConstCombatExcel.AddEnemyRegenCost(builder, EnemyRegenCost_val)
    ConstCombatExcel.AddChampionRegenCost(builder, ChampionRegenCost_val)
    ConstCombatExcel.AddPlayerRegenCostDelay(builder, PlayerRegenCostDelay_val)
    ConstCombatExcel.AddCrowdControlFactor(builder, CrowdControlFactor_val)
    ConstCombatExcel.AddRaidOpenScenarioId(builder, RaidOpenScenarioId_off)
    ConstCombatExcel.AddEliminateRaidOpenScenarioId(builder, EliminateRaidOpenScenarioId_off)
    ConstCombatExcel.AddDefenceConstA(builder, DefenceConstA_val)
    ConstCombatExcel.AddDefenceConstB(builder, DefenceConstB_val)
    ConstCombatExcel.AddDefenceConstC(builder, DefenceConstC_val)
    ConstCombatExcel.AddDefenceConstD(builder, DefenceConstD_val)
    ConstCombatExcel.AddAccuracyConstA(builder, AccuracyConstA_val)
    ConstCombatExcel.AddAccuracyConstB(builder, AccuracyConstB_val)
    ConstCombatExcel.AddAccuracyConstC(builder, AccuracyConstC_val)
    ConstCombatExcel.AddAccuracyConstD(builder, AccuracyConstD_val)
    ConstCombatExcel.AddCriticalConstA(builder, CriticalConstA_val)
    ConstCombatExcel.AddCriticalConstB(builder, CriticalConstB_val)
    ConstCombatExcel.AddCriticalConstC(builder, CriticalConstC_val)
    ConstCombatExcel.AddCriticalConstD(builder, CriticalConstD_val)
    ConstCombatExcel.AddMaxGroupBuffLevel(builder, MaxGroupBuffLevel_val)
    ConstCombatExcel.AddEmojiDefaultTime(builder, EmojiDefaultTime_val)
    ConstCombatExcel.AddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed_val)
    ConstCombatExcel.AddBodyRotateSpeed(builder, BodyRotateSpeed_val)
    ConstCombatExcel.AddNormalTimeScale(builder, NormalTimeScale_val)
    ConstCombatExcel.AddFastTimeScale(builder, FastTimeScale_val)
    ConstCombatExcel.AddBulletTimeScale(builder, BulletTimeScale_val)
    ConstCombatExcel.AddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn_val)
    ConstCombatExcel.AddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove_val)
    ConstCombatExcel.AddSlowTimeScale(builder, SlowTimeScale_val)
    ConstCombatExcel.AddAimIKMinDegree(builder, AimIKMinDegree_val)
    ConstCombatExcel.AddAimIKMaxDegree(builder, AimIKMaxDegree_val)
    ConstCombatExcel.AddMinimumClearTime(builder, MinimumClearTime_val)
    ConstCombatExcel.AddMinimumClearLevelGap(builder, MinimumClearLevelGap_val)
    ConstCombatExcel.AddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena_val)
    ConstCombatExcel.AddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena_val)
    ConstCombatExcel.AddAllowedMaxTimeScale(builder, AllowedMaxTimeScale_val)
    ConstCombatExcel.AddRandomAnimationOutput(builder, RandomAnimationOutput_val)
    ConstCombatExcel.AddSummonedTeleportDistance(builder, SummonedTeleportDistance_val)
    ConstCombatExcel.AddArenaMinimumClearTime(builder, ArenaMinimumClearTime_val)
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLE(builder, WORLDBOSSBATTLELITTLE_val)
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLE(builder, WORLDBOSSBATTLEMIDDLE_val)
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGH(builder, WORLDBOSSBATTLEHIGH_val)
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGH(builder, WORLDBOSSBATTLEVERYHIGH_val)
    ConstCombatExcel.AddWorldRaidAutoSyncTermSecond(builder, WorldRaidAutoSyncTermSecond_val)
    ConstCombatExcel.AddWorldRaidBossHpDecreaseTerm(builder, WorldRaidBossHpDecreaseTerm_val)
    ConstCombatExcel.AddWorldRaidBossParcelReactionDelay(builder, WorldRaidBossParcelReactionDelay_val)
    ConstCombatExcel.AddRaidRankingJumpMinimumWaitingTime(builder, RaidRankingJumpMinimumWaitingTime_val)
    ConstCombatExcel.AddEffectTeleportDistance(builder, EffectTeleportDistance_val)
    ConstCombatExcel.AddAuraExitThresholdMargin(builder, AuraExitThresholdMargin_val)
    ConstCombatExcel.AddTSAInteractionDamageFactor(builder, TSAInteractionDamageFactor_val)
    ConstCombatExcel.AddVictoryInteractionRate(builder, VictoryInteractionRate_val)
    ConstCombatExcel.AddEchelonExtensionEngageTimelinePath(builder, EchelonExtensionEngageTimelinePath_off)
    ConstCombatExcel.AddEchelonExtensionEngageWithSupporterTimelinePath(builder, EchelonExtensionEngageWithSupporterTimelinePath_off)
    ConstCombatExcel.AddEchelonExtensionVictoryTimelinePath(builder, EchelonExtensionVictoryTimelinePath_off)
    ConstCombatExcel.AddEchelonExtensionEchelonMaxCommonCost(builder, EchelonExtensionEchelonMaxCommonCost_val)
    ConstCombatExcel.AddEchelonMaxOverloadCost(builder, EchelonMaxOverloadCost_val)
    ConstCombatExcel.AddEchelonExtensionMaxOverloadCost(builder, EchelonExtensionMaxOverloadCost_val)
    ConstCombatExcel.AddEchelonExtensionEchelonInitCommonCost(builder, EchelonExtensionEchelonInitCommonCost_val)
    ConstCombatExcel.AddEchelonExtensionCostRegenRatio(builder, EchelonExtensionCostRegenRatio_val)
    ConstCombatExcel.AddEchelonOverloadCostRegenRatio(builder, EchelonOverloadCostRegenRatio_val)
    ConstCombatExcel.AddEchelonExtensionOverloadCostRegenRatio(builder, EchelonExtensionOverloadCostRegenRatio_val)
    ConstCombatExcel.AddCheckCheaterMaxUseCostMultiFloorRaid(builder, CheckCheaterMaxUseCostMultiFloorRaid_val)
    ConstCombatExcel.AddExcessiveTouchCheckTime(builder, ExcessiveTouchCheckTime_val)
    ConstCombatExcel.AddExcessiveTouchCheckCount(builder, ExcessiveTouchCheckCount_val)
    ConstCombatExcel.AddCampaignAlertPopupLevelGap(builder, CampaignAlertPopupLevelGap_val)
    ConstCombatExcel.AddMoveCorrectionSkipRatio(builder, MoveCorrectionSkipRatio_val)
    return ConstCombatExcel.End(builder)

def pack_ConstCommonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstCommon") if encrypt else None
    UILabelCharacterWrap_off = builder.CreateString(encrypt_string(data.get('UILabelCharacterWrap', ''), password))
    TimeAttackDungeonScenarioId_off = builder.CreateString(encrypt_string(data.get('TimeAttackDungeonScenarioId', ''), password))
    BirthdayMailStartDate_off = builder.CreateString(encrypt_string(data.get('BirthdayMailStartDate', ''), password))
    BattlePassExpIconPath_off = builder.CreateString(encrypt_string(data.get('BattlePassExpIconPath', ''), password))
    CraftDuration_vec = 0
    if 'CraftDuration' in data:
        CraftDuration_items = data['CraftDuration']
        ConstCommonExcel.StartCraftDurationVector(builder, len(CraftDuration_items))
        for item in reversed(CraftDuration_items):
            builder.PrependInt32(convert_int(item, password))
        CraftDuration_vec = builder.EndVector(len(CraftDuration_items))
    ShiftingCraftDuration_vec = 0
    if 'ShiftingCraftDuration' in data:
        ShiftingCraftDuration_items = data['ShiftingCraftDuration']
        ConstCommonExcel.StartShiftingCraftDurationVector(builder, len(ShiftingCraftDuration_items))
        for item in reversed(ShiftingCraftDuration_items):
            builder.PrependInt32(convert_int(item, password))
        ShiftingCraftDuration_vec = builder.EndVector(len(ShiftingCraftDuration_items))
    EquipmentSlotOpenLevel_vec = 0
    if 'EquipmentSlotOpenLevel' in data:
        EquipmentSlotOpenLevel_items = data['EquipmentSlotOpenLevel']
        ConstCommonExcel.StartEquipmentSlotOpenLevelVector(builder, len(EquipmentSlotOpenLevel_items))
        for item in reversed(EquipmentSlotOpenLevel_items):
            builder.PrependInt32(convert_int(item, password))
        EquipmentSlotOpenLevel_vec = builder.EndVector(len(EquipmentSlotOpenLevel_items))
    CraftBaseGoldRequired_vec = 0
    if 'CraftBaseGoldRequired' in data:
        CraftBaseGoldRequired_items = data['CraftBaseGoldRequired']
        ConstCommonExcel.StartCraftBaseGoldRequiredVector(builder, len(CraftBaseGoldRequired_items))
        for item in reversed(CraftBaseGoldRequired_items):
            builder.PrependInt64(convert_long(item, password))
        CraftBaseGoldRequired_vec = builder.EndVector(len(CraftBaseGoldRequired_items))
    CommonFavorItemTags_vec = 0
    if 'CommonFavorItemTags' in data:
        CommonFavorItemTags_items = data['CommonFavorItemTags']
        ConstCommonExcel.StartCommonFavorItemTagsVector(builder, len(CommonFavorItemTags_items))
        for item in reversed(CommonFavorItemTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CommonFavorItemTags_vec = builder.EndVector(len(CommonFavorItemTags_items))
    CampaignMainStageMaxRank_val = convert_int(data.get('CampaignMainStageMaxRank', 0), password)
    CampaignMainStageBestRecord_val = convert_int(data.get('CampaignMainStageBestRecord', 0), password)
    HardAdventurePlayCountRecoverDailyNumber_val = convert_int(data.get('HardAdventurePlayCountRecoverDailyNumber', 0), password)
    HardStageCount_val = convert_int(data.get('HardStageCount', 0), password)
    TacticRankClearTime_val = convert_int(data.get('TacticRankClearTime', 0), password)
    BaseTimeScale_val = convert_long(data.get('BaseTimeScale', 0), password)
    GachaPercentage_val = convert_int(data.get('GachaPercentage', 0), password)
    AcademyFavorZoneId_val = convert_long(data.get('AcademyFavorZoneId', 0), password)
    CafePresetSlotCount_val = convert_int(data.get('CafePresetSlotCount', 0), password)
    CafeMonologueIntervalMillisec_val = convert_long(data.get('CafeMonologueIntervalMillisec', 0), password)
    CafeMonologueDefaultDuration_val = convert_long(data.get('CafeMonologueDefaultDuration', 0), password)
    CafeBubbleIdleDurationMilliSec_val = convert_long(data.get('CafeBubbleIdleDurationMilliSec', 0), password)
    FindGiftTimeLimit_val = convert_int(data.get('FindGiftTimeLimit', 0), password)
    CafeAutoChargePeriodInMsc_val = convert_int(data.get('CafeAutoChargePeriodInMsc', 0), password)
    CafeProductionDecimalPosition_val = convert_int(data.get('CafeProductionDecimalPosition', 0), password)
    CafeSetGroupApplyCount_val = convert_int(data.get('CafeSetGroupApplyCount', 0), password)
    WeekDungeonFindGiftRewardLimitCount_val = convert_int(data.get('WeekDungeonFindGiftRewardLimitCount', 0), password)
    StageFailedCurrencyRefundRate_val = convert_int(data.get('StageFailedCurrencyRefundRate', 0), password)
    EnterDeposit_val = convert_int(data.get('EnterDeposit', 0), password)
    AccountMaxLevel_val = convert_int(data.get('AccountMaxLevel', 0), password)
    MainSquadExpBonus_val = convert_int(data.get('MainSquadExpBonus', 0), password)
    SupportSquadExpBonus_val = convert_int(data.get('SupportSquadExpBonus', 0), password)
    AccountExpRatio_val = convert_int(data.get('AccountExpRatio', 0), password)
    MissionToastLifeTime_val = convert_int(data.get('MissionToastLifeTime', 0), password)
    ExpItemInsertLimit_val = convert_int(data.get('ExpItemInsertLimit', 0), password)
    ExpItemInsertAccelTime_val = convert_int(data.get('ExpItemInsertAccelTime', 0), password)
    CharacterLvUpCoefficient_val = convert_int(data.get('CharacterLvUpCoefficient', 0), password)
    EquipmentLvUpCoefficient_val = convert_int(data.get('EquipmentLvUpCoefficient', 0), password)
    ExpEquipInsertLimit_val = convert_int(data.get('ExpEquipInsertLimit', 0), password)
    EquipLvUpCoefficient_val = convert_int(data.get('EquipLvUpCoefficient', 0), password)
    NicknameLength_val = convert_int(data.get('NicknameLength', 0), password)
    CraftLimitTime_val = convert_int(data.get('CraftLimitTime', 0), password)
    ShiftingCraftTicketConsumeAmount_val = convert_int(data.get('ShiftingCraftTicketConsumeAmount', 0), password)
    ShiftingCraftSlotMaxCapacity_val = convert_int(data.get('ShiftingCraftSlotMaxCapacity', 0), password)
    CraftTicketItemUniqueId_val = convert_int(data.get('CraftTicketItemUniqueId', 0), password)
    CraftTicketConsumeAmount_val = convert_int(data.get('CraftTicketConsumeAmount', 0), password)
    AcademyEnterCostType_val = convert_int(getattr(ParcelType, data.get('AcademyEnterCostType', 0)), password)
    AcademyEnterCostId_val = convert_long(data.get('AcademyEnterCostId', 0), password)
    AcademyTicketCost_val = convert_int(data.get('AcademyTicketCost', 0), password)
    MassangerMessageExpireDay_val = convert_int(data.get('MassangerMessageExpireDay', 0), password)
    CraftLeafNodeGenerateLv1Count_val = convert_int(data.get('CraftLeafNodeGenerateLv1Count', 0), password)
    CraftLeafNodeGenerateLv2Count_val = convert_int(data.get('CraftLeafNodeGenerateLv2Count', 0), password)
    TutorialGachaShopId_val = convert_int(data.get('TutorialGachaShopId', 0), password)
    BeforehandGachaShopId_val = convert_int(data.get('BeforehandGachaShopId', 0), password)
    TutorialGachaGoodsId_val = convert_int(data.get('TutorialGachaGoodsId', 0), password)
    ScenarioAutoDelayMillisec_val = encrypt_float(data.get('ScenarioAutoDelayMillisec', 0), password)
    JoinOrCreateClanCoolTimeFromHour_val = convert_long(data.get('JoinOrCreateClanCoolTimeFromHour', 0), password)
    ClanMaxMember_val = convert_long(data.get('ClanMaxMember', 0), password)
    ClanSearchResultCount_val = convert_long(data.get('ClanSearchResultCount', 0), password)
    ClanMaxApplicant_val = convert_long(data.get('ClanMaxApplicant', 0), password)
    ClanRejoinCoolTimeFromSecond_val = convert_long(data.get('ClanRejoinCoolTimeFromSecond', 0), password)
    ClanWordBalloonMaxCharacter_val = convert_int(data.get('ClanWordBalloonMaxCharacter', 0), password)
    CallNameRenameCoolTimeFromHour_val = convert_long(data.get('CallNameRenameCoolTimeFromHour', 0), password)
    CallNameMinimumLength_val = convert_long(data.get('CallNameMinimumLength', 0), password)
    CallNameMaximumLength_val = convert_long(data.get('CallNameMaximumLength', 0), password)
    LobbyToScreenModeWaitTime_val = convert_long(data.get('LobbyToScreenModeWaitTime', 0), password)
    ScreenshotToLobbyButtonHideDelay_val = convert_long(data.get('ScreenshotToLobbyButtonHideDelay', 0), password)
    PrologueScenarioID01_val = convert_long(data.get('PrologueScenarioID01', 0), password)
    PrologueScenarioID02_val = convert_long(data.get('PrologueScenarioID02', 0), password)
    TutorialHardStage11_val = convert_long(data.get('TutorialHardStage11', 0), password)
    TutorialSpeedButtonStage_val = convert_long(data.get('TutorialSpeedButtonStage', 0), password)
    TutorialCharacterDefaultCount_val = convert_long(data.get('TutorialCharacterDefaultCount', 0), password)
    TutorialShopCategoryType_val = convert_int(getattr(ShopCategoryType, data.get('TutorialShopCategoryType', 0)), password)
    AdventureStrategyPlayTimeLimitInSeconds_val = convert_long(data.get('AdventureStrategyPlayTimeLimitInSeconds', 0), password)
    WeekDungoenTacticPlayTimeLimitInSeconds_val = convert_long(data.get('WeekDungoenTacticPlayTimeLimitInSeconds', 0), password)
    RaidTacticPlayTimeLimitInSeconds_val = convert_long(data.get('RaidTacticPlayTimeLimitInSeconds', 0), password)
    RaidOpponentListAmount_val = convert_long(data.get('RaidOpponentListAmount', 0), password)
    PostExpiredDayAttendance_val = convert_int(data.get('PostExpiredDayAttendance', 0), password)
    PostExpiredDayInventoryOverflow_val = convert_int(data.get('PostExpiredDayInventoryOverflow', 0), password)
    PostExpiredDayGameManager_val = convert_int(data.get('PostExpiredDayGameManager', 0), password)
    RequestTimeOut_val = encrypt_float(data.get('RequestTimeOut', 0), password)
    MailStorageSoftCap_val = convert_int(data.get('MailStorageSoftCap', 0), password)
    MailStorageHardCap_val = convert_int(data.get('MailStorageHardCap', 0), password)
    ClearDeckStorageSize_val = convert_int(data.get('ClearDeckStorageSize', 0), password)
    ClearDeckNoStarViewCount_val = convert_int(data.get('ClearDeckNoStarViewCount', 0), password)
    ClearDeck1StarViewCount_val = convert_int(data.get('ClearDeck1StarViewCount', 0), password)
    ClearDeck2StarViewCount_val = convert_int(data.get('ClearDeck2StarViewCount', 0), password)
    ClearDeck3StarViewCount_val = convert_int(data.get('ClearDeck3StarViewCount', 0), password)
    ExSkillLevelMax_val = convert_int(data.get('ExSkillLevelMax', 0), password)
    PublicSkillLevelMax_val = convert_int(data.get('PublicSkillLevelMax', 0), password)
    PassiveSkillLevelMax_val = convert_int(data.get('PassiveSkillLevelMax', 0), password)
    ExtraPassiveSkillLevelMax_val = convert_int(data.get('ExtraPassiveSkillLevelMax', 0), password)
    AccountCommentMaxLength_val = convert_int(data.get('AccountCommentMaxLength', 0), password)
    CafeSummonCoolTimeFromHour_val = convert_int(data.get('CafeSummonCoolTimeFromHour', 0), password)
    LimitedStageDailyClearCount_val = convert_long(data.get('LimitedStageDailyClearCount', 0), password)
    LimitedStageEntryTimeLimit_val = convert_long(data.get('LimitedStageEntryTimeLimit', 0), password)
    LimitedStageEntryTimeBuffer_val = convert_long(data.get('LimitedStageEntryTimeBuffer', 0), password)
    LimitedStagePointAmount_val = convert_long(data.get('LimitedStagePointAmount', 0), password)
    LimitedStagePointPerApMin_val = convert_long(data.get('LimitedStagePointPerApMin', 0), password)
    LimitedStagePointPerApMax_val = convert_long(data.get('LimitedStagePointPerApMax', 0), password)
    AccountLinkReward_val = convert_int(data.get('AccountLinkReward', 0), password)
    MonthlyProductCheckDays_val = convert_int(data.get('MonthlyProductCheckDays', 0), password)
    WeaponLvUpCoefficient_val = convert_int(data.get('WeaponLvUpCoefficient', 0), password)
    ShowRaidMyListCount_val = convert_int(data.get('ShowRaidMyListCount', 0), password)
    RaidEnterCostType_val = convert_int(getattr(ParcelType, data.get('RaidEnterCostType', 0)), password)
    RaidEnterCostId_val = convert_long(data.get('RaidEnterCostId', 0), password)
    RaidTicketCost_val = convert_long(data.get('RaidTicketCost', 0), password)
    TimeAttackDungoenPlayCountPerTicket_val = convert_int(data.get('TimeAttackDungoenPlayCountPerTicket', 0), password)
    TimeAttackDungeonEnterCostType_val = convert_int(getattr(ParcelType, data.get('TimeAttackDungeonEnterCostType', 0)), password)
    TimeAttackDungeonEnterCostId_val = convert_long(data.get('TimeAttackDungeonEnterCostId', 0), password)
    TimeAttackDungeonEnterCost_val = convert_long(data.get('TimeAttackDungeonEnterCost', 0), password)
    ClanLeaderTransferLastLoginLimit_val = convert_long(data.get('ClanLeaderTransferLastLoginLimit', 0), password)
    MonthlyProductRepurchasePopupLimit_val = convert_int(data.get('MonthlyProductRepurchasePopupLimit', 0), password)
    MaxApMasterCoinPerWeek_val = convert_long(data.get('MaxApMasterCoinPerWeek', 0), password)
    CraftOpenExpTier1_val = convert_long(data.get('CraftOpenExpTier1', 0), password)
    CraftOpenExpTier2_val = convert_long(data.get('CraftOpenExpTier2', 0), password)
    CraftOpenExpTier3_val = convert_long(data.get('CraftOpenExpTier3', 0), password)
    CharacterEquipmentGearSlot_val = convert_long(data.get('CharacterEquipmentGearSlot', 0), password)
    BirthDayDDay_val = convert_int(data.get('BirthDayDDay', 0), password)
    RecommendedFriendsLvDifferenceLimit_val = convert_int(data.get('RecommendedFriendsLvDifferenceLimit', 0), password)
    DDosDetectCount_val = convert_int(data.get('DDosDetectCount', 0), password)
    DDosCheckIntervalInSeconds_val = convert_int(data.get('DDosCheckIntervalInSeconds', 0), password)
    MaxFriendsCount_val = convert_int(data.get('MaxFriendsCount', 0), password)
    MaxFriendsRequest_val = convert_int(data.get('MaxFriendsRequest', 0), password)
    FriendsSearchRequestCount_val = convert_int(data.get('FriendsSearchRequestCount', 0), password)
    FriendsMaxApplicant_val = convert_int(data.get('FriendsMaxApplicant', 0), password)
    IdCardDefaultCharacterId_val = convert_long(data.get('IdCardDefaultCharacterId', 0), password)
    IdCardDefaultBgId_val = convert_long(data.get('IdCardDefaultBgId', 0), password)
    WorldRaidGemEnterCost_val = convert_long(data.get('WorldRaidGemEnterCost', 0), password)
    WorldRaidGemEnterAmout_val = convert_long(data.get('WorldRaidGemEnterAmout', 0), password)
    FriendIdCardCommentMaxLength_val = convert_long(data.get('FriendIdCardCommentMaxLength', 0), password)
    FormationPresetNumberOfEchelonTab_val = convert_int(data.get('FormationPresetNumberOfEchelonTab', 0), password)
    FormationPresetNumberOfEchelon_val = convert_int(data.get('FormationPresetNumberOfEchelon', 0), password)
    FormationPresetRecentNumberOfEchelon_val = convert_int(data.get('FormationPresetRecentNumberOfEchelon', 0), password)
    FormationPresetEchelonTabTextLength_val = convert_int(data.get('FormationPresetEchelonTabTextLength', 0), password)
    FormationPresetEchelonSlotTextLength_val = convert_int(data.get('FormationPresetEchelonSlotTextLength', 0), password)
    CharProfileRowIntervalKr_val = convert_int(data.get('CharProfileRowIntervalKr', 0), password)
    CharProfileRowIntervalJp_val = convert_int(data.get('CharProfileRowIntervalJp', 0), password)
    CharProfilePopupRowIntervalKr_val = convert_int(data.get('CharProfilePopupRowIntervalKr', 0), password)
    CharProfilePopupRowIntervalJp_val = convert_int(data.get('CharProfilePopupRowIntervalJp', 0), password)
    BeforehandGachaCount_val = convert_int(data.get('BeforehandGachaCount', 0), password)
    BeforehandGachaGroupId_val = convert_int(data.get('BeforehandGachaGroupId', 0), password)
    RenewalDisplayOrderDay_val = convert_int(data.get('RenewalDisplayOrderDay', 0), password)
    EmblemDefaultId_val = convert_long(data.get('EmblemDefaultId', 0), password)
    BirthdayMailRemainDate_val = convert_int(data.get('BirthdayMailRemainDate', 0), password)
    BirthdayMailParcelType_val = convert_int(getattr(ParcelType, data.get('BirthdayMailParcelType', 0)), password)
    BirthdayMailParcelId_val = convert_long(data.get('BirthdayMailParcelId', 0), password)
    BirthdayMailParcelAmount_val = convert_int(data.get('BirthdayMailParcelAmount', 0), password)
    ClearDeckAverageDeckCount_val = convert_int(data.get('ClearDeckAverageDeckCount', 0), password)
    ClearDeckWorldRaidSaveConditionCoefficient_val = convert_int(data.get('ClearDeckWorldRaidSaveConditionCoefficient', 0), password)
    ClearDeckShowCount_val = convert_int(data.get('ClearDeckShowCount', 0), password)
    CharacterMaxLevel_val = convert_int(data.get('CharacterMaxLevel', 0), password)
    PotentialBonusStatMaxLevelMaxHP_val = convert_int(data.get('PotentialBonusStatMaxLevelMaxHP', 0), password)
    PotentialBonusStatMaxLevelAttackPower_val = convert_int(data.get('PotentialBonusStatMaxLevelAttackPower', 0), password)
    PotentialBonusStatMaxLevelHealPower_val = convert_int(data.get('PotentialBonusStatMaxLevelHealPower', 0), password)
    PotentialOpenConditionCharacterLevel_val = convert_int(data.get('PotentialOpenConditionCharacterLevel', 0), password)
    AssistStrangerMinLevel_val = convert_int(data.get('AssistStrangerMinLevel', 0), password)
    AssistStrangerMaxLevel_val = convert_int(data.get('AssistStrangerMaxLevel', 0), password)
    MaxBlockedUserCount_val = convert_int(data.get('MaxBlockedUserCount', 0), password)
    CafeRandomVisitMinComfortBonus_val = convert_long(data.get('CafeRandomVisitMinComfortBonus', 0), password)
    CafeRandomVisitMinLastLogin_val = convert_int(data.get('CafeRandomVisitMinLastLogin', 0), password)
    CafeTravelSyncIntervalByMillisec_val = convert_int(data.get('CafeTravelSyncIntervalByMillisec', 0), password)
    RankBracketPercentage1_val = convert_int(data.get('RankBracketPercentage1', 0), password)
    RankBracketPercentage2_val = convert_int(data.get('RankBracketPercentage2', 0), password)
    RankBracketPercentage3_val = convert_int(data.get('RankBracketPercentage3', 0), password)
    RankBracketPercentage4_val = convert_int(data.get('RankBracketPercentage4', 0), password)
    RankBracketPercentage5_val = convert_int(data.get('RankBracketPercentage5', 0), password)
    RankBracketPercentage6_val = convert_int(data.get('RankBracketPercentage6', 0), password)
    RankBracketPercentage7_val = convert_int(data.get('RankBracketPercentage7', 0), password)
    ExpiryBattlePassItemReceiveDay_val = convert_int(data.get('ExpiryBattlePassItemReceiveDay', 0), password)
    BattlePassFlavorTextIdleDurationMilliSec_val = convert_long(data.get('BattlePassFlavorTextIdleDurationMilliSec', 0), password)
    BattlePassEndImminentDay_val = convert_int(data.get('BattlePassEndImminentDay', 0), password)
    CafeCameraDragThreshold_val = encrypt_float(data.get('CafeCameraDragThreshold', 0), password)
    CafeSummonTicketBuyLimitForValidate_val = convert_int(data.get('CafeSummonTicketBuyLimitForValidate', 0), password)
    ConstCommonExcel.Start(builder)
    ConstCommonExcel.AddCampaignMainStageMaxRank(builder, CampaignMainStageMaxRank_val)
    ConstCommonExcel.AddCampaignMainStageBestRecord(builder, CampaignMainStageBestRecord_val)
    ConstCommonExcel.AddHardAdventurePlayCountRecoverDailyNumber(builder, HardAdventurePlayCountRecoverDailyNumber_val)
    ConstCommonExcel.AddHardStageCount(builder, HardStageCount_val)
    ConstCommonExcel.AddTacticRankClearTime(builder, TacticRankClearTime_val)
    ConstCommonExcel.AddBaseTimeScale(builder, BaseTimeScale_val)
    ConstCommonExcel.AddGachaPercentage(builder, GachaPercentage_val)
    ConstCommonExcel.AddAcademyFavorZoneId(builder, AcademyFavorZoneId_val)
    ConstCommonExcel.AddCafePresetSlotCount(builder, CafePresetSlotCount_val)
    ConstCommonExcel.AddCafeMonologueIntervalMillisec(builder, CafeMonologueIntervalMillisec_val)
    ConstCommonExcel.AddCafeMonologueDefaultDuration(builder, CafeMonologueDefaultDuration_val)
    ConstCommonExcel.AddCafeBubbleIdleDurationMilliSec(builder, CafeBubbleIdleDurationMilliSec_val)
    ConstCommonExcel.AddFindGiftTimeLimit(builder, FindGiftTimeLimit_val)
    ConstCommonExcel.AddCafeAutoChargePeriodInMsc(builder, CafeAutoChargePeriodInMsc_val)
    ConstCommonExcel.AddCafeProductionDecimalPosition(builder, CafeProductionDecimalPosition_val)
    ConstCommonExcel.AddCafeSetGroupApplyCount(builder, CafeSetGroupApplyCount_val)
    ConstCommonExcel.AddWeekDungeonFindGiftRewardLimitCount(builder, WeekDungeonFindGiftRewardLimitCount_val)
    ConstCommonExcel.AddStageFailedCurrencyRefundRate(builder, StageFailedCurrencyRefundRate_val)
    ConstCommonExcel.AddEnterDeposit(builder, EnterDeposit_val)
    ConstCommonExcel.AddAccountMaxLevel(builder, AccountMaxLevel_val)
    ConstCommonExcel.AddMainSquadExpBonus(builder, MainSquadExpBonus_val)
    ConstCommonExcel.AddSupportSquadExpBonus(builder, SupportSquadExpBonus_val)
    ConstCommonExcel.AddAccountExpRatio(builder, AccountExpRatio_val)
    ConstCommonExcel.AddMissionToastLifeTime(builder, MissionToastLifeTime_val)
    ConstCommonExcel.AddExpItemInsertLimit(builder, ExpItemInsertLimit_val)
    ConstCommonExcel.AddExpItemInsertAccelTime(builder, ExpItemInsertAccelTime_val)
    ConstCommonExcel.AddCharacterLvUpCoefficient(builder, CharacterLvUpCoefficient_val)
    ConstCommonExcel.AddEquipmentLvUpCoefficient(builder, EquipmentLvUpCoefficient_val)
    ConstCommonExcel.AddExpEquipInsertLimit(builder, ExpEquipInsertLimit_val)
    ConstCommonExcel.AddEquipLvUpCoefficient(builder, EquipLvUpCoefficient_val)
    ConstCommonExcel.AddNicknameLength(builder, NicknameLength_val)
    ConstCommonExcel.AddCraftDuration(builder, CraftDuration_vec)
    ConstCommonExcel.AddCraftLimitTime(builder, CraftLimitTime_val)
    ConstCommonExcel.AddShiftingCraftDuration(builder, ShiftingCraftDuration_vec)
    ConstCommonExcel.AddShiftingCraftTicketConsumeAmount(builder, ShiftingCraftTicketConsumeAmount_val)
    ConstCommonExcel.AddShiftingCraftSlotMaxCapacity(builder, ShiftingCraftSlotMaxCapacity_val)
    ConstCommonExcel.AddCraftTicketItemUniqueId(builder, CraftTicketItemUniqueId_val)
    ConstCommonExcel.AddCraftTicketConsumeAmount(builder, CraftTicketConsumeAmount_val)
    ConstCommonExcel.AddAcademyEnterCostType(builder, AcademyEnterCostType_val)
    ConstCommonExcel.AddAcademyEnterCostId(builder, AcademyEnterCostId_val)
    ConstCommonExcel.AddAcademyTicketCost(builder, AcademyTicketCost_val)
    ConstCommonExcel.AddMassangerMessageExpireDay(builder, MassangerMessageExpireDay_val)
    ConstCommonExcel.AddCraftLeafNodeGenerateLv1Count(builder, CraftLeafNodeGenerateLv1Count_val)
    ConstCommonExcel.AddCraftLeafNodeGenerateLv2Count(builder, CraftLeafNodeGenerateLv2Count_val)
    ConstCommonExcel.AddTutorialGachaShopId(builder, TutorialGachaShopId_val)
    ConstCommonExcel.AddBeforehandGachaShopId(builder, BeforehandGachaShopId_val)
    ConstCommonExcel.AddTutorialGachaGoodsId(builder, TutorialGachaGoodsId_val)
    ConstCommonExcel.AddEquipmentSlotOpenLevel(builder, EquipmentSlotOpenLevel_vec)
    ConstCommonExcel.AddScenarioAutoDelayMillisec(builder, ScenarioAutoDelayMillisec_val)
    ConstCommonExcel.AddJoinOrCreateClanCoolTimeFromHour(builder, JoinOrCreateClanCoolTimeFromHour_val)
    ConstCommonExcel.AddClanMaxMember(builder, ClanMaxMember_val)
    ConstCommonExcel.AddClanSearchResultCount(builder, ClanSearchResultCount_val)
    ConstCommonExcel.AddClanMaxApplicant(builder, ClanMaxApplicant_val)
    ConstCommonExcel.AddClanRejoinCoolTimeFromSecond(builder, ClanRejoinCoolTimeFromSecond_val)
    ConstCommonExcel.AddClanWordBalloonMaxCharacter(builder, ClanWordBalloonMaxCharacter_val)
    ConstCommonExcel.AddCallNameRenameCoolTimeFromHour(builder, CallNameRenameCoolTimeFromHour_val)
    ConstCommonExcel.AddCallNameMinimumLength(builder, CallNameMinimumLength_val)
    ConstCommonExcel.AddCallNameMaximumLength(builder, CallNameMaximumLength_val)
    ConstCommonExcel.AddLobbyToScreenModeWaitTime(builder, LobbyToScreenModeWaitTime_val)
    ConstCommonExcel.AddScreenshotToLobbyButtonHideDelay(builder, ScreenshotToLobbyButtonHideDelay_val)
    ConstCommonExcel.AddPrologueScenarioID01(builder, PrologueScenarioID01_val)
    ConstCommonExcel.AddPrologueScenarioID02(builder, PrologueScenarioID02_val)
    ConstCommonExcel.AddTutorialHardStage11(builder, TutorialHardStage11_val)
    ConstCommonExcel.AddTutorialSpeedButtonStage(builder, TutorialSpeedButtonStage_val)
    ConstCommonExcel.AddTutorialCharacterDefaultCount(builder, TutorialCharacterDefaultCount_val)
    ConstCommonExcel.AddTutorialShopCategoryType(builder, TutorialShopCategoryType_val)
    ConstCommonExcel.AddAdventureStrategyPlayTimeLimitInSeconds(builder, AdventureStrategyPlayTimeLimitInSeconds_val)
    ConstCommonExcel.AddWeekDungoenTacticPlayTimeLimitInSeconds(builder, WeekDungoenTacticPlayTimeLimitInSeconds_val)
    ConstCommonExcel.AddRaidTacticPlayTimeLimitInSeconds(builder, RaidTacticPlayTimeLimitInSeconds_val)
    ConstCommonExcel.AddRaidOpponentListAmount(builder, RaidOpponentListAmount_val)
    ConstCommonExcel.AddCraftBaseGoldRequired(builder, CraftBaseGoldRequired_vec)
    ConstCommonExcel.AddPostExpiredDayAttendance(builder, PostExpiredDayAttendance_val)
    ConstCommonExcel.AddPostExpiredDayInventoryOverflow(builder, PostExpiredDayInventoryOverflow_val)
    ConstCommonExcel.AddPostExpiredDayGameManager(builder, PostExpiredDayGameManager_val)
    ConstCommonExcel.AddUILabelCharacterWrap(builder, UILabelCharacterWrap_off)
    ConstCommonExcel.AddRequestTimeOut(builder, RequestTimeOut_val)
    ConstCommonExcel.AddMailStorageSoftCap(builder, MailStorageSoftCap_val)
    ConstCommonExcel.AddMailStorageHardCap(builder, MailStorageHardCap_val)
    ConstCommonExcel.AddClearDeckStorageSize(builder, ClearDeckStorageSize_val)
    ConstCommonExcel.AddClearDeckNoStarViewCount(builder, ClearDeckNoStarViewCount_val)
    ConstCommonExcel.AddClearDeck1StarViewCount(builder, ClearDeck1StarViewCount_val)
    ConstCommonExcel.AddClearDeck2StarViewCount(builder, ClearDeck2StarViewCount_val)
    ConstCommonExcel.AddClearDeck3StarViewCount(builder, ClearDeck3StarViewCount_val)
    ConstCommonExcel.AddExSkillLevelMax(builder, ExSkillLevelMax_val)
    ConstCommonExcel.AddPublicSkillLevelMax(builder, PublicSkillLevelMax_val)
    ConstCommonExcel.AddPassiveSkillLevelMax(builder, PassiveSkillLevelMax_val)
    ConstCommonExcel.AddExtraPassiveSkillLevelMax(builder, ExtraPassiveSkillLevelMax_val)
    ConstCommonExcel.AddAccountCommentMaxLength(builder, AccountCommentMaxLength_val)
    ConstCommonExcel.AddCafeSummonCoolTimeFromHour(builder, CafeSummonCoolTimeFromHour_val)
    ConstCommonExcel.AddLimitedStageDailyClearCount(builder, LimitedStageDailyClearCount_val)
    ConstCommonExcel.AddLimitedStageEntryTimeLimit(builder, LimitedStageEntryTimeLimit_val)
    ConstCommonExcel.AddLimitedStageEntryTimeBuffer(builder, LimitedStageEntryTimeBuffer_val)
    ConstCommonExcel.AddLimitedStagePointAmount(builder, LimitedStagePointAmount_val)
    ConstCommonExcel.AddLimitedStagePointPerApMin(builder, LimitedStagePointPerApMin_val)
    ConstCommonExcel.AddLimitedStagePointPerApMax(builder, LimitedStagePointPerApMax_val)
    ConstCommonExcel.AddAccountLinkReward(builder, AccountLinkReward_val)
    ConstCommonExcel.AddMonthlyProductCheckDays(builder, MonthlyProductCheckDays_val)
    ConstCommonExcel.AddWeaponLvUpCoefficient(builder, WeaponLvUpCoefficient_val)
    ConstCommonExcel.AddShowRaidMyListCount(builder, ShowRaidMyListCount_val)
    ConstCommonExcel.AddRaidEnterCostType(builder, RaidEnterCostType_val)
    ConstCommonExcel.AddRaidEnterCostId(builder, RaidEnterCostId_val)
    ConstCommonExcel.AddRaidTicketCost(builder, RaidTicketCost_val)
    ConstCommonExcel.AddTimeAttackDungeonScenarioId(builder, TimeAttackDungeonScenarioId_off)
    ConstCommonExcel.AddTimeAttackDungoenPlayCountPerTicket(builder, TimeAttackDungoenPlayCountPerTicket_val)
    ConstCommonExcel.AddTimeAttackDungeonEnterCostType(builder, TimeAttackDungeonEnterCostType_val)
    ConstCommonExcel.AddTimeAttackDungeonEnterCostId(builder, TimeAttackDungeonEnterCostId_val)
    ConstCommonExcel.AddTimeAttackDungeonEnterCost(builder, TimeAttackDungeonEnterCost_val)
    ConstCommonExcel.AddClanLeaderTransferLastLoginLimit(builder, ClanLeaderTransferLastLoginLimit_val)
    ConstCommonExcel.AddMonthlyProductRepurchasePopupLimit(builder, MonthlyProductRepurchasePopupLimit_val)
    ConstCommonExcel.AddCommonFavorItemTags(builder, CommonFavorItemTags_vec)
    ConstCommonExcel.AddMaxApMasterCoinPerWeek(builder, MaxApMasterCoinPerWeek_val)
    ConstCommonExcel.AddCraftOpenExpTier1(builder, CraftOpenExpTier1_val)
    ConstCommonExcel.AddCraftOpenExpTier2(builder, CraftOpenExpTier2_val)
    ConstCommonExcel.AddCraftOpenExpTier3(builder, CraftOpenExpTier3_val)
    ConstCommonExcel.AddCharacterEquipmentGearSlot(builder, CharacterEquipmentGearSlot_val)
    ConstCommonExcel.AddBirthDayDDay(builder, BirthDayDDay_val)
    ConstCommonExcel.AddRecommendedFriendsLvDifferenceLimit(builder, RecommendedFriendsLvDifferenceLimit_val)
    ConstCommonExcel.AddDDosDetectCount(builder, DDosDetectCount_val)
    ConstCommonExcel.AddDDosCheckIntervalInSeconds(builder, DDosCheckIntervalInSeconds_val)
    ConstCommonExcel.AddMaxFriendsCount(builder, MaxFriendsCount_val)
    ConstCommonExcel.AddMaxFriendsRequest(builder, MaxFriendsRequest_val)
    ConstCommonExcel.AddFriendsSearchRequestCount(builder, FriendsSearchRequestCount_val)
    ConstCommonExcel.AddFriendsMaxApplicant(builder, FriendsMaxApplicant_val)
    ConstCommonExcel.AddIdCardDefaultCharacterId(builder, IdCardDefaultCharacterId_val)
    ConstCommonExcel.AddIdCardDefaultBgId(builder, IdCardDefaultBgId_val)
    ConstCommonExcel.AddWorldRaidGemEnterCost(builder, WorldRaidGemEnterCost_val)
    ConstCommonExcel.AddWorldRaidGemEnterAmout(builder, WorldRaidGemEnterAmout_val)
    ConstCommonExcel.AddFriendIdCardCommentMaxLength(builder, FriendIdCardCommentMaxLength_val)
    ConstCommonExcel.AddFormationPresetNumberOfEchelonTab(builder, FormationPresetNumberOfEchelonTab_val)
    ConstCommonExcel.AddFormationPresetNumberOfEchelon(builder, FormationPresetNumberOfEchelon_val)
    ConstCommonExcel.AddFormationPresetRecentNumberOfEchelon(builder, FormationPresetRecentNumberOfEchelon_val)
    ConstCommonExcel.AddFormationPresetEchelonTabTextLength(builder, FormationPresetEchelonTabTextLength_val)
    ConstCommonExcel.AddFormationPresetEchelonSlotTextLength(builder, FormationPresetEchelonSlotTextLength_val)
    ConstCommonExcel.AddCharProfileRowIntervalKr(builder, CharProfileRowIntervalKr_val)
    ConstCommonExcel.AddCharProfileRowIntervalJp(builder, CharProfileRowIntervalJp_val)
    ConstCommonExcel.AddCharProfilePopupRowIntervalKr(builder, CharProfilePopupRowIntervalKr_val)
    ConstCommonExcel.AddCharProfilePopupRowIntervalJp(builder, CharProfilePopupRowIntervalJp_val)
    ConstCommonExcel.AddBeforehandGachaCount(builder, BeforehandGachaCount_val)
    ConstCommonExcel.AddBeforehandGachaGroupId(builder, BeforehandGachaGroupId_val)
    ConstCommonExcel.AddRenewalDisplayOrderDay(builder, RenewalDisplayOrderDay_val)
    ConstCommonExcel.AddEmblemDefaultId(builder, EmblemDefaultId_val)
    ConstCommonExcel.AddBirthdayMailStartDate(builder, BirthdayMailStartDate_off)
    ConstCommonExcel.AddBirthdayMailRemainDate(builder, BirthdayMailRemainDate_val)
    ConstCommonExcel.AddBirthdayMailParcelType(builder, BirthdayMailParcelType_val)
    ConstCommonExcel.AddBirthdayMailParcelId(builder, BirthdayMailParcelId_val)
    ConstCommonExcel.AddBirthdayMailParcelAmount(builder, BirthdayMailParcelAmount_val)
    ConstCommonExcel.AddClearDeckAverageDeckCount(builder, ClearDeckAverageDeckCount_val)
    ConstCommonExcel.AddClearDeckWorldRaidSaveConditionCoefficient(builder, ClearDeckWorldRaidSaveConditionCoefficient_val)
    ConstCommonExcel.AddClearDeckShowCount(builder, ClearDeckShowCount_val)
    ConstCommonExcel.AddCharacterMaxLevel(builder, CharacterMaxLevel_val)
    ConstCommonExcel.AddPotentialBonusStatMaxLevelMaxHP(builder, PotentialBonusStatMaxLevelMaxHP_val)
    ConstCommonExcel.AddPotentialBonusStatMaxLevelAttackPower(builder, PotentialBonusStatMaxLevelAttackPower_val)
    ConstCommonExcel.AddPotentialBonusStatMaxLevelHealPower(builder, PotentialBonusStatMaxLevelHealPower_val)
    ConstCommonExcel.AddPotentialOpenConditionCharacterLevel(builder, PotentialOpenConditionCharacterLevel_val)
    ConstCommonExcel.AddAssistStrangerMinLevel(builder, AssistStrangerMinLevel_val)
    ConstCommonExcel.AddAssistStrangerMaxLevel(builder, AssistStrangerMaxLevel_val)
    ConstCommonExcel.AddMaxBlockedUserCount(builder, MaxBlockedUserCount_val)
    ConstCommonExcel.AddCafeRandomVisitMinComfortBonus(builder, CafeRandomVisitMinComfortBonus_val)
    ConstCommonExcel.AddCafeRandomVisitMinLastLogin(builder, CafeRandomVisitMinLastLogin_val)
    ConstCommonExcel.AddCafeTravelSyncIntervalByMillisec(builder, CafeTravelSyncIntervalByMillisec_val)
    ConstCommonExcel.AddRankBracketPercentage1(builder, RankBracketPercentage1_val)
    ConstCommonExcel.AddRankBracketPercentage2(builder, RankBracketPercentage2_val)
    ConstCommonExcel.AddRankBracketPercentage3(builder, RankBracketPercentage3_val)
    ConstCommonExcel.AddRankBracketPercentage4(builder, RankBracketPercentage4_val)
    ConstCommonExcel.AddRankBracketPercentage5(builder, RankBracketPercentage5_val)
    ConstCommonExcel.AddRankBracketPercentage6(builder, RankBracketPercentage6_val)
    ConstCommonExcel.AddRankBracketPercentage7(builder, RankBracketPercentage7_val)
    ConstCommonExcel.AddExpiryBattlePassItemReceiveDay(builder, ExpiryBattlePassItemReceiveDay_val)
    ConstCommonExcel.AddBattlePassFlavorTextIdleDurationMilliSec(builder, BattlePassFlavorTextIdleDurationMilliSec_val)
    ConstCommonExcel.AddBattlePassEndImminentDay(builder, BattlePassEndImminentDay_val)
    ConstCommonExcel.AddBattlePassExpIconPath(builder, BattlePassExpIconPath_off)
    ConstCommonExcel.AddCafeCameraDragThreshold(builder, CafeCameraDragThreshold_val)
    ConstCommonExcel.AddCafeSummonTicketBuyLimitForValidate(builder, CafeSummonTicketBuyLimitForValidate_val)
    return ConstCommonExcel.End(builder)

def pack_ConstConquestExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstConquest") if encrypt else None
    ManageUnitChange_val = convert_int(data.get('ManageUnitChange', 0), password)
    AssistCount_val = convert_int(data.get('AssistCount', 0), password)
    PlayTimeLimitInSeconds_val = convert_int(data.get('PlayTimeLimitInSeconds', 0), password)
    AnimationUnitAmountMin_val = convert_int(data.get('AnimationUnitAmountMin', 0), password)
    AnimationUnitAmountMax_val = convert_int(data.get('AnimationUnitAmountMax', 0), password)
    AnimationUnitDelay_val = encrypt_float(data.get('AnimationUnitDelay', 0), password)
    ConstConquestExcel.Start(builder)
    ConstConquestExcel.AddManageUnitChange(builder, ManageUnitChange_val)
    ConstConquestExcel.AddAssistCount(builder, AssistCount_val)
    ConstConquestExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds_val)
    ConstConquestExcel.AddAnimationUnitAmountMin(builder, AnimationUnitAmountMin_val)
    ConstConquestExcel.AddAnimationUnitAmountMax(builder, AnimationUnitAmountMax_val)
    ConstConquestExcel.AddAnimationUnitDelay(builder, AnimationUnitDelay_val)
    return ConstConquestExcel.End(builder)

def pack_ConstEventCommonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstEventCommon") if encrypt else None
    MeetupScenarioReplayResource_off = builder.CreateString(encrypt_string(data.get('MeetupScenarioReplayResource', ''), password))
    MeetupScenarioReplayTitleLocalize_off = builder.CreateString(encrypt_string(data.get('MeetupScenarioReplayTitleLocalize', ''), password))
    EventContentHardStageCount_val = convert_int(data.get('EventContentHardStageCount', 0), password)
    EventStrategyPlayTimeLimitInSeconds_val = convert_long(data.get('EventStrategyPlayTimeLimitInSeconds', 0), password)
    SubEventChangeLimitSeconds_val = convert_long(data.get('SubEventChangeLimitSeconds', 0), password)
    SubEventInstantClear_val = data.get('SubEventInstantClear', 0)
    CardShopProbWeightCount_val = convert_long(data.get('CardShopProbWeightCount', 0), password)
    CardShopProbWeightRarity_val = convert_int(getattr(Rarity, data.get('CardShopProbWeightRarity', 0)), password)
    SpecialOperactionCollectionGroupId_val = convert_long(data.get('SpecialOperactionCollectionGroupId', 0), password)
    TreasureNormalVariationAmount_val = convert_int(data.get('TreasureNormalVariationAmount', 0), password)
    TreasureLoopVariationAmount_val = convert_int(data.get('TreasureLoopVariationAmount', 0), password)
    TreasureLimitVariationLoopCount_val = convert_int(data.get('TreasureLimitVariationLoopCount', 0), password)
    TreasureLimitVariationClearLoopCount_val = convert_int(data.get('TreasureLimitVariationClearLoopCount', 0), password)
    EventStoryReplayHideEventContentId_val = convert_int(data.get('EventStoryReplayHideEventContentId', 0), password)
    ConstEventCommonExcel.Start(builder)
    ConstEventCommonExcel.AddEventContentHardStageCount(builder, EventContentHardStageCount_val)
    ConstEventCommonExcel.AddEventStrategyPlayTimeLimitInSeconds(builder, EventStrategyPlayTimeLimitInSeconds_val)
    ConstEventCommonExcel.AddSubEventChangeLimitSeconds(builder, SubEventChangeLimitSeconds_val)
    ConstEventCommonExcel.AddSubEventInstantClear(builder, SubEventInstantClear_val)
    ConstEventCommonExcel.AddCardShopProbWeightCount(builder, CardShopProbWeightCount_val)
    ConstEventCommonExcel.AddCardShopProbWeightRarity(builder, CardShopProbWeightRarity_val)
    ConstEventCommonExcel.AddMeetupScenarioReplayResource(builder, MeetupScenarioReplayResource_off)
    ConstEventCommonExcel.AddMeetupScenarioReplayTitleLocalize(builder, MeetupScenarioReplayTitleLocalize_off)
    ConstEventCommonExcel.AddSpecialOperactionCollectionGroupId(builder, SpecialOperactionCollectionGroupId_val)
    ConstEventCommonExcel.AddTreasureNormalVariationAmount(builder, TreasureNormalVariationAmount_val)
    ConstEventCommonExcel.AddTreasureLoopVariationAmount(builder, TreasureLoopVariationAmount_val)
    ConstEventCommonExcel.AddTreasureLimitVariationLoopCount(builder, TreasureLimitVariationLoopCount_val)
    ConstEventCommonExcel.AddTreasureLimitVariationClearLoopCount(builder, TreasureLimitVariationClearLoopCount_val)
    ConstEventCommonExcel.AddEventStoryReplayHideEventContentId(builder, EventStoryReplayHideEventContentId_val)
    return ConstEventCommonExcel.End(builder)

def pack_ConstFieldExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstField") if encrypt else None
    DialogSmoothTime_val = convert_int(data.get('DialogSmoothTime', 0), password)
    TalkDialogDurationDefault_val = convert_int(data.get('TalkDialogDurationDefault', 0), password)
    ThinkDialogDurationDefault_val = convert_int(data.get('ThinkDialogDurationDefault', 0), password)
    IdleThinkDelayMin_val = convert_int(data.get('IdleThinkDelayMin', 0), password)
    IdleThinkDelayMax_val = convert_int(data.get('IdleThinkDelayMax', 0), password)
    ConstFieldExcel.Start(builder)
    ConstFieldExcel.AddDialogSmoothTime(builder, DialogSmoothTime_val)
    ConstFieldExcel.AddTalkDialogDurationDefault(builder, TalkDialogDurationDefault_val)
    ConstFieldExcel.AddThinkDialogDurationDefault(builder, ThinkDialogDurationDefault_val)
    ConstFieldExcel.AddIdleThinkDelayMin(builder, IdleThinkDelayMin_val)
    ConstFieldExcel.AddIdleThinkDelayMax(builder, IdleThinkDelayMax_val)
    return ConstFieldExcel.End(builder)

def pack_ConstMinigameCCGExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstMinigameCCG") if encrypt else None
    AniAllyBattleAttack_off = builder.CreateString(encrypt_string(data.get('AniAllyBattleAttack', ''), password))
    AlternativeCardImagePath_off = builder.CreateString(encrypt_string(data.get('AlternativeCardImagePath', ''), password))
    TurnDrawCount_val = convert_int(data.get('TurnDrawCount', 0), password)
    ConquestMapBoundaryOffsetRight_val = encrypt_float(data.get('ConquestMapBoundaryOffsetRight', 0), password)
    ConquestMapBoundaryOffsetTop_val = encrypt_float(data.get('ConquestMapBoundaryOffsetTop', 0), password)
    ConquestMapBoundaryOffsetBottom_val = encrypt_float(data.get('ConquestMapBoundaryOffsetBottom', 0), password)
    ConquestMapCenterOffsetX_val = encrypt_float(data.get('ConquestMapCenterOffsetX', 0), password)
    ConquestMapCenterOffsetY_val = encrypt_float(data.get('ConquestMapCenterOffsetY', 0), password)
    CameraAngle_val = encrypt_float(data.get('CameraAngle', 0), password)
    CameraZoomMax_val = encrypt_float(data.get('CameraZoomMax', 0), password)
    CameraZoomMin_val = encrypt_float(data.get('CameraZoomMin', 0), password)
    CameraZoomDefault_val = encrypt_float(data.get('CameraZoomDefault', 0), password)
    ThemaLoadingProgressTime_val = encrypt_float(data.get('ThemaLoadingProgressTime', 0), password)
    MapAllyRotation_val = encrypt_float(data.get('MapAllyRotation', 0), password)
    MaxHandCount_val = convert_int(data.get('MaxHandCount', 0), password)
    MaxCost_val = convert_int(data.get('MaxCost', 0), password)
    StartCost_val = convert_int(data.get('StartCost', 0), password)
    TurnCost_val = convert_int(data.get('TurnCost', 0), password)
    StrikerSwapFrontCost_val = convert_int(data.get('StrikerSwapFrontCost', 0), password)
    StrikerMaxEquipCount_val = convert_int(data.get('StrikerMaxEquipCount', 0), password)
    StartDrawCount_val = convert_int(data.get('StartDrawCount', 0), password)
    CampReviveHealthRate_val = convert_int(data.get('CampReviveHealthRate', 0), password)
    BaseRewardRerollPoint_val = convert_int(data.get('BaseRewardRerollPoint', 0), password)
    SelectRewardOptionCount_val = convert_int(data.get('SelectRewardOptionCount', 0), password)
    ConstMinigameCCGExcel.Start(builder)
    ConstMinigameCCGExcel.AddTurnDrawCount(builder, TurnDrawCount_val)
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetRight(builder, ConquestMapBoundaryOffsetRight_val)
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetTop(builder, ConquestMapBoundaryOffsetTop_val)
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetBottom(builder, ConquestMapBoundaryOffsetBottom_val)
    ConstMinigameCCGExcel.AddConquestMapCenterOffsetX(builder, ConquestMapCenterOffsetX_val)
    ConstMinigameCCGExcel.AddConquestMapCenterOffsetY(builder, ConquestMapCenterOffsetY_val)
    ConstMinigameCCGExcel.AddCameraAngle(builder, CameraAngle_val)
    ConstMinigameCCGExcel.AddCameraZoomMax(builder, CameraZoomMax_val)
    ConstMinigameCCGExcel.AddCameraZoomMin(builder, CameraZoomMin_val)
    ConstMinigameCCGExcel.AddCameraZoomDefault(builder, CameraZoomDefault_val)
    ConstMinigameCCGExcel.AddThemaLoadingProgressTime(builder, ThemaLoadingProgressTime_val)
    ConstMinigameCCGExcel.AddMapAllyRotation(builder, MapAllyRotation_val)
    ConstMinigameCCGExcel.AddAniAllyBattleAttack(builder, AniAllyBattleAttack_off)
    ConstMinigameCCGExcel.AddMaxHandCount(builder, MaxHandCount_val)
    ConstMinigameCCGExcel.AddMaxCost(builder, MaxCost_val)
    ConstMinigameCCGExcel.AddStartCost(builder, StartCost_val)
    ConstMinigameCCGExcel.AddTurnCost(builder, TurnCost_val)
    ConstMinigameCCGExcel.AddStrikerSwapFrontCost(builder, StrikerSwapFrontCost_val)
    ConstMinigameCCGExcel.AddStrikerMaxEquipCount(builder, StrikerMaxEquipCount_val)
    ConstMinigameCCGExcel.AddStartDrawCount(builder, StartDrawCount_val)
    ConstMinigameCCGExcel.AddCampReviveHealthRate(builder, CampReviveHealthRate_val)
    ConstMinigameCCGExcel.AddBaseRewardRerollPoint(builder, BaseRewardRerollPoint_val)
    ConstMinigameCCGExcel.AddSelectRewardOptionCount(builder, SelectRewardOptionCount_val)
    ConstMinigameCCGExcel.AddAlternativeCardImagePath(builder, AlternativeCardImagePath_off)
    return ConstMinigameCCGExcel.End(builder)

def pack_ConstMinigameRoadPuzzleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstMinigameRoadPuzzle") if encrypt else None
    RoadPuzzleMapBoundaryOffsetLeft_val = encrypt_float(data.get('RoadPuzzleMapBoundaryOffsetLeft', 0), password)
    RoadPuzzleMapBoundaryOffsetRight_val = encrypt_float(data.get('RoadPuzzleMapBoundaryOffsetRight', 0), password)
    RoadPuzzleMapBoundaryOffsetTop_val = encrypt_float(data.get('RoadPuzzleMapBoundaryOffsetTop', 0), password)
    RoadPuzzleMapBoundaryOffsetBottom_val = encrypt_float(data.get('RoadPuzzleMapBoundaryOffsetBottom', 0), password)
    RoadPuzzleMapCenterOffsetX_val = encrypt_float(data.get('RoadPuzzleMapCenterOffsetX', 0), password)
    RoadPuzzleMapCenterOffsetY_val = encrypt_float(data.get('RoadPuzzleMapCenterOffsetY', 0), password)
    CameraAngle_val = encrypt_float(data.get('CameraAngle', 0), password)
    CameraZoomMax_val = encrypt_float(data.get('CameraZoomMax', 0), password)
    CameraZoomMin_val = encrypt_float(data.get('CameraZoomMin', 0), password)
    CameraZoomDefault_val = encrypt_float(data.get('CameraZoomDefault', 0), password)
    StageLoadingProgressTime_val = encrypt_float(data.get('StageLoadingProgressTime', 0), password)
    TileRotationDegree_val = convert_int(data.get('TileRotationDegree', 0), password)
    StartStageIndex_val = convert_int(data.get('StartStageIndex', 0), password)
    LoopStageIndex_val = convert_int(data.get('LoopStageIndex', 0), password)
    ConstMinigameRoadPuzzleExcel.Start(builder)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetLeft(builder, RoadPuzzleMapBoundaryOffsetLeft_val)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetRight(builder, RoadPuzzleMapBoundaryOffsetRight_val)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetTop(builder, RoadPuzzleMapBoundaryOffsetTop_val)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetBottom(builder, RoadPuzzleMapBoundaryOffsetBottom_val)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapCenterOffsetX(builder, RoadPuzzleMapCenterOffsetX_val)
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapCenterOffsetY(builder, RoadPuzzleMapCenterOffsetY_val)
    ConstMinigameRoadPuzzleExcel.AddCameraAngle(builder, CameraAngle_val)
    ConstMinigameRoadPuzzleExcel.AddCameraZoomMax(builder, CameraZoomMax_val)
    ConstMinigameRoadPuzzleExcel.AddCameraZoomMin(builder, CameraZoomMin_val)
    ConstMinigameRoadPuzzleExcel.AddCameraZoomDefault(builder, CameraZoomDefault_val)
    ConstMinigameRoadPuzzleExcel.AddStageLoadingProgressTime(builder, StageLoadingProgressTime_val)
    ConstMinigameRoadPuzzleExcel.AddTileRotationDegree(builder, TileRotationDegree_val)
    ConstMinigameRoadPuzzleExcel.AddStartStageIndex(builder, StartStageIndex_val)
    ConstMinigameRoadPuzzleExcel.AddLoopStageIndex(builder, LoopStageIndex_val)
    return ConstMinigameRoadPuzzleExcel.End(builder)

def pack_ConstMiniGameShootingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstMiniGameShooting") if encrypt else None
    SpawnEffectPath_off = builder.CreateString(encrypt_string(data.get('SpawnEffectPath', ''), password))
    PlayerCharacterId_vec = 0
    if 'PlayerCharacterId' in data:
        PlayerCharacterId_items = data['PlayerCharacterId']
        ConstMiniGameShootingExcel.StartPlayerCharacterIdVector(builder, len(PlayerCharacterId_items))
        for item in reversed(PlayerCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        PlayerCharacterId_vec = builder.EndVector(len(PlayerCharacterId_items))
    NormalStageId_val = convert_long(data.get('NormalStageId', 0), password)
    NormalSectionCount_val = convert_int(data.get('NormalSectionCount', 0), password)
    HardStageId_val = convert_long(data.get('HardStageId', 0), password)
    HardSectionCount_val = convert_int(data.get('HardSectionCount', 0), password)
    FreeStageId_val = convert_long(data.get('FreeStageId', 0), password)
    FreeSectionCount_val = convert_int(data.get('FreeSectionCount', 0), password)
    HiddenPlayerCharacterId_val = convert_long(data.get('HiddenPlayerCharacterId', 0), password)
    CameraSmoothTime_val = encrypt_float(data.get('CameraSmoothTime', 0), password)
    WaitTimeAfterSpawn_val = encrypt_float(data.get('WaitTimeAfterSpawn', 0), password)
    FreeGearInterval_val = convert_int(data.get('FreeGearInterval', 0), password)
    ConstMiniGameShootingExcel.Start(builder)
    ConstMiniGameShootingExcel.AddNormalStageId(builder, NormalStageId_val)
    ConstMiniGameShootingExcel.AddNormalSectionCount(builder, NormalSectionCount_val)
    ConstMiniGameShootingExcel.AddHardStageId(builder, HardStageId_val)
    ConstMiniGameShootingExcel.AddHardSectionCount(builder, HardSectionCount_val)
    ConstMiniGameShootingExcel.AddFreeStageId(builder, FreeStageId_val)
    ConstMiniGameShootingExcel.AddFreeSectionCount(builder, FreeSectionCount_val)
    ConstMiniGameShootingExcel.AddPlayerCharacterId(builder, PlayerCharacterId_vec)
    ConstMiniGameShootingExcel.AddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId_val)
    ConstMiniGameShootingExcel.AddCameraSmoothTime(builder, CameraSmoothTime_val)
    ConstMiniGameShootingExcel.AddSpawnEffectPath(builder, SpawnEffectPath_off)
    ConstMiniGameShootingExcel.AddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn_val)
    ConstMiniGameShootingExcel.AddFreeGearInterval(builder, FreeGearInterval_val)
    return ConstMiniGameShootingExcel.End(builder)

def pack_ConstMinigameTBGExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstMinigameTBG") if encrypt else None
    AniAllyBattleAttack_off = builder.CreateString(encrypt_string(data.get('AniAllyBattleAttack', ''), password))
    EffectAllyBattleAttack_off = builder.CreateString(encrypt_string(data.get('EffectAllyBattleAttack', ''), password))
    EffectAllyBattleDamage_off = builder.CreateString(encrypt_string(data.get('EffectAllyBattleDamage', ''), password))
    AniEnemyBattleAttack_off = builder.CreateString(encrypt_string(data.get('AniEnemyBattleAttack', ''), password))
    EffectEnemyBattleAttack_off = builder.CreateString(encrypt_string(data.get('EffectEnemyBattleAttack', ''), password))
    EffectEnemyBattleDamage_off = builder.CreateString(encrypt_string(data.get('EffectEnemyBattleDamage', ''), password))
    ConquestMapBoundaryOffsetLeft_val = encrypt_float(data.get('ConquestMapBoundaryOffsetLeft', 0), password)
    ConquestMapBoundaryOffsetRight_val = encrypt_float(data.get('ConquestMapBoundaryOffsetRight', 0), password)
    ConquestMapBoundaryOffsetTop_val = encrypt_float(data.get('ConquestMapBoundaryOffsetTop', 0), password)
    ConquestMapBoundaryOffsetBottom_val = encrypt_float(data.get('ConquestMapBoundaryOffsetBottom', 0), password)
    ConquestMapCenterOffsetX_val = encrypt_float(data.get('ConquestMapCenterOffsetX', 0), password)
    ConquestMapCenterOffsetY_val = encrypt_float(data.get('ConquestMapCenterOffsetY', 0), password)
    CameraAngle_val = encrypt_float(data.get('CameraAngle', 0), password)
    CameraZoomMax_val = encrypt_float(data.get('CameraZoomMax', 0), password)
    CameraZoomMin_val = encrypt_float(data.get('CameraZoomMin', 0), password)
    CameraZoomDefault_val = encrypt_float(data.get('CameraZoomDefault', 0), password)
    ThemaLoadingProgressTime_val = encrypt_float(data.get('ThemaLoadingProgressTime', 0), password)
    MapAllyRotation_val = encrypt_float(data.get('MapAllyRotation', 0), password)
    EncounterAllyRotation_val = encrypt_float(data.get('EncounterAllyRotation', 0), password)
    EncounterEnemyRotation_val = encrypt_float(data.get('EncounterEnemyRotation', 0), password)
    EncounterRewardReceiveIndex_val = convert_int(data.get('EncounterRewardReceiveIndex', 0), password)
    ConstMinigameTBGExcel.Start(builder)
    ConstMinigameTBGExcel.AddConquestMapBoundaryOffsetLeft(builder, ConquestMapBoundaryOffsetLeft_val)
    ConstMinigameTBGExcel.AddConquestMapBoundaryOffsetRight(builder, ConquestMapBoundaryOffsetRight_val)
    ConstMinigameTBGExcel.AddConquestMapBoundaryOffsetTop(builder, ConquestMapBoundaryOffsetTop_val)
    ConstMinigameTBGExcel.AddConquestMapBoundaryOffsetBottom(builder, ConquestMapBoundaryOffsetBottom_val)
    ConstMinigameTBGExcel.AddConquestMapCenterOffsetX(builder, ConquestMapCenterOffsetX_val)
    ConstMinigameTBGExcel.AddConquestMapCenterOffsetY(builder, ConquestMapCenterOffsetY_val)
    ConstMinigameTBGExcel.AddCameraAngle(builder, CameraAngle_val)
    ConstMinigameTBGExcel.AddCameraZoomMax(builder, CameraZoomMax_val)
    ConstMinigameTBGExcel.AddCameraZoomMin(builder, CameraZoomMin_val)
    ConstMinigameTBGExcel.AddCameraZoomDefault(builder, CameraZoomDefault_val)
    ConstMinigameTBGExcel.AddThemaLoadingProgressTime(builder, ThemaLoadingProgressTime_val)
    ConstMinigameTBGExcel.AddMapAllyRotation(builder, MapAllyRotation_val)
    ConstMinigameTBGExcel.AddAniAllyBattleAttack(builder, AniAllyBattleAttack_off)
    ConstMinigameTBGExcel.AddEffectAllyBattleAttack(builder, EffectAllyBattleAttack_off)
    ConstMinigameTBGExcel.AddEffectAllyBattleDamage(builder, EffectAllyBattleDamage_off)
    ConstMinigameTBGExcel.AddAniEnemyBattleAttack(builder, AniEnemyBattleAttack_off)
    ConstMinigameTBGExcel.AddEffectEnemyBattleAttack(builder, EffectEnemyBattleAttack_off)
    ConstMinigameTBGExcel.AddEffectEnemyBattleDamage(builder, EffectEnemyBattleDamage_off)
    ConstMinigameTBGExcel.AddEncounterAllyRotation(builder, EncounterAllyRotation_val)
    ConstMinigameTBGExcel.AddEncounterEnemyRotation(builder, EncounterEnemyRotation_val)
    ConstMinigameTBGExcel.AddEncounterRewardReceiveIndex(builder, EncounterRewardReceiveIndex_val)
    return ConstMinigameTBGExcel.End(builder)

def pack_ConstNewbieContentExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstNewbieContent") if encrypt else None
    NewbieGachaReleaseDate_off = builder.CreateString(encrypt_string(data.get('NewbieGachaReleaseDate', ''), password))
    NewbieAttendanceReleaseDate_off = builder.CreateString(encrypt_string(data.get('NewbieAttendanceReleaseDate', ''), password))
    NewbieGachaCheckDays_val = convert_int(data.get('NewbieGachaCheckDays', 0), password)
    NewbieGachaTokenGraceTime_val = convert_int(data.get('NewbieGachaTokenGraceTime', 0), password)
    NewbieAttendanceStartableEndDay_val = convert_int(data.get('NewbieAttendanceStartableEndDay', 0), password)
    NewbieAttendanceEndDay_val = convert_int(data.get('NewbieAttendanceEndDay', 0), password)
    ConstNewbieContentExcel.Start(builder)
    ConstNewbieContentExcel.AddNewbieGachaReleaseDate(builder, NewbieGachaReleaseDate_off)
    ConstNewbieContentExcel.AddNewbieGachaCheckDays(builder, NewbieGachaCheckDays_val)
    ConstNewbieContentExcel.AddNewbieGachaTokenGraceTime(builder, NewbieGachaTokenGraceTime_val)
    ConstNewbieContentExcel.AddNewbieAttendanceReleaseDate(builder, NewbieAttendanceReleaseDate_off)
    ConstNewbieContentExcel.AddNewbieAttendanceStartableEndDay(builder, NewbieAttendanceStartableEndDay_val)
    ConstNewbieContentExcel.AddNewbieAttendanceEndDay(builder, NewbieAttendanceEndDay_val)
    return ConstNewbieContentExcel.End(builder)

def pack_ConstStrategyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConstStrategy") if encrypt else None
    HealCostAmount_vec = 0
    if 'HealCostAmount' in data:
        HealCostAmount_items = data['HealCostAmount']
        ConstStrategyExcel.StartHealCostAmountVector(builder, len(HealCostAmount_items))
        for item in reversed(HealCostAmount_items):
            builder.PrependInt64(convert_long(item, password))
        HealCostAmount_vec = builder.EndVector(len(HealCostAmount_items))
    HexaMapBoundaryOffset_val = encrypt_float(data.get('HexaMapBoundaryOffset', 0), password)
    HexaMapStartCameraOffset_val = encrypt_float(data.get('HexaMapStartCameraOffset', 0), password)
    CameraZoomMax_val = encrypt_float(data.get('CameraZoomMax', 0), password)
    CameraZoomMin_val = encrypt_float(data.get('CameraZoomMin', 0), password)
    CameraZoomDefault_val = encrypt_float(data.get('CameraZoomDefault', 0), password)
    HealCostType_val = convert_int(getattr(CurrencyTypes, data.get('HealCostType', 0)), password)
    CanHealHpRate_val = convert_int(data.get('CanHealHpRate', 0), password)
    PlayTimeLimitInSeconds_val = convert_long(data.get('PlayTimeLimitInSeconds', 0), password)
    AdventureEchelonCount_val = convert_int(data.get('AdventureEchelonCount', 0), password)
    RaidEchelonCount_val = convert_int(data.get('RaidEchelonCount', 0), password)
    DefaultEchelonCount_val = convert_int(data.get('DefaultEchelonCount', 0), password)
    EventContentEchelonCount_val = convert_int(data.get('EventContentEchelonCount', 0), password)
    TimeAttackDungeonEchelonCount_val = convert_int(data.get('TimeAttackDungeonEchelonCount', 0), password)
    WorldRaidEchelonCount_val = convert_int(data.get('WorldRaidEchelonCount', 0), password)
    TacticSkipClearTimeSeconds_val = convert_int(data.get('TacticSkipClearTimeSeconds', 0), password)
    TacticSkipFramePerSecond_val = convert_int(data.get('TacticSkipFramePerSecond', 0), password)
    ConquestEchelonCount_val = convert_int(data.get('ConquestEchelonCount', 0), password)
    StoryEchelonCount_val = convert_int(data.get('StoryEchelonCount', 0), password)
    MultiSweepPresetCount_val = convert_int(data.get('MultiSweepPresetCount', 0), password)
    MultiSweepPresetNameMaxLength_val = convert_int(data.get('MultiSweepPresetNameMaxLength', 0), password)
    MultiSweepPresetSelectStageMaxCount_val = convert_int(data.get('MultiSweepPresetSelectStageMaxCount', 0), password)
    MultiSweepPresetMaxSweepCount_val = convert_int(data.get('MultiSweepPresetMaxSweepCount', 0), password)
    MultiSweepPresetSelectParcelMaxCount_val = convert_int(data.get('MultiSweepPresetSelectParcelMaxCount', 0), password)
    ConstStrategyExcel.Start(builder)
    ConstStrategyExcel.AddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset_val)
    ConstStrategyExcel.AddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset_val)
    ConstStrategyExcel.AddCameraZoomMax(builder, CameraZoomMax_val)
    ConstStrategyExcel.AddCameraZoomMin(builder, CameraZoomMin_val)
    ConstStrategyExcel.AddCameraZoomDefault(builder, CameraZoomDefault_val)
    ConstStrategyExcel.AddHealCostType(builder, HealCostType_val)
    ConstStrategyExcel.AddHealCostAmount(builder, HealCostAmount_vec)
    ConstStrategyExcel.AddCanHealHpRate(builder, CanHealHpRate_val)
    ConstStrategyExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds_val)
    ConstStrategyExcel.AddAdventureEchelonCount(builder, AdventureEchelonCount_val)
    ConstStrategyExcel.AddRaidEchelonCount(builder, RaidEchelonCount_val)
    ConstStrategyExcel.AddDefaultEchelonCount(builder, DefaultEchelonCount_val)
    ConstStrategyExcel.AddEventContentEchelonCount(builder, EventContentEchelonCount_val)
    ConstStrategyExcel.AddTimeAttackDungeonEchelonCount(builder, TimeAttackDungeonEchelonCount_val)
    ConstStrategyExcel.AddWorldRaidEchelonCount(builder, WorldRaidEchelonCount_val)
    ConstStrategyExcel.AddTacticSkipClearTimeSeconds(builder, TacticSkipClearTimeSeconds_val)
    ConstStrategyExcel.AddTacticSkipFramePerSecond(builder, TacticSkipFramePerSecond_val)
    ConstStrategyExcel.AddConquestEchelonCount(builder, ConquestEchelonCount_val)
    ConstStrategyExcel.AddStoryEchelonCount(builder, StoryEchelonCount_val)
    ConstStrategyExcel.AddMultiSweepPresetCount(builder, MultiSweepPresetCount_val)
    ConstStrategyExcel.AddMultiSweepPresetNameMaxLength(builder, MultiSweepPresetNameMaxLength_val)
    ConstStrategyExcel.AddMultiSweepPresetSelectStageMaxCount(builder, MultiSweepPresetSelectStageMaxCount_val)
    ConstStrategyExcel.AddMultiSweepPresetMaxSweepCount(builder, MultiSweepPresetMaxSweepCount_val)
    ConstStrategyExcel.AddMultiSweepPresetSelectParcelMaxCount(builder, MultiSweepPresetSelectParcelMaxCount_val)
    return ConstStrategyExcel.End(builder)

def pack_CouponStuffExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CouponStuff") if encrypt else None
    CouponStuffNameLocalizeKey_off = builder.CreateString(encrypt_string(data.get('CouponStuffNameLocalizeKey', ''), password))
    StuffId_val = convert_long(data.get('StuffId', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    LimitAmount_val = convert_int(data.get('LimitAmount', 0), password)
    CouponStuffExcel.Start(builder)
    CouponStuffExcel.AddStuffId(builder, StuffId_val)
    CouponStuffExcel.AddParcelType(builder, ParcelType_val)
    CouponStuffExcel.AddParcelId(builder, ParcelId_val)
    CouponStuffExcel.AddLimitAmount(builder, LimitAmount_val)
    CouponStuffExcel.AddCouponStuffNameLocalizeKey(builder, CouponStuffNameLocalizeKey_off)
    return CouponStuffExcel.End(builder)

def pack_DefaultCharacterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DefaultCharacter") if encrypt else None
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    FavoriteCharacter_val = data.get('FavoriteCharacter', 0)
    Level_val = convert_int(data.get('Level', 0), password)
    Exp_val = convert_int(data.get('Exp', 0), password)
    FavorExp_val = convert_int(data.get('FavorExp', 0), password)
    FavorRank_val = convert_int(data.get('FavorRank', 0), password)
    StarGrade_val = convert_int(data.get('StarGrade', 0), password)
    ExSkillLevel_val = convert_int(data.get('ExSkillLevel', 0), password)
    PassiveSkillLevel_val = convert_int(data.get('PassiveSkillLevel', 0), password)
    ExtraPassiveSkillLevel_val = convert_int(data.get('ExtraPassiveSkillLevel', 0), password)
    CommonSkillLevel_val = convert_int(data.get('CommonSkillLevel', 0), password)
    LeaderSkillLevel_val = convert_int(data.get('LeaderSkillLevel', 0), password)
    DefaultCharacterExcel.Start(builder)
    DefaultCharacterExcel.AddCharacterId(builder, CharacterId_val)
    DefaultCharacterExcel.AddFavoriteCharacter(builder, FavoriteCharacter_val)
    DefaultCharacterExcel.AddLevel(builder, Level_val)
    DefaultCharacterExcel.AddExp(builder, Exp_val)
    DefaultCharacterExcel.AddFavorExp(builder, FavorExp_val)
    DefaultCharacterExcel.AddFavorRank(builder, FavorRank_val)
    DefaultCharacterExcel.AddStarGrade(builder, StarGrade_val)
    DefaultCharacterExcel.AddExSkillLevel(builder, ExSkillLevel_val)
    DefaultCharacterExcel.AddPassiveSkillLevel(builder, PassiveSkillLevel_val)
    DefaultCharacterExcel.AddExtraPassiveSkillLevel(builder, ExtraPassiveSkillLevel_val)
    DefaultCharacterExcel.AddCommonSkillLevel(builder, CommonSkillLevel_val)
    DefaultCharacterExcel.AddLeaderSkillLevel(builder, LeaderSkillLevel_val)
    return DefaultCharacterExcel.End(builder)

def pack_DefaultEchelonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DefaultEchelon") if encrypt else None
    MainId_vec = 0
    if 'MainId' in data:
        MainId_items = data['MainId']
        DefaultEchelonExcel.StartMainIdVector(builder, len(MainId_items))
        for item in reversed(MainId_items):
            builder.PrependInt64(convert_long(item, password))
        MainId_vec = builder.EndVector(len(MainId_items))
    SupportId_vec = 0
    if 'SupportId' in data:
        SupportId_items = data['SupportId']
        DefaultEchelonExcel.StartSupportIdVector(builder, len(SupportId_items))
        for item in reversed(SupportId_items):
            builder.PrependInt64(convert_long(item, password))
        SupportId_vec = builder.EndVector(len(SupportId_items))
    EchlonId_val = convert_int(data.get('EchlonId', 0), password)
    LeaderId_val = convert_long(data.get('LeaderId', 0), password)
    TssId_val = convert_long(data.get('TssId', 0), password)
    DefaultEchelonExcel.Start(builder)
    DefaultEchelonExcel.AddEchlonId(builder, EchlonId_val)
    DefaultEchelonExcel.AddLeaderId(builder, LeaderId_val)
    DefaultEchelonExcel.AddMainId(builder, MainId_vec)
    DefaultEchelonExcel.AddSupportId(builder, SupportId_vec)
    DefaultEchelonExcel.AddTssId(builder, TssId_val)
    return DefaultEchelonExcel.End(builder)

def pack_DefaultFurnitureExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DefaultFurniture") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    Location_val = convert_int(getattr(FurnitureLocation, data.get('Location', 0)), password)
    PositionX_val = encrypt_float(data.get('PositionX', 0), password)
    PositionY_val = encrypt_float(data.get('PositionY', 0), password)
    Rotation_val = encrypt_float(data.get('Rotation', 0), password)
    DefaultFurnitureExcel.Start(builder)
    DefaultFurnitureExcel.AddId(builder, Id_val)
    DefaultFurnitureExcel.AddLocation(builder, Location_val)
    DefaultFurnitureExcel.AddPositionX(builder, PositionX_val)
    DefaultFurnitureExcel.AddPositionY(builder, PositionY_val)
    DefaultFurnitureExcel.AddRotation(builder, Rotation_val)
    return DefaultFurnitureExcel.End(builder)

def pack_DefaultMailExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DefaultMail") if encrypt else None
    MailSendPeriodFrom_off = builder.CreateString(encrypt_string(data.get('MailSendPeriodFrom', ''), password))
    MailSendPeriodTo_off = builder.CreateString(encrypt_string(data.get('MailSendPeriodTo', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        DefaultMailExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        DefaultMailExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        DefaultMailExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeCodeId_val = convert_uint(data.get('LocalizeCodeId', 0), password)
    MailType_val = convert_int(getattr(MailType, data.get('MailType', 0)), password)
    DefaultMailExcel.Start(builder)
    DefaultMailExcel.AddId(builder, Id_val)
    DefaultMailExcel.AddLocalizeCodeId(builder, LocalizeCodeId_val)
    DefaultMailExcel.AddMailType(builder, MailType_val)
    DefaultMailExcel.AddMailSendPeriodFrom(builder, MailSendPeriodFrom_off)
    DefaultMailExcel.AddMailSendPeriodTo(builder, MailSendPeriodTo_off)
    DefaultMailExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    DefaultMailExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    DefaultMailExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return DefaultMailExcel.End(builder)

def pack_DefaultParcelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DefaultParcel") if encrypt else None
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    ParcelAmount_val = convert_long(data.get('ParcelAmount', 0), password)
    DefaultParcelExcel.Start(builder)
    DefaultParcelExcel.AddParcelType(builder, ParcelType_val)
    DefaultParcelExcel.AddParcelId(builder, ParcelId_val)
    DefaultParcelExcel.AddParcelAmount(builder, ParcelAmount_val)
    return DefaultParcelExcel.End(builder)

def pack_EmoticonSpecialExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EmoticonSpecial") if encrypt else None
    Random_off = builder.CreateString(encrypt_string(data.get('Random', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    CharacterUniqueId_val = convert_long(data.get('CharacterUniqueId', 0), password)
    EmoticonSpecialExcel.Start(builder)
    EmoticonSpecialExcel.AddUniqueId(builder, UniqueId_val)
    EmoticonSpecialExcel.AddCharacterUniqueId(builder, CharacterUniqueId_val)
    EmoticonSpecialExcel.AddRandom(builder, Random_off)
    return EmoticonSpecialExcel.End(builder)

def pack_EventContentBoxGachaElementExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentBoxGachaElement") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    Round_val = convert_long(data.get('Round', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    EventContentBoxGachaElementExcel.Start(builder)
    EventContentBoxGachaElementExcel.AddEventContentId(builder, EventContentId_val)
    EventContentBoxGachaElementExcel.AddId(builder, Id_val)
    EventContentBoxGachaElementExcel.AddRound(builder, Round_val)
    EventContentBoxGachaElementExcel.AddGroupId(builder, GroupId_val)
    return EventContentBoxGachaElementExcel.End(builder)

def pack_EventContentExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContent") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    BgImagePath_off = builder.CreateString(encrypt_string(data.get('BgImagePath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentExcel.Start(builder)
    EventContentExcel.AddId(builder, Id_val)
    EventContentExcel.AddDevName(builder, DevName_off)
    EventContentExcel.AddEventContentId(builder, EventContentId_val)
    EventContentExcel.AddBgImagePath(builder, BgImagePath_off)
    return EventContentExcel.End(builder)

def pack_FieldContentStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldContentStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        FieldContentStageExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        FieldContentStageExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    AreaId_val = convert_long(data.get('AreaId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    StageDifficulty_val = convert_int(getattr(StageDifficulty, data.get('StageDifficulty', 0)), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    GroundID_val = convert_long(data.get('GroundID', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    InstantClear_val = data.get('InstantClear', 0)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    SkipFormationSettings_val = data.get('SkipFormationSettings', 0)
    DailyLastPlay_val = data.get('DailyLastPlay', 0)
    FieldContentStageExcel.Start(builder)
    FieldContentStageExcel.AddId(builder, Id_val)
    FieldContentStageExcel.AddSeasonId(builder, SeasonId_val)
    FieldContentStageExcel.AddAreaId(builder, AreaId_val)
    FieldContentStageExcel.AddGroupId(builder, GroupId_val)
    FieldContentStageExcel.AddStageDifficulty(builder, StageDifficulty_val)
    FieldContentStageExcel.AddPrevStageId(builder, PrevStageId_val)
    FieldContentStageExcel.AddName(builder, Name_off)
    FieldContentStageExcel.AddBattleDuration(builder, BattleDuration_val)
    FieldContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    FieldContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    FieldContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    FieldContentStageExcel.AddStageTopography(builder, StageTopography_val)
    FieldContentStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    FieldContentStageExcel.AddGroundID(builder, GroundID_val)
    FieldContentStageExcel.AddBGMId(builder, BGMId_val)
    FieldContentStageExcel.AddInstantClear(builder, InstantClear_val)
    FieldContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    FieldContentStageExcel.AddSkipFormationSettings(builder, SkipFormationSettings_val)
    FieldContentStageExcel.AddDailyLastPlay(builder, DailyLastPlay_val)
    FieldContentStageExcel.AddStarGoal(builder, StarGoal_vec)
    FieldContentStageExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    return FieldContentStageExcel.End(builder)

def pack_FieldContentStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldContentStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    FieldContentStageRewardExcel.Start(builder)
    FieldContentStageRewardExcel.AddGroupId(builder, GroupId_val)
    FieldContentStageRewardExcel.AddRewardTag(builder, RewardTag_val)
    FieldContentStageRewardExcel.AddRewardProb(builder, RewardProb_val)
    FieldContentStageRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    FieldContentStageRewardExcel.AddRewardId(builder, RewardId_val)
    FieldContentStageRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    FieldContentStageRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return FieldContentStageRewardExcel.End(builder)

def pack_FieldCurtainCallFreeModeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldCurtainCallFreeMode") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    OpenDate_val = convert_long(data.get('OpenDate', 0), password)
    SetFieldDateID_val = convert_long(data.get('SetFieldDateID', 0), password)
    SetFieldQuestOpenDate_val = convert_long(data.get('SetFieldQuestOpenDate', 0), password)
    FieldCurtainCallFreeModeExcel.Start(builder)
    FieldCurtainCallFreeModeExcel.AddUniqueId(builder, UniqueId_val)
    FieldCurtainCallFreeModeExcel.AddOpenDate(builder, OpenDate_val)
    FieldCurtainCallFreeModeExcel.AddSetFieldDateID(builder, SetFieldDateID_val)
    FieldCurtainCallFreeModeExcel.AddSetFieldQuestOpenDate(builder, SetFieldQuestOpenDate_val)
    return FieldCurtainCallFreeModeExcel.End(builder)

def pack_FieldDateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldDate") if encrypt else None
    DateLocalizeKey_off = builder.CreateString(encrypt_string(data.get('DateLocalizeKey', ''), password))
    CharacterIconPath_off = builder.CreateString(encrypt_string(data.get('CharacterIconPath', ''), password))
    DateResultBGPath_off = builder.CreateString(encrypt_string(data.get('DateResultBGPath', ''), password))
    DateResultSpinePath_off = builder.CreateString(encrypt_string(data.get('DateResultSpinePath', ''), password))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    OpenDate_val = convert_long(data.get('OpenDate', 0), password)
    EntrySceneId_val = convert_long(data.get('EntrySceneId', 0), password)
    StartConditionType_val = convert_int(getattr(FieldConditionType, data.get('StartConditionType', 0)), password)
    StartConditionId_val = convert_long(data.get('StartConditionId', 0), password)
    EndConditionType_val = convert_int(getattr(FieldConditionType, data.get('EndConditionType', 0)), password)
    EndConditionId_val = convert_long(data.get('EndConditionId', 0), password)
    EndReadyConditionType_val = convert_int(getattr(FieldConditionType, data.get('EndReadyConditionType', 0)), password)
    EndReadyConditionId_val = convert_long(data.get('EndReadyConditionId', 0), password)
    OpenConditionStage_val = convert_long(data.get('OpenConditionStage', 0), password)
    DateResultSpineOffsetX_val = encrypt_float(data.get('DateResultSpineOffsetX', 0), password)
    FieldDateExcel.Start(builder)
    FieldDateExcel.AddSeasonId(builder, SeasonId_val)
    FieldDateExcel.AddUniqueId(builder, UniqueId_val)
    FieldDateExcel.AddOpenDate(builder, OpenDate_val)
    FieldDateExcel.AddDateLocalizeKey(builder, DateLocalizeKey_off)
    FieldDateExcel.AddEntrySceneId(builder, EntrySceneId_val)
    FieldDateExcel.AddStartConditionType(builder, StartConditionType_val)
    FieldDateExcel.AddStartConditionId(builder, StartConditionId_val)
    FieldDateExcel.AddEndConditionType(builder, EndConditionType_val)
    FieldDateExcel.AddEndConditionId(builder, EndConditionId_val)
    FieldDateExcel.AddEndReadyConditionType(builder, EndReadyConditionType_val)
    FieldDateExcel.AddEndReadyConditionId(builder, EndReadyConditionId_val)
    FieldDateExcel.AddOpenConditionStage(builder, OpenConditionStage_val)
    FieldDateExcel.AddCharacterIconPath(builder, CharacterIconPath_off)
    FieldDateExcel.AddDateResultBGPath(builder, DateResultBGPath_off)
    FieldDateExcel.AddDateResultSpinePath(builder, DateResultSpinePath_off)
    FieldDateExcel.AddDateResultSpineOffsetX(builder, DateResultSpineOffsetX_val)
    return FieldDateExcel.End(builder)

def pack_FieldEvidenceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldEvidence") if encrypt else None
    NameLocalizeKey_off = builder.CreateString(encrypt_string(data.get('NameLocalizeKey', ''), password))
    DescriptionLocalizeKey_off = builder.CreateString(encrypt_string(data.get('DescriptionLocalizeKey', ''), password))
    DetailLocalizeKey_off = builder.CreateString(encrypt_string(data.get('DetailLocalizeKey', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    FieldEvidenceExcel.Start(builder)
    FieldEvidenceExcel.AddUniqueId(builder, UniqueId_val)
    FieldEvidenceExcel.AddSeasonId(builder, SeasonId_val)
    FieldEvidenceExcel.AddNameLocalizeKey(builder, NameLocalizeKey_off)
    FieldEvidenceExcel.AddDescriptionLocalizeKey(builder, DescriptionLocalizeKey_off)
    FieldEvidenceExcel.AddDetailLocalizeKey(builder, DetailLocalizeKey_off)
    FieldEvidenceExcel.AddImagePath(builder, ImagePath_off)
    return FieldEvidenceExcel.End(builder)

def pack_FieldInteractionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldInteraction") if encrypt else None
    KeywordLocalize_off = builder.CreateString(encrypt_string(data.get('KeywordLocalize', ''), password))
    InteractionType_vec = 0
    if 'InteractionType' in data:
        InteractionType_items = data['InteractionType']
        FieldInteractionExcel.StartInteractionTypeVector(builder, len(InteractionType_items))
        for item in reversed(InteractionType_items):
            builder.PrependInt32(convert_int(getattr(FieldInteractionType, item), password))
        InteractionType_vec = builder.EndVector(len(InteractionType_items))
    InteractionId_vec = 0
    if 'InteractionId' in data:
        InteractionId_items = data['InteractionId']
        FieldInteractionExcel.StartInteractionIdVector(builder, len(InteractionId_items))
        for item in reversed(InteractionId_items):
            builder.PrependInt64(convert_long(item, password))
        InteractionId_vec = builder.EndVector(len(InteractionId_items))
    ConditionClassParameters_vec = 0
    if 'ConditionClassParameters' in data:
        ConditionClassParameters_items = data['ConditionClassParameters']
        FieldInteractionExcel.StartConditionClassParametersVector(builder, len(ConditionClassParameters_items))
        for item in reversed(ConditionClassParameters_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionClassParameters_vec = builder.EndVector(len(ConditionClassParameters_items))
    ConditionIndex_vec = 0
    if 'ConditionIndex' in data:
        ConditionIndex_items = data['ConditionIndex']
        FieldInteractionExcel.StartConditionIndexVector(builder, len(ConditionIndex_items))
        for item in reversed(ConditionIndex_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionIndex_vec = builder.EndVector(len(ConditionIndex_items))
    ConditionType_vec = 0
    if 'ConditionType' in data:
        ConditionType_items = data['ConditionType']
        FieldInteractionExcel.StartConditionTypeVector(builder, len(ConditionType_items))
        for item in reversed(ConditionType_items):
            builder.PrependInt32(convert_int(getattr(FieldConditionType, item), password))
        ConditionType_vec = builder.EndVector(len(ConditionType_items))
    ConditionId_vec = 0
    if 'ConditionId' in data:
        ConditionId_items = data['ConditionId']
        FieldInteractionExcel.StartConditionIdVector(builder, len(ConditionId_items))
        for item in reversed(ConditionId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionId_vec = builder.EndVector(len(ConditionId_items))
    NegateCondition_vec = 0
    if 'NegateCondition' in data:
        NegateCondition_items = data['NegateCondition']
        FieldInteractionExcel.StartNegateConditionVector(builder, len(NegateCondition_items))
        for item in reversed(NegateCondition_items):
            builder.PrependBool(item)
        NegateCondition_vec = builder.EndVector(len(NegateCondition_items))
    FieldSeasonId_val = convert_long(data.get('FieldSeasonId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    FieldDateId_val = convert_long(data.get('FieldDateId', 0), password)
    ShowEmoji_val = data.get('ShowEmoji', 0)
    ConditionClass_val = convert_int(getattr(FieldConditionClass, data.get('ConditionClass', 0)), password)
    OnceOnly_val = data.get('OnceOnly', 0)
    FieldInteractionExcel.Start(builder)
    FieldInteractionExcel.AddFieldSeasonId(builder, FieldSeasonId_val)
    FieldInteractionExcel.AddUniqueId(builder, UniqueId_val)
    FieldInteractionExcel.AddFieldDateId(builder, FieldDateId_val)
    FieldInteractionExcel.AddShowEmoji(builder, ShowEmoji_val)
    FieldInteractionExcel.AddKeywordLocalize(builder, KeywordLocalize_off)
    FieldInteractionExcel.AddInteractionType(builder, InteractionType_vec)
    FieldInteractionExcel.AddInteractionId(builder, InteractionId_vec)
    FieldInteractionExcel.AddConditionClass(builder, ConditionClass_val)
    FieldInteractionExcel.AddConditionClassParameters(builder, ConditionClassParameters_vec)
    FieldInteractionExcel.AddOnceOnly(builder, OnceOnly_val)
    FieldInteractionExcel.AddConditionIndex(builder, ConditionIndex_vec)
    FieldInteractionExcel.AddConditionType(builder, ConditionType_vec)
    FieldInteractionExcel.AddConditionId(builder, ConditionId_vec)
    FieldInteractionExcel.AddNegateCondition(builder, NegateCondition_vec)
    return FieldInteractionExcel.End(builder)

def pack_FieldKeywordExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldKeyword") if encrypt else None
    NameLocalizeKey_off = builder.CreateString(encrypt_string(data.get('NameLocalizeKey', ''), password))
    DescriptionLocalizeKey_off = builder.CreateString(encrypt_string(data.get('DescriptionLocalizeKey', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    FieldKeywordExcel.Start(builder)
    FieldKeywordExcel.AddUniqueId(builder, UniqueId_val)
    FieldKeywordExcel.AddSeasonId(builder, SeasonId_val)
    FieldKeywordExcel.AddNameLocalizeKey(builder, NameLocalizeKey_off)
    FieldKeywordExcel.AddDescriptionLocalizeKey(builder, DescriptionLocalizeKey_off)
    FieldKeywordExcel.AddImagePath(builder, ImagePath_off)
    return FieldKeywordExcel.End(builder)

def pack_FieldMasteryExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldMastery") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    Order_val = convert_int(data.get('Order', 0), password)
    ExpAmount_val = convert_long(data.get('ExpAmount', 0), password)
    TokenType_val = convert_int(getattr(ParcelType, data.get('TokenType', 0)), password)
    TokenId_val = convert_long(data.get('TokenId', 0), password)
    TokenRequirement_val = convert_long(data.get('TokenRequirement', 0), password)
    AccomplishmentConditionType_val = convert_int(getattr(FieldConditionType, data.get('AccomplishmentConditionType', 0)), password)
    AccomplishmentConditionId_val = convert_long(data.get('AccomplishmentConditionId', 0), password)
    FieldMasteryExcel.Start(builder)
    FieldMasteryExcel.AddUniqueId(builder, UniqueId_val)
    FieldMasteryExcel.AddSeasonId(builder, SeasonId_val)
    FieldMasteryExcel.AddOrder(builder, Order_val)
    FieldMasteryExcel.AddExpAmount(builder, ExpAmount_val)
    FieldMasteryExcel.AddTokenType(builder, TokenType_val)
    FieldMasteryExcel.AddTokenId(builder, TokenId_val)
    FieldMasteryExcel.AddTokenRequirement(builder, TokenRequirement_val)
    FieldMasteryExcel.AddAccomplishmentConditionType(builder, AccomplishmentConditionType_val)
    FieldMasteryExcel.AddAccomplishmentConditionId(builder, AccomplishmentConditionId_val)
    return FieldMasteryExcel.End(builder)

def pack_FieldMasteryLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldMasteryLevel") if encrypt else None
    Id_vec = 0
    if 'Id' in data:
        Id_items = data['Id']
        FieldMasteryLevelExcel.StartIdVector(builder, len(Id_items))
        for item in reversed(Id_items):
            builder.PrependInt64(convert_long(item, password))
        Id_vec = builder.EndVector(len(Id_items))
    Exp_vec = 0
    if 'Exp' in data:
        Exp_items = data['Exp']
        FieldMasteryLevelExcel.StartExpVector(builder, len(Exp_items))
        for item in reversed(Exp_items):
            builder.PrependInt64(convert_long(item, password))
        Exp_vec = builder.EndVector(len(Exp_items))
    TotalExp_vec = 0
    if 'TotalExp' in data:
        TotalExp_items = data['TotalExp']
        FieldMasteryLevelExcel.StartTotalExpVector(builder, len(TotalExp_items))
        for item in reversed(TotalExp_items):
            builder.PrependInt64(convert_long(item, password))
        TotalExp_vec = builder.EndVector(len(TotalExp_items))
    RewardId_vec = 0
    if 'RewardId' in data:
        RewardId_items = data['RewardId']
        FieldMasteryLevelExcel.StartRewardIdVector(builder, len(RewardId_items))
        for item in reversed(RewardId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardId_vec = builder.EndVector(len(RewardId_items))
    Level_val = convert_int(data.get('Level', 0), password)
    FieldMasteryLevelExcel.Start(builder)
    FieldMasteryLevelExcel.AddLevel(builder, Level_val)
    FieldMasteryLevelExcel.AddId(builder, Id_vec)
    FieldMasteryLevelExcel.AddExp(builder, Exp_vec)
    FieldMasteryLevelExcel.AddTotalExp(builder, TotalExp_vec)
    FieldMasteryLevelExcel.AddRewardId(builder, RewardId_vec)
    return FieldMasteryLevelExcel.End(builder)

def pack_FieldMasteryManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldMasteryManage") if encrypt else None
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    FieldSeason_val = convert_long(data.get('FieldSeason', 0), password)
    LocalizeEtc_val = convert_uint(data.get('LocalizeEtc', 0), password)
    LevelId_val = convert_long(data.get('LevelId', 0), password)
    FieldMasteryManageExcel.Start(builder)
    FieldMasteryManageExcel.AddFieldSeason(builder, FieldSeason_val)
    FieldMasteryManageExcel.AddLocalizeEtc(builder, LocalizeEtc_val)
    FieldMasteryManageExcel.AddImagePath(builder, ImagePath_off)
    FieldMasteryManageExcel.AddLevelId(builder, LevelId_val)
    return FieldMasteryManageExcel.End(builder)

def pack_FieldQuestExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldQuest") if encrypt else None
    AssetPath_off = builder.CreateString(encrypt_string(data.get('AssetPath', ''), password))
    FieldSeasonId_val = convert_long(data.get('FieldSeasonId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    IsDaily_val = data.get('IsDaily', 0)
    FieldDateId_val = convert_long(data.get('FieldDateId', 0), password)
    Opendate_val = convert_long(data.get('Opendate', 0), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    QuestNamKey_val = convert_uint(data.get('QuestNamKey', 0), password)
    QuestDescKey_val = convert_uint(data.get('QuestDescKey', 0), password)
    FieldQuestExcel.Start(builder)
    FieldQuestExcel.AddFieldSeasonId(builder, FieldSeasonId_val)
    FieldQuestExcel.AddUniqueId(builder, UniqueId_val)
    FieldQuestExcel.AddIsDaily(builder, IsDaily_val)
    FieldQuestExcel.AddFieldDateId(builder, FieldDateId_val)
    FieldQuestExcel.AddOpendate(builder, Opendate_val)
    FieldQuestExcel.AddAssetPath(builder, AssetPath_off)
    FieldQuestExcel.AddRewardId(builder, RewardId_val)
    FieldQuestExcel.AddProb(builder, Prob_val)
    FieldQuestExcel.AddQuestNamKey(builder, QuestNamKey_val)
    FieldQuestExcel.AddQuestDescKey(builder, QuestDescKey_val)
    return FieldQuestExcel.End(builder)

def pack_FieldRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    FieldRewardExcel.Start(builder)
    FieldRewardExcel.AddGroupId(builder, GroupId_val)
    FieldRewardExcel.AddRewardProb(builder, RewardProb_val)
    FieldRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    FieldRewardExcel.AddRewardId(builder, RewardId_val)
    FieldRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    return FieldRewardExcel.End(builder)

def pack_FieldSceneExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldScene") if encrypt else None
    ArtLevelPath_off = builder.CreateString(encrypt_string(data.get('ArtLevelPath', ''), password))
    DesignLevelPath_off = builder.CreateString(encrypt_string(data.get('DesignLevelPath', ''), password))
    ConditionalBGMQuestId_vec = 0
    if 'ConditionalBGMQuestId' in data:
        ConditionalBGMQuestId_items = data['ConditionalBGMQuestId']
        FieldSceneExcel.StartConditionalBGMQuestIdVector(builder, len(ConditionalBGMQuestId_items))
        for item in reversed(ConditionalBGMQuestId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionalBGMQuestId_vec = builder.EndVector(len(ConditionalBGMQuestId_items))
    BeginConditionalBGMScenarioGroupId_vec = 0
    if 'BeginConditionalBGMScenarioGroupId' in data:
        BeginConditionalBGMScenarioGroupId_items = data['BeginConditionalBGMScenarioGroupId']
        FieldSceneExcel.StartBeginConditionalBGMScenarioGroupIdVector(builder, len(BeginConditionalBGMScenarioGroupId_items))
        for item in reversed(BeginConditionalBGMScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        BeginConditionalBGMScenarioGroupId_vec = builder.EndVector(len(BeginConditionalBGMScenarioGroupId_items))
    BeginConditionalBGMInteractionId_vec = 0
    if 'BeginConditionalBGMInteractionId' in data:
        BeginConditionalBGMInteractionId_items = data['BeginConditionalBGMInteractionId']
        FieldSceneExcel.StartBeginConditionalBGMInteractionIdVector(builder, len(BeginConditionalBGMInteractionId_items))
        for item in reversed(BeginConditionalBGMInteractionId_items):
            builder.PrependInt64(convert_long(item, password))
        BeginConditionalBGMInteractionId_vec = builder.EndVector(len(BeginConditionalBGMInteractionId_items))
    EndConditionalBGMScenarioGroupId_vec = 0
    if 'EndConditionalBGMScenarioGroupId' in data:
        EndConditionalBGMScenarioGroupId_items = data['EndConditionalBGMScenarioGroupId']
        FieldSceneExcel.StartEndConditionalBGMScenarioGroupIdVector(builder, len(EndConditionalBGMScenarioGroupId_items))
        for item in reversed(EndConditionalBGMScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EndConditionalBGMScenarioGroupId_vec = builder.EndVector(len(EndConditionalBGMScenarioGroupId_items))
    EndConditionalBGMInteractionId_vec = 0
    if 'EndConditionalBGMInteractionId' in data:
        EndConditionalBGMInteractionId_items = data['EndConditionalBGMInteractionId']
        FieldSceneExcel.StartEndConditionalBGMInteractionIdVector(builder, len(EndConditionalBGMInteractionId_items))
        for item in reversed(EndConditionalBGMInteractionId_items):
            builder.PrependInt64(convert_long(item, password))
        EndConditionalBGMInteractionId_vec = builder.EndVector(len(EndConditionalBGMInteractionId_items))
    ConditionalBGMId_vec = 0
    if 'ConditionalBGMId' in data:
        ConditionalBGMId_items = data['ConditionalBGMId']
        FieldSceneExcel.StartConditionalBGMIdVector(builder, len(ConditionalBGMId_items))
        for item in reversed(ConditionalBGMId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionalBGMId_vec = builder.EndVector(len(ConditionalBGMId_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    DateId_val = convert_long(data.get('DateId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    FieldSceneExcel.Start(builder)
    FieldSceneExcel.AddUniqueId(builder, UniqueId_val)
    FieldSceneExcel.AddDateId(builder, DateId_val)
    FieldSceneExcel.AddGroupId(builder, GroupId_val)
    FieldSceneExcel.AddArtLevelPath(builder, ArtLevelPath_off)
    FieldSceneExcel.AddDesignLevelPath(builder, DesignLevelPath_off)
    FieldSceneExcel.AddBGMId(builder, BGMId_val)
    FieldSceneExcel.AddConditionalBGMQuestId(builder, ConditionalBGMQuestId_vec)
    FieldSceneExcel.AddBeginConditionalBGMScenarioGroupId(builder, BeginConditionalBGMScenarioGroupId_vec)
    FieldSceneExcel.AddBeginConditionalBGMInteractionId(builder, BeginConditionalBGMInteractionId_vec)
    FieldSceneExcel.AddEndConditionalBGMScenarioGroupId(builder, EndConditionalBGMScenarioGroupId_vec)
    FieldSceneExcel.AddEndConditionalBGMInteractionId(builder, EndConditionalBGMInteractionId_vec)
    FieldSceneExcel.AddConditionalBGMId(builder, ConditionalBGMId_vec)
    return FieldSceneExcel.End(builder)

def pack_FieldSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldSeason") if encrypt else None
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    MasteryImagePath_off = builder.CreateString(encrypt_string(data.get('MasteryImagePath', ''), password))
    FieldLobbyTitleImagePath_off = builder.CreateString(encrypt_string(data.get('FieldLobbyTitleImagePath', ''), password))
    KeywordLogoImagePath_off = builder.CreateString(encrypt_string(data.get('KeywordLogoImagePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EntryDateId_val = convert_long(data.get('EntryDateId', 0), password)
    InstantEntryDateId_val = convert_long(data.get('InstantEntryDateId', 0), password)
    LobbyBGMChangeStageId_val = convert_long(data.get('LobbyBGMChangeStageId', 0), password)
    FieldPrefabControlID_val = convert_long(data.get('FieldPrefabControlID', 0), password)
    FieldGetKeywordCallDialogEnum_val = convert_int(getattr(FieldDialogType, data.get('FieldGetKeywordCallDialogEnum', 0)), password)
    FieldSeasonExcel.Start(builder)
    FieldSeasonExcel.AddUniqueId(builder, UniqueId_val)
    FieldSeasonExcel.AddEventContentId(builder, EventContentId_val)
    FieldSeasonExcel.AddEntryDateId(builder, EntryDateId_val)
    FieldSeasonExcel.AddInstantEntryDateId(builder, InstantEntryDateId_val)
    FieldSeasonExcel.AddStartDate(builder, StartDate_off)
    FieldSeasonExcel.AddEndDate(builder, EndDate_off)
    FieldSeasonExcel.AddLobbyBGMChangeStageId(builder, LobbyBGMChangeStageId_val)
    FieldSeasonExcel.AddFieldPrefabControlID(builder, FieldPrefabControlID_val)
    FieldSeasonExcel.AddFieldGetKeywordCallDialogEnum(builder, FieldGetKeywordCallDialogEnum_val)
    FieldSeasonExcel.AddMasteryImagePath(builder, MasteryImagePath_off)
    FieldSeasonExcel.AddFieldLobbyTitleImagePath(builder, FieldLobbyTitleImagePath_off)
    FieldSeasonExcel.AddKeywordLogoImagePath(builder, KeywordLogoImagePath_off)
    return FieldSeasonExcel.End(builder)

def pack_FieldStoryStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldStoryStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    GroundID_val = convert_long(data.get('GroundID', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    SkipFormationSettings_val = data.get('SkipFormationSettings', 0)
    FieldStoryStageExcel.Start(builder)
    FieldStoryStageExcel.AddId(builder, Id_val)
    FieldStoryStageExcel.AddSeasonId(builder, SeasonId_val)
    FieldStoryStageExcel.AddName(builder, Name_off)
    FieldStoryStageExcel.AddBattleDuration(builder, BattleDuration_val)
    FieldStoryStageExcel.AddStageTopography(builder, StageTopography_val)
    FieldStoryStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    FieldStoryStageExcel.AddGroundID(builder, GroundID_val)
    FieldStoryStageExcel.AddBGMId(builder, BGMId_val)
    FieldStoryStageExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    FieldStoryStageExcel.AddSkipFormationSettings(builder, SkipFormationSettings_val)
    return FieldStoryStageExcel.End(builder)

def pack_FieldTutorialExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldTutorial") if encrypt else None
    TutorialType_vec = 0
    if 'TutorialType' in data:
        TutorialType_items = data['TutorialType']
        FieldTutorialExcel.StartTutorialTypeVector(builder, len(TutorialType_items))
        for item in reversed(TutorialType_items):
            builder.PrependInt32(convert_int(getattr(FieldTutorialType, item), password))
        TutorialType_vec = builder.EndVector(len(TutorialType_items))
    ConditionType_vec = 0
    if 'ConditionType' in data:
        ConditionType_items = data['ConditionType']
        FieldTutorialExcel.StartConditionTypeVector(builder, len(ConditionType_items))
        for item in reversed(ConditionType_items):
            builder.PrependInt32(convert_int(getattr(FieldConditionType, item), password))
        ConditionType_vec = builder.EndVector(len(ConditionType_items))
    ConditionId_vec = 0
    if 'ConditionId' in data:
        ConditionId_items = data['ConditionId']
        FieldTutorialExcel.StartConditionIdVector(builder, len(ConditionId_items))
        for item in reversed(ConditionId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionId_vec = builder.EndVector(len(ConditionId_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    FieldTutorialExcel.Start(builder)
    FieldTutorialExcel.AddSeasonId(builder, SeasonId_val)
    FieldTutorialExcel.AddTutorialType(builder, TutorialType_vec)
    FieldTutorialExcel.AddConditionType(builder, ConditionType_vec)
    FieldTutorialExcel.AddConditionId(builder, ConditionId_vec)
    return FieldTutorialExcel.End(builder)

def pack_FieldWorldMapZoneExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FieldWorldMapZone") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_int(data.get('GroupId', 0), password)
    Date_val = convert_int(data.get('Date', 0), password)
    OpenConditionType_val = convert_int(getattr(FieldConditionType, data.get('OpenConditionType', 0)), password)
    OpenConditionId_val = convert_long(data.get('OpenConditionId', 0), password)
    CloseConditionType_val = convert_int(getattr(FieldConditionType, data.get('CloseConditionType', 0)), password)
    CloseConditionId_val = convert_long(data.get('CloseConditionId', 0), password)
    ResultFieldScene_val = convert_long(data.get('ResultFieldScene', 0), password)
    FieldStageInteractionId_val = convert_long(data.get('FieldStageInteractionId', 0), password)
    WorldMapButtonType_val = convert_int(getattr(FieldWorldMapButtonType, data.get('WorldMapButtonType', 0)), password)
    LocalizeCode_val = convert_uint(data.get('LocalizeCode', 0), password)
    NewTagDisplay_val = data.get('NewTagDisplay', 0)
    FieldWorldMapZoneExcel.Start(builder)
    FieldWorldMapZoneExcel.AddId(builder, Id_val)
    FieldWorldMapZoneExcel.AddGroupId(builder, GroupId_val)
    FieldWorldMapZoneExcel.AddDate(builder, Date_val)
    FieldWorldMapZoneExcel.AddOpenConditionType(builder, OpenConditionType_val)
    FieldWorldMapZoneExcel.AddOpenConditionId(builder, OpenConditionId_val)
    FieldWorldMapZoneExcel.AddCloseConditionType(builder, CloseConditionType_val)
    FieldWorldMapZoneExcel.AddCloseConditionId(builder, CloseConditionId_val)
    FieldWorldMapZoneExcel.AddResultFieldScene(builder, ResultFieldScene_val)
    FieldWorldMapZoneExcel.AddFieldStageInteractionId(builder, FieldStageInteractionId_val)
    FieldWorldMapZoneExcel.AddWorldMapButtonType(builder, WorldMapButtonType_val)
    FieldWorldMapZoneExcel.AddLocalizeCode(builder, LocalizeCode_val)
    FieldWorldMapZoneExcel.AddNewTagDisplay(builder, NewTagDisplay_val)
    return FieldWorldMapZoneExcel.End(builder)

def pack_GachaSelectPickupGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaSelectPickupGroup") if encrypt else None
    NameKr_off = builder.CreateString(encrypt_string(data.get('NameKr', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    GachaGroupID_val = convert_long(data.get('GachaGroupID', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    GachaSelectPickupGroupExcel.Start(builder)
    GachaSelectPickupGroupExcel.AddId(builder, Id_val)
    GachaSelectPickupGroupExcel.AddNameKr(builder, NameKr_off)
    GachaSelectPickupGroupExcel.AddGachaGroupID(builder, GachaGroupID_val)
    GachaSelectPickupGroupExcel.AddCharacterId(builder, CharacterId_val)
    return GachaSelectPickupGroupExcel.End(builder)

def pack_GroundGridFlat(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GroundGridFlat") if encrypt else None
    Version_off = builder.CreateString(encrypt_string(data.get('Version', ''), password))
    Nodes_vec = 0
    if 'Nodes' in data:
        Nodes_items = data['Nodes']
        Nodes_vec = builder.EndVector(len(Nodes_items))
    X_val = convert_int(data.get('X', 0), password)
    Y_val = convert_int(data.get('Y', 0), password)
    StartX_val = encrypt_float(data.get('StartX', 0), password)
    StartY_val = encrypt_float(data.get('StartY', 0), password)
    Gap_val = encrypt_float(data.get('Gap', 0), password)
    GroundGridFlat.Start(builder)
    GroundGridFlat.AddX(builder, X_val)
    GroundGridFlat.AddY(builder, Y_val)
    GroundGridFlat.AddStartX(builder, StartX_val)
    GroundGridFlat.AddStartY(builder, StartY_val)
    GroundGridFlat.AddGap(builder, Gap_val)
    GroundGridFlat.AddNodes(builder, Nodes_vec)
    GroundGridFlat.AddVersion(builder, Version_off)
    return GroundGridFlat.End(builder)

def pack_GroundNodeFlat(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GroundNodeFlat") if encrypt else None
    X_val = convert_int(data.get('X', 0), password)
    Y_val = convert_int(data.get('Y', 0), password)
    IsCanNotUseSkill_val = data.get('IsCanNotUseSkill', 0)
    Position_val = convert_int(data.get('Position', 0), password)
    NodeType_val = convert_int(getattr(GroundNodeType, data.get('NodeType', 0)), password)
    OriginalNodeType_val = convert_int(getattr(GroundNodeType, data.get('OriginalNodeType', 0)), password)
    GroundNodeFlat.Start(builder)
    GroundNodeFlat.AddX(builder, X_val)
    GroundNodeFlat.AddY(builder, Y_val)
    GroundNodeFlat.AddIsCanNotUseSkill(builder, IsCanNotUseSkill_val)
    GroundNodeFlat.AddPosition(builder, Position_val)
    GroundNodeFlat.AddNodeType(builder, NodeType_val)
    GroundNodeFlat.AddOriginalNodeType(builder, OriginalNodeType_val)
    return GroundNodeFlat.End(builder)

def pack_GroundNodeLayerFlat(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GroundNodeLayerFlat") if encrypt else None
    Layers_vec = 0
    if 'Layers' in data:
        Layers_items = data['Layers']
        GroundNodeLayerFlat.StartLayersVector(builder, len(Layers_items))
        for item in reversed(Layers_items):
            builder.PrependInt8(convert_int(item, password))
        Layers_vec = builder.EndVector(len(Layers_items))
    GroundNodeLayerFlat.Start(builder)
    GroundNodeLayerFlat.AddLayers(builder, Layers_vec)
    return GroundNodeLayerFlat.End(builder)

def pack_KnockBackExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("KnockBack") if encrypt else None
    Index_val = convert_long(data.get('Index', 0), password)
    Dist_val = encrypt_float(data.get('Dist', 0), password)
    Speed_val = encrypt_float(data.get('Speed', 0), password)
    KnockBackExcel.Start(builder)
    KnockBackExcel.AddIndex(builder, Index_val)
    KnockBackExcel.AddDist(builder, Dist_val)
    KnockBackExcel.AddSpeed(builder, Speed_val)
    return KnockBackExcel.End(builder)

def pack_LimitedStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LimitedStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StageNumber_off = builder.CreateString(encrypt_string(data.get('StageNumber', ''), password))
    StrategyMap_off = builder.CreateString(encrypt_string(data.get('StrategyMap', ''), password))
    StrategyMapBG_off = builder.CreateString(encrypt_string(data.get('StrategyMapBG', ''), password))
    BgmId_off = builder.CreateString(encrypt_string(data.get('BgmId', ''), password))
    EnterScenarioGroupId_vec = 0
    if 'EnterScenarioGroupId' in data:
        EnterScenarioGroupId_items = data['EnterScenarioGroupId']
        LimitedStageExcel.StartEnterScenarioGroupIdVector(builder, len(EnterScenarioGroupId_items))
        for item in reversed(EnterScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnterScenarioGroupId_vec = builder.EndVector(len(EnterScenarioGroupId_items))
    ClearScenarioGroupId_vec = 0
    if 'ClearScenarioGroupId' in data:
        ClearScenarioGroupId_items = data['ClearScenarioGroupId']
        LimitedStageExcel.StartClearScenarioGroupIdVector(builder, len(ClearScenarioGroupId_items))
        for item in reversed(ClearScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearScenarioGroupId_vec = builder.EndVector(len(ClearScenarioGroupId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    StageDifficulty_val = convert_int(getattr(StageDifficulty, data.get('StageDifficulty', 0)), password)
    StageDisplay_val = convert_int(data.get('StageDisplay', 0), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    OpenDate_val = convert_long(data.get('OpenDate', 0), password)
    OpenEventPoint_val = convert_long(data.get('OpenEventPoint', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    StageEnterEchelonCount_val = convert_int(data.get('StageEnterEchelonCount', 0), password)
    StarConditionTacticRankSCount_val = convert_long(data.get('StarConditionTacticRankSCount', 0), password)
    StarConditionTurnCount_val = convert_long(data.get('StarConditionTurnCount', 0), password)
    StageRewardId_val = convert_long(data.get('StageRewardId', 0), password)
    MaxTurn_val = convert_int(data.get('MaxTurn', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    StrategyEnvironment_val = convert_int(getattr(StrategyEnvironment, data.get('StrategyEnvironment', 0)), password)
    GroundID_val = convert_long(data.get('GroundID', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    InstantClear_val = data.get('InstantClear', 0)
    BuffContentId_val = convert_long(data.get('BuffContentId', 0), password)
    ChallengeDisplay_val = data.get('ChallengeDisplay', 0)
    LimitedStageExcel.Start(builder)
    LimitedStageExcel.AddId(builder, Id_val)
    LimitedStageExcel.AddName(builder, Name_off)
    LimitedStageExcel.AddSeasonId(builder, SeasonId_val)
    LimitedStageExcel.AddStageDifficulty(builder, StageDifficulty_val)
    LimitedStageExcel.AddStageNumber(builder, StageNumber_off)
    LimitedStageExcel.AddStageDisplay(builder, StageDisplay_val)
    LimitedStageExcel.AddPrevStageId(builder, PrevStageId_val)
    LimitedStageExcel.AddOpenDate(builder, OpenDate_val)
    LimitedStageExcel.AddOpenEventPoint(builder, OpenEventPoint_val)
    LimitedStageExcel.AddBattleDuration(builder, BattleDuration_val)
    LimitedStageExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    LimitedStageExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    LimitedStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    LimitedStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount_val)
    LimitedStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount_val)
    LimitedStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount_val)
    LimitedStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_vec)
    LimitedStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_vec)
    LimitedStageExcel.AddStrategyMap(builder, StrategyMap_off)
    LimitedStageExcel.AddStrategyMapBG(builder, StrategyMapBG_off)
    LimitedStageExcel.AddStageRewardId(builder, StageRewardId_val)
    LimitedStageExcel.AddMaxTurn(builder, MaxTurn_val)
    LimitedStageExcel.AddStageTopography(builder, StageTopography_val)
    LimitedStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    LimitedStageExcel.AddBgmId(builder, BgmId_off)
    LimitedStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment_val)
    LimitedStageExcel.AddGroundID(builder, GroundID_val)
    LimitedStageExcel.AddContentType(builder, ContentType_val)
    LimitedStageExcel.AddBGMId(builder, BGMId_val)
    LimitedStageExcel.AddInstantClear(builder, InstantClear_val)
    LimitedStageExcel.AddBuffContentId(builder, BuffContentId_val)
    LimitedStageExcel.AddChallengeDisplay(builder, ChallengeDisplay_val)
    return LimitedStageExcel.End(builder)

def pack_LimitedStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LimitedStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    LimitedStageRewardExcel.Start(builder)
    LimitedStageRewardExcel.AddGroupId(builder, GroupId_val)
    LimitedStageRewardExcel.AddRewardTag(builder, RewardTag_val)
    LimitedStageRewardExcel.AddRewardProb(builder, RewardProb_val)
    LimitedStageRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    LimitedStageRewardExcel.AddRewardId(builder, RewardId_val)
    LimitedStageRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    LimitedStageRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return LimitedStageRewardExcel.End(builder)

def pack_LimitedStageSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LimitedStageSeason") if encrypt else None
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    TypeACount_val = convert_long(data.get('TypeACount', 0), password)
    TypeBCount_val = convert_long(data.get('TypeBCount', 0), password)
    TypeCCount_val = convert_long(data.get('TypeCCount', 0), password)
    LimitedStageSeasonExcel.Start(builder)
    LimitedStageSeasonExcel.AddId(builder, Id_val)
    LimitedStageSeasonExcel.AddStartDate(builder, StartDate_off)
    LimitedStageSeasonExcel.AddEndDate(builder, EndDate_off)
    LimitedStageSeasonExcel.AddTypeACount(builder, TypeACount_val)
    LimitedStageSeasonExcel.AddTypeBCount(builder, TypeBCount_val)
    LimitedStageSeasonExcel.AddTypeCCount(builder, TypeCCount_val)
    return LimitedStageSeasonExcel.End(builder)

def pack_LocalizeCCGExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeCCG") if encrypt else None
    Kr_off = builder.CreateString(encrypt_string(data.get('Kr', ''), password))
    Jp_off = builder.CreateString(encrypt_string(data.get('Jp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeCCGExcel.Start(builder)
    LocalizeCCGExcel.AddKey(builder, Key_val)
    LocalizeCCGExcel.AddKr(builder, Kr_off)
    LocalizeCCGExcel.AddJp(builder, Jp_off)
    return LocalizeCCGExcel.End(builder)

def pack_LocalizeFieldExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeField") if encrypt else None
    Kr_off = builder.CreateString(encrypt_string(data.get('Kr', ''), password))
    Jp_off = builder.CreateString(encrypt_string(data.get('Jp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeFieldExcel.Start(builder)
    LocalizeFieldExcel.AddKey(builder, Key_val)
    LocalizeFieldExcel.AddKr(builder, Kr_off)
    LocalizeFieldExcel.AddJp(builder, Jp_off)
    return LocalizeFieldExcel.End(builder)

def pack_MinigameCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCard") if encrypt else None
    None_vec = 0
    if 'None' in data:
        None_items = data['None']
        MinigameCardExcel.StartNoneVector(builder, len(None_items))
        for item in reversed(None_items):
            builder.PrependInt32(convert_int(getattr(CCGCharacterType, item), password))
        None_vec = builder.EndVector(len(None_items))
    MinigameCardExcel.Start(builder)
    MinigameCardExcel.AddNone(builder, None_vec)
    return MinigameCardExcel.End(builder)

def pack_MinigameRoadExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameRoad") if encrypt else None
    None_vec = 0
    if 'None' in data:
        None_items = data['None']
        MinigameRoadExcel.StartNoneVector(builder, len(None_items))
        for item in reversed(None_items):
            builder.PrependInt32(convert_int(getattr(RoadPuzzleMapTileType, item), password))
        None_vec = builder.EndVector(len(None_items))
    MinigameRoadExcel.Start(builder)
    MinigameRoadExcel.AddNone(builder, None_vec)
    return MinigameRoadExcel.End(builder)

def pack_NormalSkillTemplateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("NormalSkillTemplate") if encrypt else None
    Index_val = convert_long(data.get('Index', 0), password)
    FirstCoolTime_val = encrypt_float(data.get('FirstCoolTime', 0), password)
    CoolTime_val = encrypt_float(data.get('CoolTime', 0), password)
    MultiAni_val = data.get('MultiAni', 0)
    NormalSkillTemplateExcel.Start(builder)
    NormalSkillTemplateExcel.AddIndex(builder, Index_val)
    NormalSkillTemplateExcel.AddFirstCoolTime(builder, FirstCoolTime_val)
    NormalSkillTemplateExcel.AddCoolTime(builder, CoolTime_val)
    NormalSkillTemplateExcel.AddMultiAni(builder, MultiAni_val)
    return NormalSkillTemplateExcel.End(builder)

def pack_ObstacleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Obstacle") if encrypt else None
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    SubOffset_vec = 0
    if 'SubOffset' in data:
        SubOffset_items = data['SubOffset']
        ObstacleExcel.StartSubOffsetVector(builder, len(SubOffset_items))
        for item in reversed(SubOffset_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SubOffset_vec = builder.EndVector(len(SubOffset_items))
    Point1Offeset_vec = 0
    if 'Point1Offeset' in data:
        Point1Offeset_items = data['Point1Offeset']
        ObstacleExcel.StartPoint1OffesetVector(builder, len(Point1Offeset_items))
        for item in reversed(Point1Offeset_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Point1Offeset_vec = builder.EndVector(len(Point1Offeset_items))
    EnemyPoint1Osset_vec = 0
    if 'EnemyPoint1Osset' in data:
        EnemyPoint1Osset_items = data['EnemyPoint1Osset']
        ObstacleExcel.StartEnemyPoint1OssetVector(builder, len(EnemyPoint1Osset_items))
        for item in reversed(EnemyPoint1Osset_items):
            builder.PrependFloat32(encrypt_float(item, password))
        EnemyPoint1Osset_vec = builder.EndVector(len(EnemyPoint1Osset_items))
    Point2Offeset_vec = 0
    if 'Point2Offeset' in data:
        Point2Offeset_items = data['Point2Offeset']
        ObstacleExcel.StartPoint2OffesetVector(builder, len(Point2Offeset_items))
        for item in reversed(Point2Offeset_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Point2Offeset_vec = builder.EndVector(len(Point2Offeset_items))
    EnemyPoint2Osset_vec = 0
    if 'EnemyPoint2Osset' in data:
        EnemyPoint2Osset_items = data['EnemyPoint2Osset']
        ObstacleExcel.StartEnemyPoint2OssetVector(builder, len(EnemyPoint2Osset_items))
        for item in reversed(EnemyPoint2Osset_items):
            builder.PrependFloat32(encrypt_float(item, password))
        EnemyPoint2Osset_vec = builder.EndVector(len(EnemyPoint2Osset_items))
    SubObstacleID_vec = 0
    if 'SubObstacleID' in data:
        SubObstacleID_items = data['SubObstacleID']
        ObstacleExcel.StartSubObstacleIDVector(builder, len(SubObstacleID_items))
        for item in reversed(SubObstacleID_items):
            builder.PrependInt64(convert_long(item, password))
        SubObstacleID_vec = builder.EndVector(len(SubObstacleID_items))
    Index_val = convert_long(data.get('Index', 0), password)
    JumpAble_val = data.get('JumpAble', 0)
    X_val = encrypt_float(data.get('X', 0), password)
    Z_val = encrypt_float(data.get('Z', 0), password)
    Hp_val = convert_long(data.get('Hp', 0), password)
    MaxHp_val = convert_long(data.get('MaxHp', 0), password)
    BlockRate_val = convert_int(data.get('BlockRate', 0), password)
    EvasionRate_val = convert_int(data.get('EvasionRate', 0), password)
    DestroyType_val = convert_int(getattr(ObstacleDestroyType, data.get('DestroyType', 0)), password)
    ObstacleExcel.Start(builder)
    ObstacleExcel.AddIndex(builder, Index_val)
    ObstacleExcel.AddPrefabName(builder, PrefabName_off)
    ObstacleExcel.AddJumpAble(builder, JumpAble_val)
    ObstacleExcel.AddSubOffset(builder, SubOffset_vec)
    ObstacleExcel.AddX(builder, X_val)
    ObstacleExcel.AddZ(builder, Z_val)
    ObstacleExcel.AddHp(builder, Hp_val)
    ObstacleExcel.AddMaxHp(builder, MaxHp_val)
    ObstacleExcel.AddBlockRate(builder, BlockRate_val)
    ObstacleExcel.AddEvasionRate(builder, EvasionRate_val)
    ObstacleExcel.AddDestroyType(builder, DestroyType_val)
    ObstacleExcel.AddPoint1Offeset(builder, Point1Offeset_vec)
    ObstacleExcel.AddEnemyPoint1Osset(builder, EnemyPoint1Osset_vec)
    ObstacleExcel.AddPoint2Offeset(builder, Point2Offeset_vec)
    ObstacleExcel.AddEnemyPoint2Osset(builder, EnemyPoint2Osset_vec)
    ObstacleExcel.AddSubObstacleID(builder, SubObstacleID_vec)
    return ObstacleExcel.End(builder)

def pack_PropVector3(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PropVector3") if encrypt else None
    X_val = encrypt_float(data.get('X', 0), password)
    Y_val = encrypt_float(data.get('Y', 0), password)
    Z_val = encrypt_float(data.get('Z', 0), password)
    PropVector3.Start(builder)
    PropVector3.AddX(builder, X_val)
    PropVector3.AddY(builder, Y_val)
    PropVector3.AddZ(builder, Z_val)
    return PropVector3.End(builder)

def pack_PropMotion(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PropMotion") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    Positions_vec = 0
    if 'Positions' in data:
        Positions_items = data['Positions']
        Positions_vec = builder.EndVector(len(Positions_items))
    Rotations_vec = 0
    if 'Rotations' in data:
        Rotations_items = data['Rotations']
        Rotations_vec = builder.EndVector(len(Rotations_items))
    PropMotion.Start(builder)
    PropMotion.AddName(builder, Name_off)
    PropMotion.AddPositions(builder, Positions_vec)
    PropMotion.AddRotations(builder, Rotations_vec)
    return PropMotion.End(builder)

def pack_PropRootMotionFlat(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PropRootMotionFlat") if encrypt else None
    RootMotions_vec = 0
    if 'RootMotions' in data:
        RootMotions_items = data['RootMotions']
        RootMotions_vec = builder.EndVector(len(RootMotions_items))
    PropRootMotionFlat.Start(builder)
    PropRootMotionFlat.AddRootMotions(builder, RootMotions_vec)
    return PropRootMotionFlat.End(builder)

def pack_ProtocolSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ProtocolSetting") if encrypt else None
    Protocol_off = builder.CreateString(encrypt_string(data.get('Protocol', ''), password))
    OpenConditionContent_val = convert_int(getattr(OpenConditionContent, data.get('OpenConditionContent', 0)), password)
    Currency_val = data.get('Currency', 0)
    Inventory_val = data.get('Inventory', 0)
    Mail_val = data.get('Mail', 0)
    ProtocolSettingExcel.Start(builder)
    ProtocolSettingExcel.AddProtocol(builder, Protocol_off)
    ProtocolSettingExcel.AddOpenConditionContent(builder, OpenConditionContent_val)
    ProtocolSettingExcel.AddCurrency(builder, Currency_val)
    ProtocolSettingExcel.AddInventory(builder, Inventory_val)
    ProtocolSettingExcel.AddMail(builder, Mail_val)
    return ProtocolSettingExcel.End(builder)

def pack_RecipeCraftExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RecipeCraft") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    RecipeIngredientDevName_off = builder.CreateString(encrypt_string(data.get('RecipeIngredientDevName', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        RecipeCraftExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        RecipeCraftExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelDevName_vec = 0
    if 'ParcelDevName' in data:
        ParcelDevName_items = data['ParcelDevName']
        ParcelDevName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ParcelDevName_items]
        RecipeCraftExcel.StartParcelDevNameVector(builder, len(ParcelDevName_str_offsets))
        for offset in reversed(ParcelDevName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ParcelDevName_vec = builder.EndVector(len(ParcelDevName_items))
    ResultAmountMin_vec = 0
    if 'ResultAmountMin' in data:
        ResultAmountMin_items = data['ResultAmountMin']
        RecipeCraftExcel.StartResultAmountMinVector(builder, len(ResultAmountMin_items))
        for item in reversed(ResultAmountMin_items):
            builder.PrependInt64(convert_long(item, password))
        ResultAmountMin_vec = builder.EndVector(len(ResultAmountMin_items))
    ResultAmountMax_vec = 0
    if 'ResultAmountMax' in data:
        ResultAmountMax_items = data['ResultAmountMax']
        RecipeCraftExcel.StartResultAmountMaxVector(builder, len(ResultAmountMax_items))
        for item in reversed(ResultAmountMax_items):
            builder.PrependInt64(convert_long(item, password))
        ResultAmountMax_vec = builder.EndVector(len(ResultAmountMax_items))
    Id_val = convert_long(data.get('Id', 0), password)
    RecipeType_val = convert_int(getattr(RecipeType, data.get('RecipeType', 0)), password)
    RecipeIngredientId_val = convert_long(data.get('RecipeIngredientId', 0), password)
    RecipeCraftExcel.Start(builder)
    RecipeCraftExcel.AddId(builder, Id_val)
    RecipeCraftExcel.AddDevName(builder, DevName_off)
    RecipeCraftExcel.AddRecipeType(builder, RecipeType_val)
    RecipeCraftExcel.AddRecipeIngredientId(builder, RecipeIngredientId_val)
    RecipeCraftExcel.AddRecipeIngredientDevName(builder, RecipeIngredientDevName_off)
    RecipeCraftExcel.AddParcelType(builder, ParcelType_vec)
    RecipeCraftExcel.AddParcelId(builder, ParcelId_vec)
    RecipeCraftExcel.AddParcelDevName(builder, ParcelDevName_vec)
    RecipeCraftExcel.AddResultAmountMin(builder, ResultAmountMin_vec)
    RecipeCraftExcel.AddResultAmountMax(builder, ResultAmountMax_vec)
    return RecipeCraftExcel.End(builder)

def pack_Position(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Position") if encrypt else None
    X_val = encrypt_float(data.get('X', 0), password)
    Z_val = encrypt_float(data.get('Z', 0), password)
    Position.Start(builder)
    Position.AddX(builder, X_val)
    Position.AddZ(builder, Z_val)
    return Position.End(builder)

def pack_Motion(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Motion") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    Positions_vec = 0
    if 'Positions' in data:
        Positions_items = data['Positions']
        Positions_vec = builder.EndVector(len(Positions_items))
    Motion.Start(builder)
    Motion.AddName(builder, Name_off)
    Motion.AddPositions(builder, Positions_vec)
    return Motion.End(builder)

def pack_MoveEnd(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MoveEnd") if encrypt else None
    Normal_val = convert_int(data.get('Normal', 0), password)
    Stand_val = convert_int(data.get('Stand', 0), password)
    Kneel_val = convert_int(data.get('Kneel', 0), password)
    MoveEnd.Start(builder)
    MoveEnd.AddNormal(builder, Normal_val)
    MoveEnd.AddStand(builder, Stand_val)
    MoveEnd.AddKneel(builder, Kneel_val)
    return MoveEnd.End(builder)

def pack_Form(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Form") if encrypt else None
    MoveEnd_val = convert_int(data.get('MoveEnd', 0), password)
    PublicSkill_val = convert_int(data.get('PublicSkill', 0), password)
    Form.Start(builder)
    Form.AddMoveEnd(builder, MoveEnd_val)
    Form.AddPublicSkill(builder, PublicSkill_val)
    return Form.End(builder)

def pack_RootMotionFlat(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RootMotionFlat") if encrypt else None
    Forms_vec = 0
    if 'Forms' in data:
        Forms_items = data['Forms']
        Forms_vec = builder.EndVector(len(Forms_items))
    ExSkills_vec = 0
    if 'ExSkills' in data:
        ExSkills_items = data['ExSkills']
        ExSkills_vec = builder.EndVector(len(ExSkills_items))
    MoveLeft_val = convert_int(data.get('MoveLeft', 0), password)
    MoveRight_val = convert_int(data.get('MoveRight', 0), password)
    RootMotionFlat.Start(builder)
    RootMotionFlat.AddForms(builder, Forms_vec)
    RootMotionFlat.AddExSkills(builder, ExSkills_vec)
    RootMotionFlat.AddMoveLeft(builder, MoveLeft_val)
    RootMotionFlat.AddMoveRight(builder, MoveRight_val)
    return RootMotionFlat.End(builder)

def pack_ScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Scenario") if encrypt else None
    None_vec = 0
    if 'None' in data:
        None_items = data['None']
        ScenarioExcel.StartNoneVector(builder, len(None_items))
        for item in reversed(None_items):
            builder.PrependInt32(convert_int(getattr(ScenarioBGType, item), password))
        None_vec = builder.EndVector(len(None_items))
    Idle_vec = 0
    if 'Idle' in data:
        Idle_items = data['Idle']
        ScenarioExcel.StartIdleVector(builder, len(Idle_items))
        for item in reversed(Idle_items):
            builder.PrependInt32(convert_int(getattr(ScenarioCharacterAction, item), password))
        Idle_vec = builder.EndVector(len(Idle_items))
    Cafe_val = convert_int(getattr(DialogCategory, data.get('Cafe', 0)), password)
    Talk_val = convert_int(getattr(DialogType, data.get('Talk', 0)), password)
    Open_val = convert_int(getattr(StoryCondition, data.get('Open', 0)), password)
    EnterConver_val = convert_int(getattr(EmojiEvent, data.get('EnterConver', 0)), password)
    Center_val = convert_int(getattr(ScenarioZoomAnchors, data.get('Center', 0)), password)
    Instant_val = convert_int(getattr(ScenarioZoomType, data.get('Instant', 0)), password)
    Prologue_val = convert_int(getattr(ScenarioContentType, data.get('Prologue', 0)), password)
    ScenarioExcel.Start(builder)
    ScenarioExcel.AddNone(builder, None_vec)
    ScenarioExcel.AddIdle(builder, Idle_vec)
    ScenarioExcel.AddCafe(builder, Cafe_val)
    ScenarioExcel.AddTalk(builder, Talk_val)
    ScenarioExcel.AddOpen(builder, Open_val)
    ScenarioExcel.AddEnterConver(builder, EnterConver_val)
    ScenarioExcel.AddCenter(builder, Center_val)
    ScenarioExcel.AddInstant(builder, Instant_val)
    ScenarioExcel.AddPrologue(builder, Prologue_val)
    return ScenarioExcel.End(builder)

def pack_ScenarioReplayExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioReplay") if encrypt else None
    FrontScenarioGroupId_vec = 0
    if 'FrontScenarioGroupId' in data:
        FrontScenarioGroupId_items = data['FrontScenarioGroupId']
        ScenarioReplayExcel.StartFrontScenarioGroupIdVector(builder, len(FrontScenarioGroupId_items))
        for item in reversed(FrontScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        FrontScenarioGroupId_vec = builder.EndVector(len(FrontScenarioGroupId_items))
    BackScenarioGroupId_vec = 0
    if 'BackScenarioGroupId' in data:
        BackScenarioGroupId_items = data['BackScenarioGroupId']
        ScenarioReplayExcel.StartBackScenarioGroupIdVector(builder, len(BackScenarioGroupId_items))
        for item in reversed(BackScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        BackScenarioGroupId_vec = builder.EndVector(len(BackScenarioGroupId_items))
    ModeId_val = convert_long(data.get('ModeId', 0), password)
    VolumeId_val = convert_long(data.get('VolumeId', 0), password)
    ReplayType_val = convert_int(getattr(ScenarioModeReplayTypes, data.get('ReplayType', 0)), password)
    ChapterId_val = convert_long(data.get('ChapterId', 0), password)
    EpisodeId_val = convert_long(data.get('EpisodeId', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    ScenarioReplayExcel.Start(builder)
    ScenarioReplayExcel.AddModeId(builder, ModeId_val)
    ScenarioReplayExcel.AddVolumeId(builder, VolumeId_val)
    ScenarioReplayExcel.AddReplayType(builder, ReplayType_val)
    ScenarioReplayExcel.AddChapterId(builder, ChapterId_val)
    ScenarioReplayExcel.AddEpisodeId(builder, EpisodeId_val)
    ScenarioReplayExcel.AddFrontScenarioGroupId(builder, FrontScenarioGroupId_vec)
    ScenarioReplayExcel.AddGroundId(builder, GroundId_val)
    ScenarioReplayExcel.AddBattleDuration(builder, BattleDuration_val)
    ScenarioReplayExcel.AddBackScenarioGroupId(builder, BackScenarioGroupId_vec)
    return ScenarioReplayExcel.End(builder)

def pack_ScenarioScriptField1Excel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioScriptField1") if encrypt else None
    Sound_off = builder.CreateString(encrypt_string(data.get('Sound', ''), password))
    PopupFileName_off = builder.CreateString(encrypt_string(data.get('PopupFileName', ''), password))
    ScriptKr_off = builder.CreateString(encrypt_string(data.get('ScriptKr', ''), password))
    TextJp_off = builder.CreateString(encrypt_string(data.get('TextJp', ''), password))
    VoiceJp_off = builder.CreateString(encrypt_string(data.get('VoiceJp', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    SelectionGroup_val = convert_long(data.get('SelectionGroup', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    Transition_val = convert_uint(data.get('Transition', 0), password)
    BGName_val = convert_uint(data.get('BGName', 0), password)
    BGEffect_val = convert_uint(data.get('BGEffect', 0), password)
    ScenarioScriptField1Excel.Start(builder)
    ScenarioScriptField1Excel.AddGroupId(builder, GroupId_val)
    ScenarioScriptField1Excel.AddSelectionGroup(builder, SelectionGroup_val)
    ScenarioScriptField1Excel.AddBGMId(builder, BGMId_val)
    ScenarioScriptField1Excel.AddSound(builder, Sound_off)
    ScenarioScriptField1Excel.AddTransition(builder, Transition_val)
    ScenarioScriptField1Excel.AddBGName(builder, BGName_val)
    ScenarioScriptField1Excel.AddBGEffect(builder, BGEffect_val)
    ScenarioScriptField1Excel.AddPopupFileName(builder, PopupFileName_off)
    ScenarioScriptField1Excel.AddScriptKr(builder, ScriptKr_off)
    ScenarioScriptField1Excel.AddTextJp(builder, TextJp_off)
    ScenarioScriptField1Excel.AddVoiceJp(builder, VoiceJp_off)
    return ScenarioScriptField1Excel.End(builder)

def pack_SpecialLobbyIllustExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SpecialLobbyIllust") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    SlotTextureName_off = builder.CreateString(encrypt_string(data.get('SlotTextureName', ''), password))
    RewardTextureName_off = builder.CreateString(encrypt_string(data.get('RewardTextureName', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    CharacterCostumeUniqueId_val = convert_long(data.get('CharacterCostumeUniqueId', 0), password)
    SpecialLobbyIllustExcel.Start(builder)
    SpecialLobbyIllustExcel.AddUniqueId(builder, UniqueId_val)
    SpecialLobbyIllustExcel.AddDevName(builder, DevName_off)
    SpecialLobbyIllustExcel.AddCharacterCostumeUniqueId(builder, CharacterCostumeUniqueId_val)
    SpecialLobbyIllustExcel.AddPrefabName(builder, PrefabName_off)
    SpecialLobbyIllustExcel.AddSlotTextureName(builder, SlotTextureName_off)
    SpecialLobbyIllustExcel.AddRewardTextureName(builder, RewardTextureName_off)
    return SpecialLobbyIllustExcel.End(builder)

def pack_StringTestExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StringTest") if encrypt else None
    Sentence1_off = builder.CreateString(encrypt_string(data.get('Sentence1', ''), password))
    Script_off = builder.CreateString(encrypt_string(data.get('Script', ''), password))
    String_vec = 0
    if 'String' in data:
        String_items = data['String']
        String_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in String_items]
        StringTestExcel.StartStringVector(builder, len(String_str_offsets))
        for offset in reversed(String_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        String_vec = builder.EndVector(len(String_items))
    StringTestExcel.Start(builder)
    StringTestExcel.AddString(builder, String_vec)
    StringTestExcel.AddSentence1(builder, Sentence1_off)
    StringTestExcel.AddScript(builder, Script_off)
    return StringTestExcel.End(builder)

def pack_SystemMailExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SystemMail") if encrypt else None
    Sender_off = builder.CreateString(encrypt_string(data.get('Sender', ''), password))
    Comment_off = builder.CreateString(encrypt_string(data.get('Comment', ''), password))
    MailType_val = convert_int(getattr(MailType, data.get('MailType', 0)), password)
    ExpiredDay_val = convert_long(data.get('ExpiredDay', 0), password)
    SystemMailExcel.Start(builder)
    SystemMailExcel.AddMailType(builder, MailType_val)
    SystemMailExcel.AddExpiredDay(builder, ExpiredDay_val)
    SystemMailExcel.AddSender(builder, Sender_off)
    SystemMailExcel.AddComment(builder, Comment_off)
    return SystemMailExcel.End(builder)

def pack_TacticArenaSimulatorSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticArenaSimulatorSetting") if encrypt else None
    Order_val = convert_long(data.get('Order', 0), password)
    Repeat_val = convert_long(data.get('Repeat', 0), password)
    AttackerFrom_val = convert_int(getattr(ArenaSimulatorServer, data.get('AttackerFrom', 0)), password)
    AttackerUserArenaGroup_val = convert_long(data.get('AttackerUserArenaGroup', 0), password)
    AttackerUserArenaRank_val = convert_long(data.get('AttackerUserArenaRank', 0), password)
    AttackerPresetGroupId_val = convert_long(data.get('AttackerPresetGroupId', 0), password)
    AttackerStrikerNum_val = convert_long(data.get('AttackerStrikerNum', 0), password)
    AttackerSpecialNum_val = convert_long(data.get('AttackerSpecialNum', 0), password)
    DefenderFrom_val = convert_int(getattr(ArenaSimulatorServer, data.get('DefenderFrom', 0)), password)
    DefenderUserArenaGroup_val = convert_long(data.get('DefenderUserArenaGroup', 0), password)
    DefenderUserArenaRank_val = convert_long(data.get('DefenderUserArenaRank', 0), password)
    DefenderPresetGroupId_val = convert_long(data.get('DefenderPresetGroupId', 0), password)
    DefenderStrikerNum_val = convert_long(data.get('DefenderStrikerNum', 0), password)
    DefenderSpecialNum_val = convert_long(data.get('DefenderSpecialNum', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    TacticArenaSimulatorSettingExcel.Start(builder)
    TacticArenaSimulatorSettingExcel.AddOrder(builder, Order_val)
    TacticArenaSimulatorSettingExcel.AddRepeat(builder, Repeat_val)
    TacticArenaSimulatorSettingExcel.AddAttackerFrom(builder, AttackerFrom_val)
    TacticArenaSimulatorSettingExcel.AddAttackerUserArenaGroup(builder, AttackerUserArenaGroup_val)
    TacticArenaSimulatorSettingExcel.AddAttackerUserArenaRank(builder, AttackerUserArenaRank_val)
    TacticArenaSimulatorSettingExcel.AddAttackerPresetGroupId(builder, AttackerPresetGroupId_val)
    TacticArenaSimulatorSettingExcel.AddAttackerStrikerNum(builder, AttackerStrikerNum_val)
    TacticArenaSimulatorSettingExcel.AddAttackerSpecialNum(builder, AttackerSpecialNum_val)
    TacticArenaSimulatorSettingExcel.AddDefenderFrom(builder, DefenderFrom_val)
    TacticArenaSimulatorSettingExcel.AddDefenderUserArenaGroup(builder, DefenderUserArenaGroup_val)
    TacticArenaSimulatorSettingExcel.AddDefenderUserArenaRank(builder, DefenderUserArenaRank_val)
    TacticArenaSimulatorSettingExcel.AddDefenderPresetGroupId(builder, DefenderPresetGroupId_val)
    TacticArenaSimulatorSettingExcel.AddDefenderStrikerNum(builder, DefenderStrikerNum_val)
    TacticArenaSimulatorSettingExcel.AddDefenderSpecialNum(builder, DefenderSpecialNum_val)
    TacticArenaSimulatorSettingExcel.AddGroundId(builder, GroundId_val)
    return TacticArenaSimulatorSettingExcel.End(builder)

def pack_TacticDamageSimulatorSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticDamageSimulatorSetting") if encrypt else None
    FixedCharacter_vec = 0
    if 'FixedCharacter' in data:
        FixedCharacter_items = data['FixedCharacter']
        TacticDamageSimulatorSettingExcel.StartFixedCharacterVector(builder, len(FixedCharacter_items))
        for item in reversed(FixedCharacter_items):
            builder.PrependInt64(convert_long(item, password))
        FixedCharacter_vec = builder.EndVector(len(FixedCharacter_items))
    Order_val = convert_int(data.get('Order', 0), password)
    Repeat_val = convert_int(data.get('Repeat', 0), password)
    TestPreset_val = convert_long(data.get('TestPreset', 0), password)
    TestBattleTime_val = convert_long(data.get('TestBattleTime', 0), password)
    StrikerSquard_val = convert_long(data.get('StrikerSquard', 0), password)
    SpecialSquard_val = convert_long(data.get('SpecialSquard', 0), password)
    ReplaceCharacterCostRegen_val = data.get('ReplaceCharacterCostRegen', 0)
    ReplaceCostRegenValue_val = convert_int(data.get('ReplaceCostRegenValue', 0), password)
    UseAutoSkill_val = data.get('UseAutoSkill', 0)
    OverrideStreetAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('OverrideStreetAdaptation', 0)), password)
    OverrideOutdoorAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('OverrideOutdoorAdaptation', 0)), password)
    OverrideIndoorAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('OverrideIndoorAdaptation', 0)), password)
    ApplyOverrideAdaptation_val = data.get('ApplyOverrideAdaptation', 0)
    OverrideFavorLevel_val = convert_int(data.get('OverrideFavorLevel', 0), password)
    ApplyOverrideFavorLevel_val = data.get('ApplyOverrideFavorLevel', 0)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    TacticDamageSimulatorSettingExcel.Start(builder)
    TacticDamageSimulatorSettingExcel.AddOrder(builder, Order_val)
    TacticDamageSimulatorSettingExcel.AddRepeat(builder, Repeat_val)
    TacticDamageSimulatorSettingExcel.AddTestPreset(builder, TestPreset_val)
    TacticDamageSimulatorSettingExcel.AddTestBattleTime(builder, TestBattleTime_val)
    TacticDamageSimulatorSettingExcel.AddStrikerSquard(builder, StrikerSquard_val)
    TacticDamageSimulatorSettingExcel.AddSpecialSquard(builder, SpecialSquard_val)
    TacticDamageSimulatorSettingExcel.AddReplaceCharacterCostRegen(builder, ReplaceCharacterCostRegen_val)
    TacticDamageSimulatorSettingExcel.AddReplaceCostRegenValue(builder, ReplaceCostRegenValue_val)
    TacticDamageSimulatorSettingExcel.AddUseAutoSkill(builder, UseAutoSkill_val)
    TacticDamageSimulatorSettingExcel.AddOverrideStreetAdaptation(builder, OverrideStreetAdaptation_val)
    TacticDamageSimulatorSettingExcel.AddOverrideOutdoorAdaptation(builder, OverrideOutdoorAdaptation_val)
    TacticDamageSimulatorSettingExcel.AddOverrideIndoorAdaptation(builder, OverrideIndoorAdaptation_val)
    TacticDamageSimulatorSettingExcel.AddApplyOverrideAdaptation(builder, ApplyOverrideAdaptation_val)
    TacticDamageSimulatorSettingExcel.AddOverrideFavorLevel(builder, OverrideFavorLevel_val)
    TacticDamageSimulatorSettingExcel.AddApplyOverrideFavorLevel(builder, ApplyOverrideFavorLevel_val)
    TacticDamageSimulatorSettingExcel.AddGroundId(builder, GroundId_val)
    TacticDamageSimulatorSettingExcel.AddFixedCharacter(builder, FixedCharacter_vec)
    return TacticDamageSimulatorSettingExcel.End(builder)

def pack_TacticSimulatorSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticSimulatorSetting") if encrypt else None
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    TacticSimulatorSettingExcel.Start(builder)
    TacticSimulatorSettingExcel.AddGroundId(builder, GroundId_val)
    TacticSimulatorSettingExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    return TacticSimulatorSettingExcel.End(builder)

def pack_TacticTimeAttackSimulatorConfigExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticTimeAttackSimulatorConfig") if encrypt else None
    Order_val = convert_long(data.get('Order', 0), password)
    Repeat_val = convert_long(data.get('Repeat', 0), password)
    PresetGroupId_val = convert_long(data.get('PresetGroupId', 0), password)
    AttackStrikerNum_val = convert_long(data.get('AttackStrikerNum', 0), password)
    AttackSpecialNum_val = convert_long(data.get('AttackSpecialNum', 0), password)
    GeasId_val = convert_long(data.get('GeasId', 0), password)
    TacticTimeAttackSimulatorConfigExcel.Start(builder)
    TacticTimeAttackSimulatorConfigExcel.AddOrder(builder, Order_val)
    TacticTimeAttackSimulatorConfigExcel.AddRepeat(builder, Repeat_val)
    TacticTimeAttackSimulatorConfigExcel.AddPresetGroupId(builder, PresetGroupId_val)
    TacticTimeAttackSimulatorConfigExcel.AddAttackStrikerNum(builder, AttackStrikerNum_val)
    TacticTimeAttackSimulatorConfigExcel.AddAttackSpecialNum(builder, AttackSpecialNum_val)
    TacticTimeAttackSimulatorConfigExcel.AddGeasId(builder, GeasId_val)
    return TacticTimeAttackSimulatorConfigExcel.End(builder)

def pack_TagExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Tag") if encrypt else None
    Furniture_val = convert_int(getattr(Tag, data.get('Furniture', 0)), password)
    None_val = convert_int(getattr(Club, data.get('None', 0)), password)
    TagExcel.Start(builder)
    TagExcel.AddFurniture(builder, Furniture_val)
    TagExcel.AddNone(builder, None_val)
    return TagExcel.End(builder)

def pack_TranscendenceRecipeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TranscendenceRecipe") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        TranscendenceRecipeExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        TranscendenceRecipeExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        TranscendenceRecipeExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt32(convert_int(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CostCurrencyType_val = convert_int(getattr(CurrencyTypes, data.get('CostCurrencyType', 0)), password)
    CostCurrencyAmount_val = convert_long(data.get('CostCurrencyAmount', 0), password)
    TranscendenceRecipeExcel.Start(builder)
    TranscendenceRecipeExcel.AddId(builder, Id_val)
    TranscendenceRecipeExcel.AddDevName(builder, DevName_off)
    TranscendenceRecipeExcel.AddCostCurrencyType(builder, CostCurrencyType_val)
    TranscendenceRecipeExcel.AddCostCurrencyAmount(builder, CostCurrencyAmount_val)
    TranscendenceRecipeExcel.AddParcelType(builder, ParcelType_vec)
    TranscendenceRecipeExcel.AddParcelId(builder, ParcelId_vec)
    TranscendenceRecipeExcel.AddParcelAmount(builder, ParcelAmount_vec)
    return TranscendenceRecipeExcel.End(builder)

def pack_WeekDungeonFindGiftRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WeekDungeonFindGiftReward") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        WeekDungeonFindGiftRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        WeekDungeonFindGiftRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        WeekDungeonFindGiftRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    RewardParcelProbability_vec = 0
    if 'RewardParcelProbability' in data:
        RewardParcelProbability_items = data['RewardParcelProbability']
        WeekDungeonFindGiftRewardExcel.StartRewardParcelProbabilityVector(builder, len(RewardParcelProbability_items))
        for item in reversed(RewardParcelProbability_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelProbability_vec = builder.EndVector(len(RewardParcelProbability_items))
    DropItemModelPrefabPath_vec = 0
    if 'DropItemModelPrefabPath' in data:
        DropItemModelPrefabPath_items = data['DropItemModelPrefabPath']
        DropItemModelPrefabPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in DropItemModelPrefabPath_items]
        WeekDungeonFindGiftRewardExcel.StartDropItemModelPrefabPathVector(builder, len(DropItemModelPrefabPath_str_offsets))
        for offset in reversed(DropItemModelPrefabPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        DropItemModelPrefabPath_vec = builder.EndVector(len(DropItemModelPrefabPath_items))
    StageRewardId_val = convert_long(data.get('StageRewardId', 0), password)
    WeekDungeonFindGiftRewardExcel.Start(builder)
    WeekDungeonFindGiftRewardExcel.AddStageRewardId(builder, StageRewardId_val)
    WeekDungeonFindGiftRewardExcel.AddDevName(builder, DevName_off)
    WeekDungeonFindGiftRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    WeekDungeonFindGiftRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    WeekDungeonFindGiftRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    WeekDungeonFindGiftRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability_vec)
    WeekDungeonFindGiftRewardExcel.AddDropItemModelPrefabPath(builder, DropItemModelPrefabPath_vec)
    return WeekDungeonFindGiftRewardExcel.End(builder)

def pack_AcademyFavorScheduleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyFavorSchedule") if encrypt else None
    Location_off = builder.CreateString(encrypt_string(data.get('Location', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        AcademyFavorScheduleExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        AcademyFavorScheduleExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        AcademyFavorScheduleExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    ScheduleGroupId_val = convert_long(data.get('ScheduleGroupId', 0), password)
    OrderInGroup_val = convert_long(data.get('OrderInGroup', 0), password)
    LocalizeScenarioId_val = convert_uint(data.get('LocalizeScenarioId', 0), password)
    FavorRank_val = convert_long(data.get('FavorRank', 0), password)
    SecretStoneAmount_val = convert_long(data.get('SecretStoneAmount', 0), password)
    ScenarioSriptGroupId_val = convert_long(data.get('ScenarioSriptGroupId', 0), password)
    AcademyFavorScheduleExcel.Start(builder)
    AcademyFavorScheduleExcel.AddId(builder, Id_val)
    AcademyFavorScheduleExcel.AddCharacterId(builder, CharacterId_val)
    AcademyFavorScheduleExcel.AddScheduleGroupId(builder, ScheduleGroupId_val)
    AcademyFavorScheduleExcel.AddOrderInGroup(builder, OrderInGroup_val)
    AcademyFavorScheduleExcel.AddLocation(builder, Location_off)
    AcademyFavorScheduleExcel.AddLocalizeScenarioId(builder, LocalizeScenarioId_val)
    AcademyFavorScheduleExcel.AddFavorRank(builder, FavorRank_val)
    AcademyFavorScheduleExcel.AddSecretStoneAmount(builder, SecretStoneAmount_val)
    AcademyFavorScheduleExcel.AddScenarioSriptGroupId(builder, ScenarioSriptGroupId_val)
    AcademyFavorScheduleExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    AcademyFavorScheduleExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    AcademyFavorScheduleExcel.AddRewardAmount(builder, RewardAmount_vec)
    return AcademyFavorScheduleExcel.End(builder)

def pack_AcademyLocationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyLocation") if encrypt else None
    PrefabPath_off = builder.CreateString(encrypt_string(data.get('PrefabPath', ''), password))
    IconImagePath_off = builder.CreateString(encrypt_string(data.get('IconImagePath', ''), password))
    OpenCondition_vec = 0
    if 'OpenCondition' in data:
        OpenCondition_items = data['OpenCondition']
        AcademyLocationExcel.StartOpenConditionVector(builder, len(OpenCondition_items))
        for item in reversed(OpenCondition_items):
            builder.PrependInt32(convert_int(getattr(School, item), password))
        OpenCondition_vec = builder.EndVector(len(OpenCondition_items))
    OpenConditionCount_vec = 0
    if 'OpenConditionCount' in data:
        OpenConditionCount_items = data['OpenConditionCount']
        AcademyLocationExcel.StartOpenConditionCountVector(builder, len(OpenConditionCount_items))
        for item in reversed(OpenConditionCount_items):
            builder.PrependInt64(convert_long(item, password))
        OpenConditionCount_vec = builder.EndVector(len(OpenConditionCount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    OpenTeacherRank_val = convert_long(data.get('OpenTeacherRank', 0), password)
    AcademyLocationExcel.Start(builder)
    AcademyLocationExcel.AddId(builder, Id_val)
    AcademyLocationExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    AcademyLocationExcel.AddPrefabPath(builder, PrefabPath_off)
    AcademyLocationExcel.AddIconImagePath(builder, IconImagePath_off)
    AcademyLocationExcel.AddOpenCondition(builder, OpenCondition_vec)
    AcademyLocationExcel.AddOpenConditionCount(builder, OpenConditionCount_vec)
    AcademyLocationExcel.AddRewardParcelType(builder, RewardParcelType_val)
    AcademyLocationExcel.AddRewardParcelId(builder, RewardParcelId_val)
    AcademyLocationExcel.AddOpenTeacherRank(builder, OpenTeacherRank_val)
    return AcademyLocationExcel.End(builder)

def pack_AcademyLocationRankExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyLocationRank") if encrypt else None
    Rank_val = convert_long(data.get('Rank', 0), password)
    RankExp_val = convert_long(data.get('RankExp', 0), password)
    TotalExp_val = convert_long(data.get('TotalExp', 0), password)
    AcademyLocationRankExcel.Start(builder)
    AcademyLocationRankExcel.AddRank(builder, Rank_val)
    AcademyLocationRankExcel.AddRankExp(builder, RankExp_val)
    AcademyLocationRankExcel.AddTotalExp(builder, TotalExp_val)
    return AcademyLocationRankExcel.End(builder)

def pack_AcademyMessangerExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyMessanger") if encrypt else None
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    MessageKR_off = builder.CreateString(encrypt_string(data.get('MessageKR', ''), password))
    MessageJP_off = builder.CreateString(encrypt_string(data.get('MessageJP', ''), password))
    MessageGroupId_val = convert_long(data.get('MessageGroupId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    MessageCondition_val = convert_int(getattr(AcademyMessageConditions, data.get('MessageCondition', 0)), password)
    ConditionValue_val = convert_long(data.get('ConditionValue', 0), password)
    PreConditionGroupId_val = convert_long(data.get('PreConditionGroupId', 0), password)
    PreConditionFavorScheduleId_val = convert_long(data.get('PreConditionFavorScheduleId', 0), password)
    FavorScheduleId_val = convert_long(data.get('FavorScheduleId', 0), password)
    NextGroupId_val = convert_long(data.get('NextGroupId', 0), password)
    FeedbackTimeMillisec_val = convert_long(data.get('FeedbackTimeMillisec', 0), password)
    MessageType_val = convert_int(getattr(AcademyMessageTypes, data.get('MessageType', 0)), password)
    AcademyMessangerExcel.Start(builder)
    AcademyMessangerExcel.AddMessageGroupId(builder, MessageGroupId_val)
    AcademyMessangerExcel.AddId(builder, Id_val)
    AcademyMessangerExcel.AddCharacterId(builder, CharacterId_val)
    AcademyMessangerExcel.AddMessageCondition(builder, MessageCondition_val)
    AcademyMessangerExcel.AddConditionValue(builder, ConditionValue_val)
    AcademyMessangerExcel.AddPreConditionGroupId(builder, PreConditionGroupId_val)
    AcademyMessangerExcel.AddPreConditionFavorScheduleId(builder, PreConditionFavorScheduleId_val)
    AcademyMessangerExcel.AddFavorScheduleId(builder, FavorScheduleId_val)
    AcademyMessangerExcel.AddNextGroupId(builder, NextGroupId_val)
    AcademyMessangerExcel.AddFeedbackTimeMillisec(builder, FeedbackTimeMillisec_val)
    AcademyMessangerExcel.AddMessageType(builder, MessageType_val)
    AcademyMessangerExcel.AddImagePath(builder, ImagePath_off)
    AcademyMessangerExcel.AddMessageKR(builder, MessageKR_off)
    AcademyMessangerExcel.AddMessageJP(builder, MessageJP_off)
    return AcademyMessangerExcel.End(builder)

def pack_AcademyRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyReward") if encrypt else None
    Location_off = builder.CreateString(encrypt_string(data.get('Location', ''), password))
    ProgressTexture_off = builder.CreateString(encrypt_string(data.get('ProgressTexture', ''), password))
    ExtraRewardParcelType_vec = 0
    if 'ExtraRewardParcelType' in data:
        ExtraRewardParcelType_items = data['ExtraRewardParcelType']
        AcademyRewardExcel.StartExtraRewardParcelTypeVector(builder, len(ExtraRewardParcelType_items))
        for item in reversed(ExtraRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ExtraRewardParcelType_vec = builder.EndVector(len(ExtraRewardParcelType_items))
    ExtraRewardParcelId_vec = 0
    if 'ExtraRewardParcelId' in data:
        ExtraRewardParcelId_items = data['ExtraRewardParcelId']
        AcademyRewardExcel.StartExtraRewardParcelIdVector(builder, len(ExtraRewardParcelId_items))
        for item in reversed(ExtraRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardParcelId_vec = builder.EndVector(len(ExtraRewardParcelId_items))
    ExtraRewardAmount_vec = 0
    if 'ExtraRewardAmount' in data:
        ExtraRewardAmount_items = data['ExtraRewardAmount']
        AcademyRewardExcel.StartExtraRewardAmountVector(builder, len(ExtraRewardAmount_items))
        for item in reversed(ExtraRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardAmount_vec = builder.EndVector(len(ExtraRewardAmount_items))
    ExtraRewardProb_vec = 0
    if 'ExtraRewardProb' in data:
        ExtraRewardProb_items = data['ExtraRewardProb']
        AcademyRewardExcel.StartExtraRewardProbVector(builder, len(ExtraRewardProb_items))
        for item in reversed(ExtraRewardProb_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardProb_vec = builder.EndVector(len(ExtraRewardProb_items))
    IsExtraRewardDisplayed_vec = 0
    if 'IsExtraRewardDisplayed' in data:
        IsExtraRewardDisplayed_items = data['IsExtraRewardDisplayed']
        AcademyRewardExcel.StartIsExtraRewardDisplayedVector(builder, len(IsExtraRewardDisplayed_items))
        for item in reversed(IsExtraRewardDisplayed_items):
            builder.PrependBool(item)
        IsExtraRewardDisplayed_vec = builder.EndVector(len(IsExtraRewardDisplayed_items))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        AcademyRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        AcademyRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        AcademyRewardExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    ScheduleGroupId_val = convert_long(data.get('ScheduleGroupId', 0), password)
    OrderInGroup_val = convert_long(data.get('OrderInGroup', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    LocationRank_val = convert_long(data.get('LocationRank', 0), password)
    FavorExp_val = convert_long(data.get('FavorExp', 0), password)
    SecretStoneAmount_val = convert_long(data.get('SecretStoneAmount', 0), password)
    SecretStoneProb_val = convert_long(data.get('SecretStoneProb', 0), password)
    ExtraFavorExp_val = convert_long(data.get('ExtraFavorExp', 0), password)
    ExtraFavorExpProb_val = convert_long(data.get('ExtraFavorExpProb', 0), password)
    AcademyRewardExcel.Start(builder)
    AcademyRewardExcel.AddLocation(builder, Location_off)
    AcademyRewardExcel.AddScheduleGroupId(builder, ScheduleGroupId_val)
    AcademyRewardExcel.AddOrderInGroup(builder, OrderInGroup_val)
    AcademyRewardExcel.AddId(builder, Id_val)
    AcademyRewardExcel.AddProgressTexture(builder, ProgressTexture_off)
    AcademyRewardExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    AcademyRewardExcel.AddLocationRank(builder, LocationRank_val)
    AcademyRewardExcel.AddFavorExp(builder, FavorExp_val)
    AcademyRewardExcel.AddSecretStoneAmount(builder, SecretStoneAmount_val)
    AcademyRewardExcel.AddSecretStoneProb(builder, SecretStoneProb_val)
    AcademyRewardExcel.AddExtraFavorExp(builder, ExtraFavorExp_val)
    AcademyRewardExcel.AddExtraFavorExpProb(builder, ExtraFavorExpProb_val)
    AcademyRewardExcel.AddExtraRewardParcelType(builder, ExtraRewardParcelType_vec)
    AcademyRewardExcel.AddExtraRewardParcelId(builder, ExtraRewardParcelId_vec)
    AcademyRewardExcel.AddExtraRewardAmount(builder, ExtraRewardAmount_vec)
    AcademyRewardExcel.AddExtraRewardProb(builder, ExtraRewardProb_vec)
    AcademyRewardExcel.AddIsExtraRewardDisplayed(builder, IsExtraRewardDisplayed_vec)
    AcademyRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    AcademyRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    AcademyRewardExcel.AddRewardAmount(builder, RewardAmount_vec)
    return AcademyRewardExcel.End(builder)

def pack_AcademyTicketExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyTicket") if encrypt else None
    LocationRankSum_val = convert_long(data.get('LocationRankSum', 0), password)
    ScheduleTicktetMax_val = convert_long(data.get('ScheduleTicktetMax', 0), password)
    AcademyTicketExcel.Start(builder)
    AcademyTicketExcel.AddLocationRankSum(builder, LocationRankSum_val)
    AcademyTicketExcel.AddScheduleTicktetMax(builder, ScheduleTicktetMax_val)
    return AcademyTicketExcel.End(builder)

def pack_AcademyZoneExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AcademyZone") if encrypt else None
    StudentVisitProb_vec = 0
    if 'StudentVisitProb' in data:
        StudentVisitProb_items = data['StudentVisitProb']
        AcademyZoneExcel.StartStudentVisitProbVector(builder, len(StudentVisitProb_items))
        for item in reversed(StudentVisitProb_items):
            builder.PrependInt64(convert_long(item, password))
        StudentVisitProb_vec = builder.EndVector(len(StudentVisitProb_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        AcademyZoneExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    LocationId_val = convert_long(data.get('LocationId', 0), password)
    LocationRankForUnlock_val = convert_long(data.get('LocationRankForUnlock', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    RewardGroupId_val = convert_long(data.get('RewardGroupId', 0), password)
    AcademyZoneExcel.Start(builder)
    AcademyZoneExcel.AddId(builder, Id_val)
    AcademyZoneExcel.AddLocationId(builder, LocationId_val)
    AcademyZoneExcel.AddLocationRankForUnlock(builder, LocationRankForUnlock_val)
    AcademyZoneExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    AcademyZoneExcel.AddStudentVisitProb(builder, StudentVisitProb_vec)
    AcademyZoneExcel.AddRewardGroupId(builder, RewardGroupId_val)
    AcademyZoneExcel.AddTags(builder, Tags_vec)
    return AcademyZoneExcel.End(builder)

def pack_AccountLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AccountLevel") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    Level_val = convert_long(data.get('Level', 0), password)
    Exp_val = convert_long(data.get('Exp', 0), password)
    NewbieExpRatio_val = convert_int(data.get('NewbieExpRatio', 0), password)
    CloseInterval_val = convert_int(data.get('CloseInterval', 0), password)
    APAutoChargeMax_val = convert_long(data.get('APAutoChargeMax', 0), password)
    NeedReportEvent_val = data.get('NeedReportEvent', 0)
    AccountLevelExcel.Start(builder)
    AccountLevelExcel.AddId(builder, Id_val)
    AccountLevelExcel.AddLevel(builder, Level_val)
    AccountLevelExcel.AddExp(builder, Exp_val)
    AccountLevelExcel.AddNewbieExpRatio(builder, NewbieExpRatio_val)
    AccountLevelExcel.AddCloseInterval(builder, CloseInterval_val)
    AccountLevelExcel.AddAPAutoChargeMax(builder, APAutoChargeMax_val)
    AccountLevelExcel.AddNeedReportEvent(builder, NeedReportEvent_val)
    return AccountLevelExcel.End(builder)

def pack_AccountLevelRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AccountLevelReward") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    Level_val = convert_long(data.get('Level', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    AccountLevelRewardExcel.Start(builder)
    AccountLevelRewardExcel.AddId(builder, Id_val)
    AccountLevelRewardExcel.AddLevel(builder, Level_val)
    AccountLevelRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    AccountLevelRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    AccountLevelRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return AccountLevelRewardExcel.End(builder)

def pack_ArenaLevelSectionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaLevelSection") if encrypt else None
    ArenaSeasonId_val = convert_long(data.get('ArenaSeasonId', 0), password)
    StartLevel_val = convert_long(data.get('StartLevel', 0), password)
    LastLevel_val = convert_long(data.get('LastLevel', 0), password)
    UserCount_val = convert_long(data.get('UserCount', 0), password)
    ArenaLevelSectionExcel.Start(builder)
    ArenaLevelSectionExcel.AddArenaSeasonId(builder, ArenaSeasonId_val)
    ArenaLevelSectionExcel.AddStartLevel(builder, StartLevel_val)
    ArenaLevelSectionExcel.AddLastLevel(builder, LastLevel_val)
    ArenaLevelSectionExcel.AddUserCount(builder, UserCount_val)
    return ArenaLevelSectionExcel.End(builder)

def pack_ArenaMapExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaMap") if encrypt else None
    TerrainTypeLocalizeKey_off = builder.CreateString(encrypt_string(data.get('TerrainTypeLocalizeKey', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    GroundGroupNameLocalizeKey_off = builder.CreateString(encrypt_string(data.get('GroundGroupNameLocalizeKey', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    TerrainType_val = convert_long(data.get('TerrainType', 0), password)
    GroundGroupId_val = convert_long(data.get('GroundGroupId', 0), password)
    StartRank_val = convert_long(data.get('StartRank', 0), password)
    EndRank_val = convert_long(data.get('EndRank', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    ArenaMapExcel.Start(builder)
    ArenaMapExcel.AddUniqueId(builder, UniqueId_val)
    ArenaMapExcel.AddTerrainType(builder, TerrainType_val)
    ArenaMapExcel.AddTerrainTypeLocalizeKey(builder, TerrainTypeLocalizeKey_off)
    ArenaMapExcel.AddImagePath(builder, ImagePath_off)
    ArenaMapExcel.AddGroundGroupId(builder, GroundGroupId_val)
    ArenaMapExcel.AddGroundGroupNameLocalizeKey(builder, GroundGroupNameLocalizeKey_off)
    ArenaMapExcel.AddStartRank(builder, StartRank_val)
    ArenaMapExcel.AddEndRank(builder, EndRank_val)
    ArenaMapExcel.AddGroundId(builder, GroundId_val)
    return ArenaMapExcel.End(builder)

def pack_ArenaNPCExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaNPC") if encrypt else None
    ExceptionCharacterRarities_vec = 0
    if 'ExceptionCharacterRarities' in data:
        ExceptionCharacterRarities_items = data['ExceptionCharacterRarities']
        ArenaNPCExcel.StartExceptionCharacterRaritiesVector(builder, len(ExceptionCharacterRarities_items))
        for item in reversed(ExceptionCharacterRarities_items):
            builder.PrependInt32(convert_int(getattr(Rarity, item), password))
        ExceptionCharacterRarities_vec = builder.EndVector(len(ExceptionCharacterRarities_items))
    ExceptionMainCharacterIds_vec = 0
    if 'ExceptionMainCharacterIds' in data:
        ExceptionMainCharacterIds_items = data['ExceptionMainCharacterIds']
        ArenaNPCExcel.StartExceptionMainCharacterIdsVector(builder, len(ExceptionMainCharacterIds_items))
        for item in reversed(ExceptionMainCharacterIds_items):
            builder.PrependInt64(convert_long(item, password))
        ExceptionMainCharacterIds_vec = builder.EndVector(len(ExceptionMainCharacterIds_items))
    ExceptionSupportCharacterIds_vec = 0
    if 'ExceptionSupportCharacterIds' in data:
        ExceptionSupportCharacterIds_items = data['ExceptionSupportCharacterIds']
        ArenaNPCExcel.StartExceptionSupportCharacterIdsVector(builder, len(ExceptionSupportCharacterIds_items))
        for item in reversed(ExceptionSupportCharacterIds_items):
            builder.PrependInt64(convert_long(item, password))
        ExceptionSupportCharacterIds_vec = builder.EndVector(len(ExceptionSupportCharacterIds_items))
    ExceptionTSSIds_vec = 0
    if 'ExceptionTSSIds' in data:
        ExceptionTSSIds_items = data['ExceptionTSSIds']
        ArenaNPCExcel.StartExceptionTSSIdsVector(builder, len(ExceptionTSSIds_items))
        for item in reversed(ExceptionTSSIds_items):
            builder.PrependInt64(convert_long(item, password))
        ExceptionTSSIds_vec = builder.EndVector(len(ExceptionTSSIds_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    Rank_val = convert_long(data.get('Rank', 0), password)
    NPCAccountLevel_val = convert_long(data.get('NPCAccountLevel', 0), password)
    NPCLevel_val = convert_long(data.get('NPCLevel', 0), password)
    NPCLevelDeviation_val = convert_long(data.get('NPCLevelDeviation', 0), password)
    NPCStarGrade_val = convert_long(data.get('NPCStarGrade', 0), password)
    ArenaNPCExcel.Start(builder)
    ArenaNPCExcel.AddUniqueId(builder, UniqueId_val)
    ArenaNPCExcel.AddRank(builder, Rank_val)
    ArenaNPCExcel.AddNPCAccountLevel(builder, NPCAccountLevel_val)
    ArenaNPCExcel.AddNPCLevel(builder, NPCLevel_val)
    ArenaNPCExcel.AddNPCLevelDeviation(builder, NPCLevelDeviation_val)
    ArenaNPCExcel.AddNPCStarGrade(builder, NPCStarGrade_val)
    ArenaNPCExcel.AddExceptionCharacterRarities(builder, ExceptionCharacterRarities_vec)
    ArenaNPCExcel.AddExceptionMainCharacterIds(builder, ExceptionMainCharacterIds_vec)
    ArenaNPCExcel.AddExceptionSupportCharacterIds(builder, ExceptionSupportCharacterIds_vec)
    ArenaNPCExcel.AddExceptionTSSIds(builder, ExceptionTSSIds_vec)
    return ArenaNPCExcel.End(builder)

def pack_ArenaRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaReward") if encrypt else None
    RankIconPath_off = builder.CreateString(encrypt_string(data.get('RankIconPath', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        ArenaRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelUniqueId_vec = 0
    if 'RewardParcelUniqueId' in data:
        RewardParcelUniqueId_items = data['RewardParcelUniqueId']
        ArenaRewardExcel.StartRewardParcelUniqueIdVector(builder, len(RewardParcelUniqueId_items))
        for item in reversed(RewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelUniqueId_vec = builder.EndVector(len(RewardParcelUniqueId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        ArenaRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ArenaRewardType_val = convert_int(getattr(ArenaRewardType, data.get('ArenaRewardType', 0)), password)
    RankStart_val = convert_long(data.get('RankStart', 0), password)
    RankEnd_val = convert_long(data.get('RankEnd', 0), password)
    ArenaRewardExcel.Start(builder)
    ArenaRewardExcel.AddUniqueId(builder, UniqueId_val)
    ArenaRewardExcel.AddArenaRewardType(builder, ArenaRewardType_val)
    ArenaRewardExcel.AddRankStart(builder, RankStart_val)
    ArenaRewardExcel.AddRankEnd(builder, RankEnd_val)
    ArenaRewardExcel.AddRankIconPath(builder, RankIconPath_off)
    ArenaRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    ArenaRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId_vec)
    ArenaRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return ArenaRewardExcel.End(builder)

def pack_ArenaSeasonCloseRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaSeasonCloseReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        ArenaSeasonCloseRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelUniqueId_vec = 0
    if 'RewardParcelUniqueId' in data:
        RewardParcelUniqueId_items = data['RewardParcelUniqueId']
        ArenaSeasonCloseRewardExcel.StartRewardParcelUniqueIdVector(builder, len(RewardParcelUniqueId_items))
        for item in reversed(RewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelUniqueId_vec = builder.EndVector(len(RewardParcelUniqueId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        ArenaSeasonCloseRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    RankStart_val = convert_long(data.get('RankStart', 0), password)
    RankEnd_val = convert_long(data.get('RankEnd', 0), password)
    ArenaSeasonCloseRewardExcel.Start(builder)
    ArenaSeasonCloseRewardExcel.AddSeasonId(builder, SeasonId_val)
    ArenaSeasonCloseRewardExcel.AddRankStart(builder, RankStart_val)
    ArenaSeasonCloseRewardExcel.AddRankEnd(builder, RankEnd_val)
    ArenaSeasonCloseRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    ArenaSeasonCloseRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId_vec)
    ArenaSeasonCloseRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return ArenaSeasonCloseRewardExcel.End(builder)

def pack_ArenaSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ArenaSeason") if encrypt else None
    SeasonStartDate_off = builder.CreateString(encrypt_string(data.get('SeasonStartDate', ''), password))
    SeasonEndDate_off = builder.CreateString(encrypt_string(data.get('SeasonEndDate', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    SeasonGroupLimit_val = convert_long(data.get('SeasonGroupLimit', 0), password)
    PrevSeasonId_val = convert_long(data.get('PrevSeasonId', 0), password)
    ArenaSeasonExcel.Start(builder)
    ArenaSeasonExcel.AddUniqueId(builder, UniqueId_val)
    ArenaSeasonExcel.AddSeasonStartDate(builder, SeasonStartDate_off)
    ArenaSeasonExcel.AddSeasonEndDate(builder, SeasonEndDate_off)
    ArenaSeasonExcel.AddSeasonGroupLimit(builder, SeasonGroupLimit_val)
    ArenaSeasonExcel.AddPrevSeasonId(builder, PrevSeasonId_val)
    return ArenaSeasonExcel.End(builder)

def pack_AssistEchelonTypeConvertExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AssistEchelonTypeConvert") if encrypt else None
    Contents_val = convert_int(getattr(EchelonType, data.get('Contents', 0)), password)
    ConvertTo_val = convert_int(getattr(EchelonType, data.get('ConvertTo', 0)), password)
    AssistEchelonTypeConvertExcel.Start(builder)
    AssistEchelonTypeConvertExcel.AddContents(builder, Contents_val)
    AssistEchelonTypeConvertExcel.AddConvertTo(builder, ConvertTo_val)
    return AssistEchelonTypeConvertExcel.End(builder)

def pack_AssistRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AssistReward") if encrypt else None
    RewardType_val = convert_int(getattr(AssistRewardType, data.get('RewardType', 0)), password)
    EchelonType_val = convert_int(getattr(EchelonType, data.get('EchelonType', 0)), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    AssistRewardExcel.Start(builder)
    AssistRewardExcel.AddRewardType(builder, RewardType_val)
    AssistRewardExcel.AddEchelonType(builder, EchelonType_val)
    AssistRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    AssistRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    AssistRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return AssistRewardExcel.End(builder)

def pack_AssistSlotExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AssistSlot") if encrypt else None
    SlotId_val = convert_long(data.get('SlotId', 0), password)
    EchelonType_val = convert_int(getattr(EchelonType, data.get('EchelonType', 0)), password)
    SlotNumber_val = convert_long(data.get('SlotNumber', 0), password)
    AssistTermRewardPeriodFromSec_val = convert_long(data.get('AssistTermRewardPeriodFromSec', 0), password)
    AssistRewardLimit_val = convert_long(data.get('AssistRewardLimit', 0), password)
    AssistRentRewardDailyMaxCount_val = convert_long(data.get('AssistRentRewardDailyMaxCount', 0), password)
    AssistRentalFeeAmount_val = convert_long(data.get('AssistRentalFeeAmount', 0), password)
    AssistRentalFeeAmountStranger_val = convert_long(data.get('AssistRentalFeeAmountStranger', 0), password)
    AssistSlotExcel.Start(builder)
    AssistSlotExcel.AddSlotId(builder, SlotId_val)
    AssistSlotExcel.AddEchelonType(builder, EchelonType_val)
    AssistSlotExcel.AddSlotNumber(builder, SlotNumber_val)
    AssistSlotExcel.AddAssistTermRewardPeriodFromSec(builder, AssistTermRewardPeriodFromSec_val)
    AssistSlotExcel.AddAssistRewardLimit(builder, AssistRewardLimit_val)
    AssistSlotExcel.AddAssistRentRewardDailyMaxCount(builder, AssistRentRewardDailyMaxCount_val)
    AssistSlotExcel.AddAssistRentalFeeAmount(builder, AssistRentalFeeAmount_val)
    AssistSlotExcel.AddAssistRentalFeeAmountStranger(builder, AssistRentalFeeAmountStranger_val)
    return AssistSlotExcel.End(builder)

def pack_AttendanceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Attendance") if encrypt else None
    CountdownPrefab_off = builder.CreateString(encrypt_string(data.get('CountdownPrefab', ''), password))
    Title_off = builder.CreateString(encrypt_string(data.get('Title', ''), password))
    InfomationLocalizeCode_off = builder.CreateString(encrypt_string(data.get('InfomationLocalizeCode', ''), password))
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    StartableEndDate_off = builder.CreateString(encrypt_string(data.get('StartableEndDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    TitleImagePath_off = builder.CreateString(encrypt_string(data.get('TitleImagePath', ''), password))
    DecorationImagePath_off = builder.CreateString(encrypt_string(data.get('DecorationImagePath', ''), password))
    DecorationGarlandImagePath_off = builder.CreateString(encrypt_string(data.get('DecorationGarlandImagePath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Type_val = convert_int(getattr(AttendanceType, data.get('Type', 0)), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    AccountType_val = convert_int(getattr(AccountState, data.get('AccountType', 0)), password)
    AccountLevelLimit_val = convert_long(data.get('AccountLevelLimit', 0), password)
    CountRule_val = convert_int(getattr(AttendanceCountRule, data.get('CountRule', 0)), password)
    CountReset_val = convert_int(getattr(AttendanceResetType, data.get('CountReset', 0)), password)
    BookSize_val = convert_long(data.get('BookSize', 0), password)
    ExpiryDate_val = convert_long(data.get('ExpiryDate', 0), password)
    MailType_val = convert_int(getattr(MailType, data.get('MailType', 0)), password)
    DialogCategory_val = convert_int(getattr(DialogCategory, data.get('DialogCategory', 0)), password)
    AttendanceExcel.Start(builder)
    AttendanceExcel.AddId(builder, Id_val)
    AttendanceExcel.AddType(builder, Type_val)
    AttendanceExcel.AddCountdownPrefab(builder, CountdownPrefab_off)
    AttendanceExcel.AddDisplayOrder(builder, DisplayOrder_val)
    AttendanceExcel.AddAccountType(builder, AccountType_val)
    AttendanceExcel.AddAccountLevelLimit(builder, AccountLevelLimit_val)
    AttendanceExcel.AddTitle(builder, Title_off)
    AttendanceExcel.AddInfomationLocalizeCode(builder, InfomationLocalizeCode_off)
    AttendanceExcel.AddCountRule(builder, CountRule_val)
    AttendanceExcel.AddCountReset(builder, CountReset_val)
    AttendanceExcel.AddBookSize(builder, BookSize_val)
    AttendanceExcel.AddStartDate(builder, StartDate_off)
    AttendanceExcel.AddStartableEndDate(builder, StartableEndDate_off)
    AttendanceExcel.AddEndDate(builder, EndDate_off)
    AttendanceExcel.AddExpiryDate(builder, ExpiryDate_val)
    AttendanceExcel.AddMailType(builder, MailType_val)
    AttendanceExcel.AddDialogCategory(builder, DialogCategory_val)
    AttendanceExcel.AddTitleImagePath(builder, TitleImagePath_off)
    AttendanceExcel.AddDecorationImagePath(builder, DecorationImagePath_off)
    AttendanceExcel.AddDecorationGarlandImagePath(builder, DecorationGarlandImagePath_off)
    return AttendanceExcel.End(builder)

def pack_AttendanceRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AttendanceReward") if encrypt else None
    RewardIcon_off = builder.CreateString(encrypt_string(data.get('RewardIcon', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        AttendanceRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardId_vec = 0
    if 'RewardId' in data:
        RewardId_items = data['RewardId']
        AttendanceRewardExcel.StartRewardIdVector(builder, len(RewardId_items))
        for item in reversed(RewardId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardId_vec = builder.EndVector(len(RewardId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        AttendanceRewardExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    AttendanceId_val = convert_long(data.get('AttendanceId', 0), password)
    Day_val = convert_long(data.get('Day', 0), password)
    AttendanceRewardExcel.Start(builder)
    AttendanceRewardExcel.AddAttendanceId(builder, AttendanceId_val)
    AttendanceRewardExcel.AddDay(builder, Day_val)
    AttendanceRewardExcel.AddRewardIcon(builder, RewardIcon_off)
    AttendanceRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    AttendanceRewardExcel.AddRewardId(builder, RewardId_vec)
    AttendanceRewardExcel.AddRewardAmount(builder, RewardAmount_vec)
    return AttendanceRewardExcel.End(builder)

def pack_AudioAnimatorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("AudioAnimator") if encrypt else None
    VoiceNamePrefix_off = builder.CreateString(encrypt_string(data.get('VoiceNamePrefix', ''), password))
    StateName_off = builder.CreateString(encrypt_string(data.get('StateName', ''), password))
    AudioClipPath_vec = 0
    if 'AudioClipPath' in data:
        AudioClipPath_items = data['AudioClipPath']
        AudioClipPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in AudioClipPath_items]
        AudioAnimatorExcel.StartAudioClipPathVector(builder, len(AudioClipPath_str_offsets))
        for offset in reversed(AudioClipPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        AudioClipPath_vec = builder.EndVector(len(AudioClipPath_items))
    VoiceHash_vec = 0
    if 'VoiceHash' in data:
        VoiceHash_items = data['VoiceHash']
        AudioAnimatorExcel.StartVoiceHashVector(builder, len(VoiceHash_items))
        for item in reversed(VoiceHash_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceHash_vec = builder.EndVector(len(VoiceHash_items))
    ControllerNameHash_val = convert_uint(data.get('ControllerNameHash', 0), password)
    StateNameHash_val = convert_uint(data.get('StateNameHash', 0), password)
    IgnoreInterruptDelay_val = data.get('IgnoreInterruptDelay', 0)
    IgnoreInterruptPlay_val = data.get('IgnoreInterruptPlay', 0)
    IgnoreVelocity_val = data.get('IgnoreVelocity', 0)
    Volume_val = encrypt_float(data.get('Volume', 0), password)
    Delay_val = encrypt_float(data.get('Delay', 0), password)
    RandomPitchMin_val = convert_int(data.get('RandomPitchMin', 0), password)
    RandomPitchMax_val = convert_int(data.get('RandomPitchMax', 0), password)
    AudioPriority_val = convert_int(data.get('AudioPriority', 0), password)
    AudioAnimatorExcel.Start(builder)
    AudioAnimatorExcel.AddControllerNameHash(builder, ControllerNameHash_val)
    AudioAnimatorExcel.AddVoiceNamePrefix(builder, VoiceNamePrefix_off)
    AudioAnimatorExcel.AddStateNameHash(builder, StateNameHash_val)
    AudioAnimatorExcel.AddStateName(builder, StateName_off)
    AudioAnimatorExcel.AddIgnoreInterruptDelay(builder, IgnoreInterruptDelay_val)
    AudioAnimatorExcel.AddIgnoreInterruptPlay(builder, IgnoreInterruptPlay_val)
    AudioAnimatorExcel.AddIgnoreVelocity(builder, IgnoreVelocity_val)
    AudioAnimatorExcel.AddVolume(builder, Volume_val)
    AudioAnimatorExcel.AddDelay(builder, Delay_val)
    AudioAnimatorExcel.AddRandomPitchMin(builder, RandomPitchMin_val)
    AudioAnimatorExcel.AddRandomPitchMax(builder, RandomPitchMax_val)
    AudioAnimatorExcel.AddAudioPriority(builder, AudioPriority_val)
    AudioAnimatorExcel.AddAudioClipPath(builder, AudioClipPath_vec)
    AudioAnimatorExcel.AddVoiceHash(builder, VoiceHash_vec)
    return AudioAnimatorExcel.End(builder)

def pack_BattleLevelFactorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattleLevelFactor") if encrypt else None
    LevelDiff_val = convert_int(data.get('LevelDiff', 0), password)
    DamageRate_val = convert_long(data.get('DamageRate', 0), password)
    BattleLevelFactorExcel.Start(builder)
    BattleLevelFactorExcel.AddLevelDiff(builder, LevelDiff_val)
    BattleLevelFactorExcel.AddDamageRate(builder, DamageRate_val)
    return BattleLevelFactorExcel.End(builder)

def pack_BattlePassExpLimitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassExpLimit") if encrypt else None
    LimitStartTime_off = builder.CreateString(encrypt_string(data.get('LimitStartTime', ''), password))
    LimitEndTime_off = builder.CreateString(encrypt_string(data.get('LimitEndTime', ''), password))
    BattlePassId_val = convert_long(data.get('BattlePassId', 0), password)
    ExpLimitAmount_val = convert_long(data.get('ExpLimitAmount', 0), password)
    BattlePassExpLimitExcel.Start(builder)
    BattlePassExpLimitExcel.AddBattlePassId(builder, BattlePassId_val)
    BattlePassExpLimitExcel.AddLimitStartTime(builder, LimitStartTime_off)
    BattlePassExpLimitExcel.AddLimitEndTime(builder, LimitEndTime_off)
    BattlePassExpLimitExcel.AddExpLimitAmount(builder, ExpLimitAmount_val)
    return BattlePassExpLimitExcel.End(builder)

def pack_BattlePassFlavorTextExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassFlavorText") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeCodeId_val = convert_uint(data.get('LocalizeCodeId', 0), password)
    BattlePassFlavorTextExcel.Start(builder)
    BattlePassFlavorTextExcel.AddGroupId(builder, GroupId_val)
    BattlePassFlavorTextExcel.AddId(builder, Id_val)
    BattlePassFlavorTextExcel.AddLocalizeCodeId(builder, LocalizeCodeId_val)
    return BattlePassFlavorTextExcel.End(builder)

def pack_BattlePassInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassInfo") if encrypt else None
    SalePeriodFrom_off = builder.CreateString(encrypt_string(data.get('SalePeriodFrom', ''), password))
    SalePeriodTo_off = builder.CreateString(encrypt_string(data.get('SalePeriodTo', ''), password))
    LobbyBannerPath_off = builder.CreateString(encrypt_string(data.get('LobbyBannerPath', ''), password))
    MainIconParcelPath_off = builder.CreateString(encrypt_string(data.get('MainIconParcelPath', ''), password))
    PurchaseStepProductImagePath_off = builder.CreateString(encrypt_string(data.get('PurchaseStepProductImagePath', ''), password))
    VideoId_vec = 0
    if 'VideoId' in data:
        VideoId_items = data['VideoId']
        BattlePassInfoExcel.StartVideoIdVector(builder, len(VideoId_items))
        for item in reversed(VideoId_items):
            builder.PrependInt64(convert_long(item, password))
        VideoId_vec = builder.EndVector(len(VideoId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    FreeRewardGroupID_val = convert_long(data.get('FreeRewardGroupID', 0), password)
    PurchaseRewardGroupID_val = convert_long(data.get('PurchaseRewardGroupID', 0), password)
    NormalProductGroupID_val = convert_long(data.get('NormalProductGroupID', 0), password)
    PremiumProductGroupID_val = convert_long(data.get('PremiumProductGroupID', 0), password)
    DiscountPremiumProductGroupID_val = convert_long(data.get('DiscountPremiumProductGroupID', 0), password)
    NextLvNeedExp_val = convert_int(data.get('NextLvNeedExp', 0), password)
    PassLvUpGoodsID_val = convert_long(data.get('PassLvUpGoodsID', 0), password)
    BuyPremiumLvUpAmount_val = convert_int(data.get('BuyPremiumLvUpAmount', 0), password)
    FlavorTextGroupID_val = convert_long(data.get('FlavorTextGroupID', 0), password)
    ExclusiveRewardID_val = convert_long(data.get('ExclusiveRewardID', 0), password)
    ExclusiveEmblemID_val = convert_long(data.get('ExclusiveEmblemID', 0), password)
    PassExpLocalizeEtcId_val = convert_uint(data.get('PassExpLocalizeEtcId', 0), password)
    BattlePassInfoExcel.Start(builder)
    BattlePassInfoExcel.AddId(builder, Id_val)
    BattlePassInfoExcel.AddFreeRewardGroupID(builder, FreeRewardGroupID_val)
    BattlePassInfoExcel.AddPurchaseRewardGroupID(builder, PurchaseRewardGroupID_val)
    BattlePassInfoExcel.AddNormalProductGroupID(builder, NormalProductGroupID_val)
    BattlePassInfoExcel.AddPremiumProductGroupID(builder, PremiumProductGroupID_val)
    BattlePassInfoExcel.AddDiscountPremiumProductGroupID(builder, DiscountPremiumProductGroupID_val)
    BattlePassInfoExcel.AddNextLvNeedExp(builder, NextLvNeedExp_val)
    BattlePassInfoExcel.AddPassLvUpGoodsID(builder, PassLvUpGoodsID_val)
    BattlePassInfoExcel.AddBuyPremiumLvUpAmount(builder, BuyPremiumLvUpAmount_val)
    BattlePassInfoExcel.AddSalePeriodFrom(builder, SalePeriodFrom_off)
    BattlePassInfoExcel.AddSalePeriodTo(builder, SalePeriodTo_off)
    BattlePassInfoExcel.AddVideoId(builder, VideoId_vec)
    BattlePassInfoExcel.AddFlavorTextGroupID(builder, FlavorTextGroupID_val)
    BattlePassInfoExcel.AddExclusiveRewardID(builder, ExclusiveRewardID_val)
    BattlePassInfoExcel.AddExclusiveEmblemID(builder, ExclusiveEmblemID_val)
    BattlePassInfoExcel.AddPassExpLocalizeEtcId(builder, PassExpLocalizeEtcId_val)
    BattlePassInfoExcel.AddLobbyBannerPath(builder, LobbyBannerPath_off)
    BattlePassInfoExcel.AddMainIconParcelPath(builder, MainIconParcelPath_off)
    BattlePassInfoExcel.AddPurchaseStepProductImagePath(builder, PurchaseStepProductImagePath_off)
    return BattlePassInfoExcel.End(builder)

def pack_BattlePassLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassLevel") if encrypt else None
    BattlePassId_val = convert_long(data.get('BattlePassId', 0), password)
    Level_val = convert_long(data.get('Level', 0), password)
    IsPickUpReward_val = data.get('IsPickUpReward', 0)
    BattlePassLevelExcel.Start(builder)
    BattlePassLevelExcel.AddBattlePassId(builder, BattlePassId_val)
    BattlePassLevelExcel.AddLevel(builder, Level_val)
    BattlePassLevelExcel.AddIsPickUpReward(builder, IsPickUpReward_val)
    return BattlePassLevelExcel.End(builder)

def pack_BattlePassMissionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassMission") if encrypt else None
    ToastImagePath_off = builder.CreateString(encrypt_string(data.get('ToastImagePath', ''), password))
    PreMissionId_vec = 0
    if 'PreMissionId' in data:
        PreMissionId_items = data['PreMissionId']
        BattlePassMissionExcel.StartPreMissionIdVector(builder, len(PreMissionId_items))
        for item in reversed(PreMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        PreMissionId_vec = builder.EndVector(len(PreMissionId_items))
    ShortcutUI_vec = 0
    if 'ShortcutUI' in data:
        ShortcutUI_items = data['ShortcutUI']
        ShortcutUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUI_items]
        BattlePassMissionExcel.StartShortcutUIVector(builder, len(ShortcutUI_str_offsets))
        for offset in reversed(ShortcutUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUI_vec = builder.EndVector(len(ShortcutUI_items))
    CompleteConditionParameter_vec = 0
    if 'CompleteConditionParameter' in data:
        CompleteConditionParameter_items = data['CompleteConditionParameter']
        BattlePassMissionExcel.StartCompleteConditionParameterVector(builder, len(CompleteConditionParameter_items))
        for item in reversed(CompleteConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionParameter_vec = builder.EndVector(len(CompleteConditionParameter_items))
    CompleteConditionParameterTag_vec = 0
    if 'CompleteConditionParameterTag' in data:
        CompleteConditionParameterTag_items = data['CompleteConditionParameterTag']
        BattlePassMissionExcel.StartCompleteConditionParameterTagVector(builder, len(CompleteConditionParameterTag_items))
        for item in reversed(CompleteConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CompleteConditionParameterTag_vec = builder.EndVector(len(CompleteConditionParameterTag_items))
    BattlePassId_val = convert_long(data.get('BattlePassId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    Category_val = convert_int(getattr(MissionCategory, data.get('Category', 0)), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    ResetType_val = convert_int(getattr(MissionResetType, data.get('ResetType', 0)), password)
    ToastDisplayType_val = convert_int(getattr(MissionToastDisplayConditionType, data.get('ToastDisplayType', 0)), password)
    ViewFlag_val = data.get('ViewFlag', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    ChallengeStageShortcut_val = convert_long(data.get('ChallengeStageShortcut', 0), password)
    CompleteConditionType_val = convert_int(getattr(MissionCompleteConditionType, data.get('CompleteConditionType', 0)), password)
    CompleteConditionCount_val = convert_long(data.get('CompleteConditionCount', 0), password)
    BattlePassExpAmount_val = convert_int(data.get('BattlePassExpAmount', 0), password)
    BattlePassMissionExcel.Start(builder)
    BattlePassMissionExcel.AddBattlePassId(builder, BattlePassId_val)
    BattlePassMissionExcel.AddId(builder, Id_val)
    BattlePassMissionExcel.AddCategory(builder, Category_val)
    BattlePassMissionExcel.AddPreMissionId(builder, PreMissionId_vec)
    BattlePassMissionExcel.AddDescription(builder, Description_val)
    BattlePassMissionExcel.AddResetType(builder, ResetType_val)
    BattlePassMissionExcel.AddToastDisplayType(builder, ToastDisplayType_val)
    BattlePassMissionExcel.AddToastImagePath(builder, ToastImagePath_off)
    BattlePassMissionExcel.AddViewFlag(builder, ViewFlag_val)
    BattlePassMissionExcel.AddDisplayOrder(builder, DisplayOrder_val)
    BattlePassMissionExcel.AddShortcutUI(builder, ShortcutUI_vec)
    BattlePassMissionExcel.AddChallengeStageShortcut(builder, ChallengeStageShortcut_val)
    BattlePassMissionExcel.AddCompleteConditionType(builder, CompleteConditionType_val)
    BattlePassMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount_val)
    BattlePassMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameter_vec)
    BattlePassMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTag_vec)
    BattlePassMissionExcel.AddBattlePassExpAmount(builder, BattlePassExpAmount_val)
    return BattlePassMissionExcel.End(builder)

def pack_BattlePassRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BattlePassReward") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    RewardGroupId_val = convert_long(data.get('RewardGroupId', 0), password)
    Level_val = convert_long(data.get('Level', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelUniqueId_val = convert_long(data.get('RewardParcelUniqueId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    BattlePassRewardExcel.Start(builder)
    BattlePassRewardExcel.AddId(builder, Id_val)
    BattlePassRewardExcel.AddRewardGroupId(builder, RewardGroupId_val)
    BattlePassRewardExcel.AddLevel(builder, Level_val)
    BattlePassRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    BattlePassRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId_val)
    BattlePassRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return BattlePassRewardExcel.End(builder)

def pack_BGMExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BGM") if encrypt else None
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        BGMExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    Path_vec = 0
    if 'Path' in data:
        Path_items = data['Path']
        Path_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in Path_items]
        BGMExcel.StartPathVector(builder, len(Path_str_offsets))
        for offset in reversed(Path_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        Path_vec = builder.EndVector(len(Path_items))
    Volume_vec = 0
    if 'Volume' in data:
        Volume_items = data['Volume']
        BGMExcel.StartVolumeVector(builder, len(Volume_items))
        for item in reversed(Volume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Volume_vec = builder.EndVector(len(Volume_items))
    LoopStartTime_vec = 0
    if 'LoopStartTime' in data:
        LoopStartTime_items = data['LoopStartTime']
        BGMExcel.StartLoopStartTimeVector(builder, len(LoopStartTime_items))
        for item in reversed(LoopStartTime_items):
            builder.PrependFloat32(encrypt_float(item, password))
        LoopStartTime_vec = builder.EndVector(len(LoopStartTime_items))
    LoopEndTime_vec = 0
    if 'LoopEndTime' in data:
        LoopEndTime_items = data['LoopEndTime']
        BGMExcel.StartLoopEndTimeVector(builder, len(LoopEndTime_items))
        for item in reversed(LoopEndTime_items):
            builder.PrependFloat32(encrypt_float(item, password))
        LoopEndTime_vec = builder.EndVector(len(LoopEndTime_items))
    LoopTranstionTime_vec = 0
    if 'LoopTranstionTime' in data:
        LoopTranstionTime_items = data['LoopTranstionTime']
        BGMExcel.StartLoopTranstionTimeVector(builder, len(LoopTranstionTime_items))
        for item in reversed(LoopTranstionTime_items):
            builder.PrependFloat32(encrypt_float(item, password))
        LoopTranstionTime_vec = builder.EndVector(len(LoopTranstionTime_items))
    LoopOffsetTime_vec = 0
    if 'LoopOffsetTime' in data:
        LoopOffsetTime_items = data['LoopOffsetTime']
        BGMExcel.StartLoopOffsetTimeVector(builder, len(LoopOffsetTime_items))
        for item in reversed(LoopOffsetTime_items):
            builder.PrependFloat32(encrypt_float(item, password))
        LoopOffsetTime_vec = builder.EndVector(len(LoopOffsetTime_items))
    Id_val = convert_long(data.get('Id', 0), password)
    BGMExcel.Start(builder)
    BGMExcel.AddId(builder, Id_val)
    BGMExcel.AddNation(builder, Nation_vec)
    BGMExcel.AddPath(builder, Path_vec)
    BGMExcel.AddVolume(builder, Volume_vec)
    BGMExcel.AddLoopStartTime(builder, LoopStartTime_vec)
    BGMExcel.AddLoopEndTime(builder, LoopEndTime_vec)
    BGMExcel.AddLoopTranstionTime(builder, LoopTranstionTime_vec)
    BGMExcel.AddLoopOffsetTime(builder, LoopOffsetTime_vec)
    return BGMExcel.End(builder)

def pack_BGMRaidExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BGMRaid") if encrypt else None
    StageId_val = convert_long(data.get('StageId', 0), password)
    PhaseIndex_val = convert_long(data.get('PhaseIndex', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    BGMRaidExcel.Start(builder)
    BGMRaidExcel.AddStageId(builder, StageId_val)
    BGMRaidExcel.AddPhaseIndex(builder, PhaseIndex_val)
    BGMRaidExcel.AddBGMId(builder, BGMId_val)
    return BGMRaidExcel.End(builder)

def pack_BGMUIExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BGMUI") if encrypt else None
    UIPrefab_val = convert_uint(data.get('UIPrefab', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    BGMId2nd_val = convert_long(data.get('BGMId2nd', 0), password)
    BGMId3rd_val = convert_long(data.get('BGMId3rd', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    BGMUIExcel.Start(builder)
    BGMUIExcel.AddUIPrefab(builder, UIPrefab_val)
    BGMUIExcel.AddBGMId(builder, BGMId_val)
    BGMUIExcel.AddBGMId2nd(builder, BGMId2nd_val)
    BGMUIExcel.AddBGMId3rd(builder, BGMId3rd_val)
    BGMUIExcel.AddEventContentId(builder, EventContentId_val)
    return BGMUIExcel.End(builder)

def pack_BossExternalBTExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BossExternalBT") if encrypt else None
    TriggerArgument_off = builder.CreateString(encrypt_string(data.get('TriggerArgument', ''), password))
    BehaviorArgument_off = builder.CreateString(encrypt_string(data.get('BehaviorArgument', ''), password))
    ExternalBTId_val = convert_long(data.get('ExternalBTId', 0), password)
    AIPhase_val = convert_long(data.get('AIPhase', 0), password)
    ExternalBTNodeType_val = convert_int(getattr(ExternalBTNodeType, data.get('ExternalBTNodeType', 0)), password)
    ExternalBTTrigger_val = convert_int(getattr(ExternalBTTrigger, data.get('ExternalBTTrigger', 0)), password)
    BehaviorRate_val = convert_long(data.get('BehaviorRate', 0), password)
    ExternalBehavior_val = convert_int(getattr(ExternalBehavior, data.get('ExternalBehavior', 0)), password)
    BossExternalBTExcel.Start(builder)
    BossExternalBTExcel.AddExternalBTId(builder, ExternalBTId_val)
    BossExternalBTExcel.AddAIPhase(builder, AIPhase_val)
    BossExternalBTExcel.AddExternalBTNodeType(builder, ExternalBTNodeType_val)
    BossExternalBTExcel.AddExternalBTTrigger(builder, ExternalBTTrigger_val)
    BossExternalBTExcel.AddTriggerArgument(builder, TriggerArgument_off)
    BossExternalBTExcel.AddBehaviorRate(builder, BehaviorRate_val)
    BossExternalBTExcel.AddExternalBehavior(builder, ExternalBehavior_val)
    BossExternalBTExcel.AddBehaviorArgument(builder, BehaviorArgument_off)
    return BossExternalBTExcel.End(builder)

def pack_BulletArmorDamageFactorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("BulletArmorDamageFactor") if encrypt else None
    DamageFactorGroupId_off = builder.CreateString(encrypt_string(data.get('DamageFactorGroupId', ''), password))
    BulletType_val = convert_int(getattr(BulletType, data.get('BulletType', 0)), password)
    ArmorType_val = convert_int(getattr(ArmorType, data.get('ArmorType', 0)), password)
    DamageRate_val = convert_long(data.get('DamageRate', 0), password)
    DamageAttribute_val = convert_int(getattr(DamageAttribute, data.get('DamageAttribute', 0)), password)
    MinDamageRate_val = convert_long(data.get('MinDamageRate', 0), password)
    MaxDamageRate_val = convert_long(data.get('MaxDamageRate', 0), password)
    ShowHighlightFloater_val = data.get('ShowHighlightFloater', 0)
    BulletArmorDamageFactorExcel.Start(builder)
    BulletArmorDamageFactorExcel.AddDamageFactorGroupId(builder, DamageFactorGroupId_off)
    BulletArmorDamageFactorExcel.AddBulletType(builder, BulletType_val)
    BulletArmorDamageFactorExcel.AddArmorType(builder, ArmorType_val)
    BulletArmorDamageFactorExcel.AddDamageRate(builder, DamageRate_val)
    BulletArmorDamageFactorExcel.AddDamageAttribute(builder, DamageAttribute_val)
    BulletArmorDamageFactorExcel.AddMinDamageRate(builder, MinDamageRate_val)
    BulletArmorDamageFactorExcel.AddMaxDamageRate(builder, MaxDamageRate_val)
    BulletArmorDamageFactorExcel.AddShowHighlightFloater(builder, ShowHighlightFloater_val)
    return BulletArmorDamageFactorExcel.End(builder)

def pack_CafeInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CafeInfo") if encrypt else None
    SummonTicketIconPath_off = builder.CreateString(encrypt_string(data.get('SummonTicketIconPath', ''), password))
    CafeId_val = convert_long(data.get('CafeId', 0), password)
    IsDefault_val = data.get('IsDefault', 0)
    OpenConditionCafeId_val = convert_int(getattr(OpenConditionContent, data.get('OpenConditionCafeId', 0)), password)
    OpenConditionCafeInvite_val = convert_int(getattr(OpenConditionContent, data.get('OpenConditionCafeInvite', 0)), password)
    SummonParcelType_val = convert_int(getattr(ParcelType, data.get('SummonParcelType', 0)), password)
    SummonParcelId_val = convert_long(data.get('SummonParcelId', 0), password)
    SummonParcelAmount_val = convert_long(data.get('SummonParcelAmount', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    CafeInfoExcel.Start(builder)
    CafeInfoExcel.AddCafeId(builder, CafeId_val)
    CafeInfoExcel.AddIsDefault(builder, IsDefault_val)
    CafeInfoExcel.AddOpenConditionCafeId(builder, OpenConditionCafeId_val)
    CafeInfoExcel.AddOpenConditionCafeInvite(builder, OpenConditionCafeInvite_val)
    CafeInfoExcel.AddSummonParcelType(builder, SummonParcelType_val)
    CafeInfoExcel.AddSummonParcelId(builder, SummonParcelId_val)
    CafeInfoExcel.AddSummonParcelAmount(builder, SummonParcelAmount_val)
    CafeInfoExcel.AddCategoryType(builder, CategoryType_val)
    CafeInfoExcel.AddSummonTicketIconPath(builder, SummonTicketIconPath_off)
    return CafeInfoExcel.End(builder)

def pack_CafeInteractionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CafeInteraction") if encrypt else None
    IgnoreIfUnobtainedStartDate_off = builder.CreateString(encrypt_string(data.get('IgnoreIfUnobtainedStartDate', ''), password))
    IgnoreIfUnobtainedEndDate_off = builder.CreateString(encrypt_string(data.get('IgnoreIfUnobtainedEndDate', ''), password))
    BubbleType_vec = 0
    if 'BubbleType' in data:
        BubbleType_items = data['BubbleType']
        CafeInteractionExcel.StartBubbleTypeVector(builder, len(BubbleType_items))
        for item in reversed(BubbleType_items):
            builder.PrependInt32(convert_int(getattr(BubbleType, item), password))
        BubbleType_vec = builder.EndVector(len(BubbleType_items))
    BubbleDuration_vec = 0
    if 'BubbleDuration' in data:
        BubbleDuration_items = data['BubbleDuration']
        CafeInteractionExcel.StartBubbleDurationVector(builder, len(BubbleDuration_items))
        for item in reversed(BubbleDuration_items):
            builder.PrependInt64(convert_long(item, password))
        BubbleDuration_vec = builder.EndVector(len(BubbleDuration_items))
    CafeCharacterState_vec = 0
    if 'CafeCharacterState' in data:
        CafeCharacterState_items = data['CafeCharacterState']
        CafeCharacterState_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CafeCharacterState_items]
        CafeInteractionExcel.StartCafeCharacterStateVector(builder, len(CafeCharacterState_str_offsets))
        for offset in reversed(CafeCharacterState_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CafeCharacterState_vec = builder.EndVector(len(CafeCharacterState_items))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    IgnoreIfUnobtained_val = data.get('IgnoreIfUnobtained', 0)
    FavorEmoticonRewardParcelType_val = convert_int(getattr(ParcelType, data.get('FavorEmoticonRewardParcelType', 0)), password)
    FavorEmoticonRewardId_val = convert_long(data.get('FavorEmoticonRewardId', 0), password)
    FavorEmoticonRewardAmount_val = convert_long(data.get('FavorEmoticonRewardAmount', 0), password)
    CafeInteractionExcel.Start(builder)
    CafeInteractionExcel.AddCharacterId(builder, CharacterId_val)
    CafeInteractionExcel.AddIgnoreIfUnobtained(builder, IgnoreIfUnobtained_val)
    CafeInteractionExcel.AddIgnoreIfUnobtainedStartDate(builder, IgnoreIfUnobtainedStartDate_off)
    CafeInteractionExcel.AddIgnoreIfUnobtainedEndDate(builder, IgnoreIfUnobtainedEndDate_off)
    CafeInteractionExcel.AddBubbleType(builder, BubbleType_vec)
    CafeInteractionExcel.AddBubbleDuration(builder, BubbleDuration_vec)
    CafeInteractionExcel.AddFavorEmoticonRewardParcelType(builder, FavorEmoticonRewardParcelType_val)
    CafeInteractionExcel.AddFavorEmoticonRewardId(builder, FavorEmoticonRewardId_val)
    CafeInteractionExcel.AddFavorEmoticonRewardAmount(builder, FavorEmoticonRewardAmount_val)
    CafeInteractionExcel.AddCafeCharacterState(builder, CafeCharacterState_vec)
    return CafeInteractionExcel.End(builder)

def pack_CafeProductionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CafeProduction") if encrypt else None
    CafeId_val = convert_long(data.get('CafeId', 0), password)
    Rank_val = convert_long(data.get('Rank', 0), password)
    CafeProductionParcelType_val = convert_int(getattr(ParcelType, data.get('CafeProductionParcelType', 0)), password)
    CafeProductionParcelId_val = convert_long(data.get('CafeProductionParcelId', 0), password)
    ParcelProductionCoefficient_val = convert_long(data.get('ParcelProductionCoefficient', 0), password)
    ParcelProductionCorrectionValue_val = convert_long(data.get('ParcelProductionCorrectionValue', 0), password)
    ParcelStorageMax_val = convert_long(data.get('ParcelStorageMax', 0), password)
    CafeProductionExcel.Start(builder)
    CafeProductionExcel.AddCafeId(builder, CafeId_val)
    CafeProductionExcel.AddRank(builder, Rank_val)
    CafeProductionExcel.AddCafeProductionParcelType(builder, CafeProductionParcelType_val)
    CafeProductionExcel.AddCafeProductionParcelId(builder, CafeProductionParcelId_val)
    CafeProductionExcel.AddParcelProductionCoefficient(builder, ParcelProductionCoefficient_val)
    CafeProductionExcel.AddParcelProductionCorrectionValue(builder, ParcelProductionCorrectionValue_val)
    CafeProductionExcel.AddParcelStorageMax(builder, ParcelStorageMax_val)
    return CafeProductionExcel.End(builder)

def pack_CafeRankExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CafeRank") if encrypt else None
    CafeVisitWeightTagBonusStep_vec = 0
    if 'CafeVisitWeightTagBonusStep' in data:
        CafeVisitWeightTagBonusStep_items = data['CafeVisitWeightTagBonusStep']
        CafeRankExcel.StartCafeVisitWeightTagBonusStepVector(builder, len(CafeVisitWeightTagBonusStep_items))
        for item in reversed(CafeVisitWeightTagBonusStep_items):
            builder.PrependInt32(convert_int(item, password))
        CafeVisitWeightTagBonusStep_vec = builder.EndVector(len(CafeVisitWeightTagBonusStep_items))
    CafeVisitWeightTagBonus_vec = 0
    if 'CafeVisitWeightTagBonus' in data:
        CafeVisitWeightTagBonus_items = data['CafeVisitWeightTagBonus']
        CafeRankExcel.StartCafeVisitWeightTagBonusVector(builder, len(CafeVisitWeightTagBonus_items))
        for item in reversed(CafeVisitWeightTagBonus_items):
            builder.PrependInt32(convert_int(item, password))
        CafeVisitWeightTagBonus_vec = builder.EndVector(len(CafeVisitWeightTagBonus_items))
    CafeId_val = convert_long(data.get('CafeId', 0), password)
    Rank_val = convert_long(data.get('Rank', 0), password)
    RecipeId_val = convert_long(data.get('RecipeId', 0), password)
    ComfortMax_val = convert_long(data.get('ComfortMax', 0), password)
    TagCountMax_val = convert_long(data.get('TagCountMax', 0), password)
    CharacterVisitMin_val = convert_int(data.get('CharacterVisitMin', 0), password)
    CharacterVisitMax_val = convert_int(data.get('CharacterVisitMax', 0), password)
    CafeVisitWeightBase_val = convert_int(data.get('CafeVisitWeightBase', 0), password)
    CafeRankExcel.Start(builder)
    CafeRankExcel.AddCafeId(builder, CafeId_val)
    CafeRankExcel.AddRank(builder, Rank_val)
    CafeRankExcel.AddRecipeId(builder, RecipeId_val)
    CafeRankExcel.AddComfortMax(builder, ComfortMax_val)
    CafeRankExcel.AddTagCountMax(builder, TagCountMax_val)
    CafeRankExcel.AddCharacterVisitMin(builder, CharacterVisitMin_val)
    CafeRankExcel.AddCharacterVisitMax(builder, CharacterVisitMax_val)
    CafeRankExcel.AddCafeVisitWeightBase(builder, CafeVisitWeightBase_val)
    CafeRankExcel.AddCafeVisitWeightTagBonusStep(builder, CafeVisitWeightTagBonusStep_vec)
    CafeRankExcel.AddCafeVisitWeightTagBonus(builder, CafeVisitWeightTagBonus_vec)
    return CafeRankExcel.End(builder)

def pack_CameraExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Camera") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    MinDistance_val = encrypt_float(data.get('MinDistance', 0), password)
    MaxDistance_val = encrypt_float(data.get('MaxDistance', 0), password)
    RotationX_val = encrypt_float(data.get('RotationX', 0), password)
    RotationY_val = encrypt_float(data.get('RotationY', 0), password)
    MoveInstantly_val = data.get('MoveInstantly', 0)
    MoveInstantlyRotationSave_val = data.get('MoveInstantlyRotationSave', 0)
    LeftMargin_val = encrypt_float(data.get('LeftMargin', 0), password)
    BottomMargin_val = encrypt_float(data.get('BottomMargin', 0), password)
    IgnoreEnemies_val = data.get('IgnoreEnemies', 0)
    UseRailPointCompensation_val = data.get('UseRailPointCompensation', 0)
    CameraExcel.Start(builder)
    CameraExcel.AddUniqueId(builder, UniqueId_val)
    CameraExcel.AddMinDistance(builder, MinDistance_val)
    CameraExcel.AddMaxDistance(builder, MaxDistance_val)
    CameraExcel.AddRotationX(builder, RotationX_val)
    CameraExcel.AddRotationY(builder, RotationY_val)
    CameraExcel.AddMoveInstantly(builder, MoveInstantly_val)
    CameraExcel.AddMoveInstantlyRotationSave(builder, MoveInstantlyRotationSave_val)
    CameraExcel.AddLeftMargin(builder, LeftMargin_val)
    CameraExcel.AddBottomMargin(builder, BottomMargin_val)
    CameraExcel.AddIgnoreEnemies(builder, IgnoreEnemies_val)
    CameraExcel.AddUseRailPointCompensation(builder, UseRailPointCompensation_val)
    return CameraExcel.End(builder)

def pack_CampaignChapterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignChapter") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    NormalImagePath_off = builder.CreateString(encrypt_string(data.get('NormalImagePath', ''), password))
    HardImagePath_off = builder.CreateString(encrypt_string(data.get('HardImagePath', ''), password))
    PreChapterId_vec = 0
    if 'PreChapterId' in data:
        PreChapterId_items = data['PreChapterId']
        CampaignChapterExcel.StartPreChapterIdVector(builder, len(PreChapterId_items))
        for item in reversed(PreChapterId_items):
            builder.PrependInt64(convert_long(item, password))
        PreChapterId_vec = builder.EndVector(len(PreChapterId_items))
    NormalCampaignStageId_vec = 0
    if 'NormalCampaignStageId' in data:
        NormalCampaignStageId_items = data['NormalCampaignStageId']
        CampaignChapterExcel.StartNormalCampaignStageIdVector(builder, len(NormalCampaignStageId_items))
        for item in reversed(NormalCampaignStageId_items):
            builder.PrependInt64(convert_long(item, password))
        NormalCampaignStageId_vec = builder.EndVector(len(NormalCampaignStageId_items))
    NormalExtraStageId_vec = 0
    if 'NormalExtraStageId' in data:
        NormalExtraStageId_items = data['NormalExtraStageId']
        CampaignChapterExcel.StartNormalExtraStageIdVector(builder, len(NormalExtraStageId_items))
        for item in reversed(NormalExtraStageId_items):
            builder.PrependInt64(convert_long(item, password))
        NormalExtraStageId_vec = builder.EndVector(len(NormalExtraStageId_items))
    HardCampaignStageId_vec = 0
    if 'HardCampaignStageId' in data:
        HardCampaignStageId_items = data['HardCampaignStageId']
        CampaignChapterExcel.StartHardCampaignStageIdVector(builder, len(HardCampaignStageId_items))
        for item in reversed(HardCampaignStageId_items):
            builder.PrependInt64(convert_long(item, password))
        HardCampaignStageId_vec = builder.EndVector(len(HardCampaignStageId_items))
    VeryHardCampaignStageId_vec = 0
    if 'VeryHardCampaignStageId' in data:
        VeryHardCampaignStageId_items = data['VeryHardCampaignStageId']
        CampaignChapterExcel.StartVeryHardCampaignStageIdVector(builder, len(VeryHardCampaignStageId_items))
        for item in reversed(VeryHardCampaignStageId_items):
            builder.PrependInt64(convert_long(item, password))
        VeryHardCampaignStageId_vec = builder.EndVector(len(VeryHardCampaignStageId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Order_val = convert_long(data.get('Order', 0), password)
    ChapterRewardId_val = convert_long(data.get('ChapterRewardId', 0), password)
    ChapterHardRewardId_val = convert_long(data.get('ChapterHardRewardId', 0), password)
    ChapterVeryHardRewardId_val = convert_long(data.get('ChapterVeryHardRewardId', 0), password)
    IsTacticSkip_val = data.get('IsTacticSkip', 0)
    CampaignChapterExcel.Start(builder)
    CampaignChapterExcel.AddId(builder, Id_val)
    CampaignChapterExcel.AddName(builder, Name_off)
    CampaignChapterExcel.AddNormalImagePath(builder, NormalImagePath_off)
    CampaignChapterExcel.AddHardImagePath(builder, HardImagePath_off)
    CampaignChapterExcel.AddOrder(builder, Order_val)
    CampaignChapterExcel.AddPreChapterId(builder, PreChapterId_vec)
    CampaignChapterExcel.AddChapterRewardId(builder, ChapterRewardId_val)
    CampaignChapterExcel.AddChapterHardRewardId(builder, ChapterHardRewardId_val)
    CampaignChapterExcel.AddChapterVeryHardRewardId(builder, ChapterVeryHardRewardId_val)
    CampaignChapterExcel.AddNormalCampaignStageId(builder, NormalCampaignStageId_vec)
    CampaignChapterExcel.AddNormalExtraStageId(builder, NormalExtraStageId_vec)
    CampaignChapterExcel.AddHardCampaignStageId(builder, HardCampaignStageId_vec)
    CampaignChapterExcel.AddVeryHardCampaignStageId(builder, VeryHardCampaignStageId_vec)
    CampaignChapterExcel.AddIsTacticSkip(builder, IsTacticSkip_val)
    return CampaignChapterExcel.End(builder)

def pack_CampaignChapterRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignChapterReward") if encrypt else None
    ChapterRewardParcelType_vec = 0
    if 'ChapterRewardParcelType' in data:
        ChapterRewardParcelType_items = data['ChapterRewardParcelType']
        CampaignChapterRewardExcel.StartChapterRewardParcelTypeVector(builder, len(ChapterRewardParcelType_items))
        for item in reversed(ChapterRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ChapterRewardParcelType_vec = builder.EndVector(len(ChapterRewardParcelType_items))
    ChapterRewardId_vec = 0
    if 'ChapterRewardId' in data:
        ChapterRewardId_items = data['ChapterRewardId']
        CampaignChapterRewardExcel.StartChapterRewardIdVector(builder, len(ChapterRewardId_items))
        for item in reversed(ChapterRewardId_items):
            builder.PrependInt64(convert_long(item, password))
        ChapterRewardId_vec = builder.EndVector(len(ChapterRewardId_items))
    ChapterRewardAmount_vec = 0
    if 'ChapterRewardAmount' in data:
        ChapterRewardAmount_items = data['ChapterRewardAmount']
        CampaignChapterRewardExcel.StartChapterRewardAmountVector(builder, len(ChapterRewardAmount_items))
        for item in reversed(ChapterRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        ChapterRewardAmount_vec = builder.EndVector(len(ChapterRewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CampaignChapterStar_val = convert_long(data.get('CampaignChapterStar', 0), password)
    CampaignChapterRewardExcel.Start(builder)
    CampaignChapterRewardExcel.AddId(builder, Id_val)
    CampaignChapterRewardExcel.AddCampaignChapterStar(builder, CampaignChapterStar_val)
    CampaignChapterRewardExcel.AddChapterRewardParcelType(builder, ChapterRewardParcelType_vec)
    CampaignChapterRewardExcel.AddChapterRewardId(builder, ChapterRewardId_vec)
    CampaignChapterRewardExcel.AddChapterRewardAmount(builder, ChapterRewardAmount_vec)
    return CampaignChapterRewardExcel.End(builder)

def pack_CampaignStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StageNumber_off = builder.CreateString(encrypt_string(data.get('StageNumber', ''), password))
    StrategyMap_off = builder.CreateString(encrypt_string(data.get('StrategyMap', ''), password))
    StrategyMapBG_off = builder.CreateString(encrypt_string(data.get('StrategyMapBG', ''), password))
    BgmId_off = builder.CreateString(encrypt_string(data.get('BgmId', ''), password))
    FirstClearReportEventName_off = builder.CreateString(encrypt_string(data.get('FirstClearReportEventName', ''), password))
    EnterScenarioGroupId_vec = 0
    if 'EnterScenarioGroupId' in data:
        EnterScenarioGroupId_items = data['EnterScenarioGroupId']
        CampaignStageExcel.StartEnterScenarioGroupIdVector(builder, len(EnterScenarioGroupId_items))
        for item in reversed(EnterScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnterScenarioGroupId_vec = builder.EndVector(len(EnterScenarioGroupId_items))
    ClearScenarioGroupId_vec = 0
    if 'ClearScenarioGroupId' in data:
        ClearScenarioGroupId_items = data['ClearScenarioGroupId']
        CampaignStageExcel.StartClearScenarioGroupIdVector(builder, len(ClearScenarioGroupId_items))
        for item in reversed(ClearScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearScenarioGroupId_vec = builder.EndVector(len(ClearScenarioGroupId_items))
    MinEquipmentTierForGuide_vec = 0
    if 'MinEquipmentTierForGuide' in data:
        MinEquipmentTierForGuide_items = data['MinEquipmentTierForGuide']
        CampaignStageExcel.StartMinEquipmentTierForGuideVector(builder, len(MinEquipmentTierForGuide_items))
        for item in reversed(MinEquipmentTierForGuide_items):
            builder.PrependInt64(convert_long(item, password))
        MinEquipmentTierForGuide_vec = builder.EndVector(len(MinEquipmentTierForGuide_items))
    MinSkillLevelForGuide_vec = 0
    if 'MinSkillLevelForGuide' in data:
        MinSkillLevelForGuide_items = data['MinSkillLevelForGuide']
        CampaignStageExcel.StartMinSkillLevelForGuideVector(builder, len(MinSkillLevelForGuide_items))
        for item in reversed(MinSkillLevelForGuide_items):
            builder.PrependInt64(convert_long(item, password))
        MinSkillLevelForGuide_vec = builder.EndVector(len(MinSkillLevelForGuide_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Deprecated_val = data.get('Deprecated', 0)
    CleardScenarioId_val = convert_long(data.get('CleardScenarioId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    StageEnterEchelonCount_val = convert_int(data.get('StageEnterEchelonCount', 0), password)
    StarConditionTacticRankSCount_val = convert_long(data.get('StarConditionTacticRankSCount', 0), password)
    StarConditionTurnCount_val = convert_long(data.get('StarConditionTurnCount', 0), password)
    CampaignStageRewardId_val = convert_long(data.get('CampaignStageRewardId', 0), password)
    MaxTurn_val = convert_int(data.get('MaxTurn', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    RecommandLevelGapForGuide_val = convert_int(data.get('RecommandLevelGapForGuide', 0), password)
    StrategyEnvironment_val = convert_int(getattr(StrategyEnvironment, data.get('StrategyEnvironment', 0)), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    StrategySkipGroundId_val = convert_int(data.get('StrategySkipGroundId', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    TacticRewardExp_val = convert_long(data.get('TacticRewardExp', 0), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    CampaignStageExcel.Start(builder)
    CampaignStageExcel.AddId(builder, Id_val)
    CampaignStageExcel.AddDeprecated(builder, Deprecated_val)
    CampaignStageExcel.AddName(builder, Name_off)
    CampaignStageExcel.AddStageNumber(builder, StageNumber_off)
    CampaignStageExcel.AddCleardScenarioId(builder, CleardScenarioId_val)
    CampaignStageExcel.AddBattleDuration(builder, BattleDuration_val)
    CampaignStageExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    CampaignStageExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    CampaignStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    CampaignStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount_val)
    CampaignStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount_val)
    CampaignStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount_val)
    CampaignStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_vec)
    CampaignStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_vec)
    CampaignStageExcel.AddStrategyMap(builder, StrategyMap_off)
    CampaignStageExcel.AddStrategyMapBG(builder, StrategyMapBG_off)
    CampaignStageExcel.AddCampaignStageRewardId(builder, CampaignStageRewardId_val)
    CampaignStageExcel.AddMaxTurn(builder, MaxTurn_val)
    CampaignStageExcel.AddStageTopography(builder, StageTopography_val)
    CampaignStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    CampaignStageExcel.AddRecommandLevelGapForGuide(builder, RecommandLevelGapForGuide_val)
    CampaignStageExcel.AddMinEquipmentTierForGuide(builder, MinEquipmentTierForGuide_vec)
    CampaignStageExcel.AddMinSkillLevelForGuide(builder, MinSkillLevelForGuide_vec)
    CampaignStageExcel.AddBgmId(builder, BgmId_off)
    CampaignStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment_val)
    CampaignStageExcel.AddGroundId(builder, GroundId_val)
    CampaignStageExcel.AddStrategySkipGroundId(builder, StrategySkipGroundId_val)
    CampaignStageExcel.AddContentType(builder, ContentType_val)
    CampaignStageExcel.AddBGMId(builder, BGMId_val)
    CampaignStageExcel.AddFirstClearReportEventName(builder, FirstClearReportEventName_off)
    CampaignStageExcel.AddTacticRewardExp(builder, TacticRewardExp_val)
    CampaignStageExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    CampaignStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return CampaignStageExcel.End(builder)

def pack_CampaignStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    StageRewardProb_val = convert_int(data.get('StageRewardProb', 0), password)
    StageRewardParcelType_val = convert_int(getattr(ParcelType, data.get('StageRewardParcelType', 0)), password)
    StageRewardId_val = convert_long(data.get('StageRewardId', 0), password)
    StageRewardAmount_val = convert_int(data.get('StageRewardAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    CampaignStageRewardExcel.Start(builder)
    CampaignStageRewardExcel.AddGroupId(builder, GroupId_val)
    CampaignStageRewardExcel.AddRewardTag(builder, RewardTag_val)
    CampaignStageRewardExcel.AddStageRewardProb(builder, StageRewardProb_val)
    CampaignStageRewardExcel.AddStageRewardParcelType(builder, StageRewardParcelType_val)
    CampaignStageRewardExcel.AddStageRewardId(builder, StageRewardId_val)
    CampaignStageRewardExcel.AddStageRewardAmount(builder, StageRewardAmount_val)
    CampaignStageRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return CampaignStageRewardExcel.End(builder)

def pack_CampaignStrategyObjectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignStrategyObject") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    StrategyRewardName_off = builder.CreateString(encrypt_string(data.get('StrategyRewardName', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Key_val = convert_uint(data.get('Key', 0), password)
    StrategyObjectType_val = convert_int(getattr(StrategyObjectType, data.get('StrategyObjectType', 0)), password)
    StrategyRewardParcelType_val = convert_int(getattr(ParcelType, data.get('StrategyRewardParcelType', 0)), password)
    StrategyRewardID_val = convert_long(data.get('StrategyRewardID', 0), password)
    StrategyRewardAmount_val = convert_int(data.get('StrategyRewardAmount', 0), password)
    StrategySightRange_val = convert_long(data.get('StrategySightRange', 0), password)
    PortalId_val = convert_int(data.get('PortalId', 0), password)
    HealValue_val = convert_int(data.get('HealValue', 0), password)
    SwithId_val = convert_int(data.get('SwithId', 0), password)
    BuffId_val = convert_int(data.get('BuffId', 0), password)
    Disposable_val = data.get('Disposable', 0)
    CampaignStrategyObjectExcel.Start(builder)
    CampaignStrategyObjectExcel.AddId(builder, Id_val)
    CampaignStrategyObjectExcel.AddKey(builder, Key_val)
    CampaignStrategyObjectExcel.AddName(builder, Name_off)
    CampaignStrategyObjectExcel.AddPrefabName(builder, PrefabName_off)
    CampaignStrategyObjectExcel.AddStrategyObjectType(builder, StrategyObjectType_val)
    CampaignStrategyObjectExcel.AddStrategyRewardParcelType(builder, StrategyRewardParcelType_val)
    CampaignStrategyObjectExcel.AddStrategyRewardID(builder, StrategyRewardID_val)
    CampaignStrategyObjectExcel.AddStrategyRewardName(builder, StrategyRewardName_off)
    CampaignStrategyObjectExcel.AddStrategyRewardAmount(builder, StrategyRewardAmount_val)
    CampaignStrategyObjectExcel.AddStrategySightRange(builder, StrategySightRange_val)
    CampaignStrategyObjectExcel.AddPortalId(builder, PortalId_val)
    CampaignStrategyObjectExcel.AddHealValue(builder, HealValue_val)
    CampaignStrategyObjectExcel.AddSwithId(builder, SwithId_val)
    CampaignStrategyObjectExcel.AddBuffId(builder, BuffId_val)
    CampaignStrategyObjectExcel.AddDisposable(builder, Disposable_val)
    return CampaignStrategyObjectExcel.End(builder)

def pack_CampaignUnitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CampaignUnit") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    StrategyPrefabName_off = builder.CreateString(encrypt_string(data.get('StrategyPrefabName', ''), password))
    EnterScenarioGroupId_vec = 0
    if 'EnterScenarioGroupId' in data:
        EnterScenarioGroupId_items = data['EnterScenarioGroupId']
        CampaignUnitExcel.StartEnterScenarioGroupIdVector(builder, len(EnterScenarioGroupId_items))
        for item in reversed(EnterScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnterScenarioGroupId_vec = builder.EndVector(len(EnterScenarioGroupId_items))
    ClearScenarioGroupId_vec = 0
    if 'ClearScenarioGroupId' in data:
        ClearScenarioGroupId_items = data['ClearScenarioGroupId']
        CampaignUnitExcel.StartClearScenarioGroupIdVector(builder, len(ClearScenarioGroupId_items))
        for item in reversed(ClearScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearScenarioGroupId_vec = builder.EndVector(len(ClearScenarioGroupId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Key_val = convert_uint(data.get('Key', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    MoveRange_val = convert_int(data.get('MoveRange', 0), password)
    AIMoveType_val = convert_int(getattr(StrategyAIType, data.get('AIMoveType', 0)), password)
    Grade_val = convert_int(getattr(HexaUnitGrade, data.get('Grade', 0)), password)
    EnvironmentType_val = convert_int(getattr(TacticEnvironment, data.get('EnvironmentType', 0)), password)
    Scale_val = encrypt_float(data.get('Scale', 0), password)
    IsTacticSkip_val = data.get('IsTacticSkip', 0)
    CampaignUnitExcel.Start(builder)
    CampaignUnitExcel.AddId(builder, Id_val)
    CampaignUnitExcel.AddKey(builder, Key_val)
    CampaignUnitExcel.AddName(builder, Name_off)
    CampaignUnitExcel.AddPrefabName(builder, PrefabName_off)
    CampaignUnitExcel.AddStrategyPrefabName(builder, StrategyPrefabName_off)
    CampaignUnitExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_vec)
    CampaignUnitExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_vec)
    CampaignUnitExcel.AddGroundId(builder, GroundId_val)
    CampaignUnitExcel.AddMoveRange(builder, MoveRange_val)
    CampaignUnitExcel.AddAIMoveType(builder, AIMoveType_val)
    CampaignUnitExcel.AddGrade(builder, Grade_val)
    CampaignUnitExcel.AddEnvironmentType(builder, EnvironmentType_val)
    CampaignUnitExcel.AddScale(builder, Scale_val)
    CampaignUnitExcel.AddIsTacticSkip(builder, IsTacticSkip_val)
    return CampaignUnitExcel.End(builder)

def pack_CharacterAcademyTagsExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterAcademyTags") if encrypt else None
    FavorTags_vec = 0
    if 'FavorTags' in data:
        FavorTags_items = data['FavorTags']
        CharacterAcademyTagsExcel.StartFavorTagsVector(builder, len(FavorTags_items))
        for item in reversed(FavorTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        FavorTags_vec = builder.EndVector(len(FavorTags_items))
    FavorItemTags_vec = 0
    if 'FavorItemTags' in data:
        FavorItemTags_items = data['FavorItemTags']
        CharacterAcademyTagsExcel.StartFavorItemTagsVector(builder, len(FavorItemTags_items))
        for item in reversed(FavorItemTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        FavorItemTags_vec = builder.EndVector(len(FavorItemTags_items))
    FavorItemUniqueTags_vec = 0
    if 'FavorItemUniqueTags' in data:
        FavorItemUniqueTags_items = data['FavorItemUniqueTags']
        CharacterAcademyTagsExcel.StartFavorItemUniqueTagsVector(builder, len(FavorItemUniqueTags_items))
        for item in reversed(FavorItemUniqueTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        FavorItemUniqueTags_vec = builder.EndVector(len(FavorItemUniqueTags_items))
    ForbiddenTags_vec = 0
    if 'ForbiddenTags' in data:
        ForbiddenTags_items = data['ForbiddenTags']
        CharacterAcademyTagsExcel.StartForbiddenTagsVector(builder, len(ForbiddenTags_items))
        for item in reversed(ForbiddenTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        ForbiddenTags_vec = builder.EndVector(len(ForbiddenTags_items))
    ZoneWhiteListTags_vec = 0
    if 'ZoneWhiteListTags' in data:
        ZoneWhiteListTags_items = data['ZoneWhiteListTags']
        CharacterAcademyTagsExcel.StartZoneWhiteListTagsVector(builder, len(ZoneWhiteListTags_items))
        for item in reversed(ZoneWhiteListTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        ZoneWhiteListTags_vec = builder.EndVector(len(ZoneWhiteListTags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterAcademyTagsExcel.Start(builder)
    CharacterAcademyTagsExcel.AddId(builder, Id_val)
    CharacterAcademyTagsExcel.AddFavorTags(builder, FavorTags_vec)
    CharacterAcademyTagsExcel.AddFavorItemTags(builder, FavorItemTags_vec)
    CharacterAcademyTagsExcel.AddFavorItemUniqueTags(builder, FavorItemUniqueTags_vec)
    CharacterAcademyTagsExcel.AddForbiddenTags(builder, ForbiddenTags_vec)
    CharacterAcademyTagsExcel.AddZoneWhiteListTags(builder, ZoneWhiteListTags_vec)
    return CharacterAcademyTagsExcel.End(builder)

def pack_CharacterAIExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterAI") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    EngageType_val = convert_int(getattr(EngageType, data.get('EngageType', 0)), password)
    Positioning_val = convert_int(getattr(PositioningType, data.get('Positioning', 0)), password)
    CheckCanUseAutoSkill_val = data.get('CheckCanUseAutoSkill', 0)
    DistanceReduceRatioObstaclePath_val = convert_long(data.get('DistanceReduceRatioObstaclePath', 0), password)
    DistanceReduceObstaclePath_val = convert_long(data.get('DistanceReduceObstaclePath', 0), password)
    DistanceReduceRatioFormationPath_val = convert_long(data.get('DistanceReduceRatioFormationPath', 0), password)
    DistanceReduceFormationPath_val = convert_long(data.get('DistanceReduceFormationPath', 0), password)
    MinimumPositionGap_val = convert_long(data.get('MinimumPositionGap', 0), password)
    CanUseObstacleOfKneelMotion_val = data.get('CanUseObstacleOfKneelMotion', 0)
    CanUseObstacleOfStandMotion_val = data.get('CanUseObstacleOfStandMotion', 0)
    HasTargetSwitchingMotion_val = data.get('HasTargetSwitchingMotion', 0)
    CharacterAIExcel.Start(builder)
    CharacterAIExcel.AddId(builder, Id_val)
    CharacterAIExcel.AddEngageType(builder, EngageType_val)
    CharacterAIExcel.AddPositioning(builder, Positioning_val)
    CharacterAIExcel.AddCheckCanUseAutoSkill(builder, CheckCanUseAutoSkill_val)
    CharacterAIExcel.AddDistanceReduceRatioObstaclePath(builder, DistanceReduceRatioObstaclePath_val)
    CharacterAIExcel.AddDistanceReduceObstaclePath(builder, DistanceReduceObstaclePath_val)
    CharacterAIExcel.AddDistanceReduceRatioFormationPath(builder, DistanceReduceRatioFormationPath_val)
    CharacterAIExcel.AddDistanceReduceFormationPath(builder, DistanceReduceFormationPath_val)
    CharacterAIExcel.AddMinimumPositionGap(builder, MinimumPositionGap_val)
    CharacterAIExcel.AddCanUseObstacleOfKneelMotion(builder, CanUseObstacleOfKneelMotion_val)
    CharacterAIExcel.AddCanUseObstacleOfStandMotion(builder, CanUseObstacleOfStandMotion_val)
    CharacterAIExcel.AddHasTargetSwitchingMotion(builder, HasTargetSwitchingMotion_val)
    return CharacterAIExcel.End(builder)

def pack_CharacterCalculationLimitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterCalculationLimit") if encrypt else None
    LimitStartValue_vec = 0
    if 'LimitStartValue' in data:
        LimitStartValue_items = data['LimitStartValue']
        CharacterCalculationLimitExcel.StartLimitStartValueVector(builder, len(LimitStartValue_items))
        for item in reversed(LimitStartValue_items):
            builder.PrependInt64(convert_long(item, password))
        LimitStartValue_vec = builder.EndVector(len(LimitStartValue_items))
    DecreaseRate_vec = 0
    if 'DecreaseRate' in data:
        DecreaseRate_items = data['DecreaseRate']
        CharacterCalculationLimitExcel.StartDecreaseRateVector(builder, len(DecreaseRate_items))
        for item in reversed(DecreaseRate_items):
            builder.PrependInt64(convert_long(item, password))
        DecreaseRate_vec = builder.EndVector(len(DecreaseRate_items))
    Id_val = convert_long(data.get('Id', 0), password)
    TacticEntityType_val = convert_int(getattr(TacticEntityType, data.get('TacticEntityType', 0)), password)
    CalculationValue_val = convert_int(getattr(BattleCalculationStat, data.get('CalculationValue', 0)), password)
    MinValue_val = convert_long(data.get('MinValue', 0), password)
    MaxValue_val = convert_long(data.get('MaxValue', 0), password)
    CharacterCalculationLimitExcel.Start(builder)
    CharacterCalculationLimitExcel.AddId(builder, Id_val)
    CharacterCalculationLimitExcel.AddTacticEntityType(builder, TacticEntityType_val)
    CharacterCalculationLimitExcel.AddCalculationValue(builder, CalculationValue_val)
    CharacterCalculationLimitExcel.AddMinValue(builder, MinValue_val)
    CharacterCalculationLimitExcel.AddMaxValue(builder, MaxValue_val)
    CharacterCalculationLimitExcel.AddLimitStartValue(builder, LimitStartValue_vec)
    CharacterCalculationLimitExcel.AddDecreaseRate(builder, DecreaseRate_vec)
    return CharacterCalculationLimitExcel.End(builder)

def pack_CharacterCombatSkinExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterCombatSkin") if encrypt else None
    GroupId_off = builder.CreateString(encrypt_string(data.get('GroupId', ''), password))
    ResourcePath_off = builder.CreateString(encrypt_string(data.get('ResourcePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    CharacterCombatSkinExcel.Start(builder)
    CharacterCombatSkinExcel.AddGroupId(builder, GroupId_off)
    CharacterCombatSkinExcel.AddUniqueId(builder, UniqueId_val)
    CharacterCombatSkinExcel.AddResourcePath(builder, ResourcePath_off)
    return CharacterCombatSkinExcel.End(builder)

def pack_CharacterDialogBattlePassExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogBattlePass") if encrypt else None
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        CharacterDialogBattlePassExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    OriginalCharacterId_val = convert_long(data.get('OriginalCharacterId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    BattlePassID_val = convert_long(data.get('BattlePassID', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    DialogCategory_val = convert_int(getattr(DialogCategory, data.get('DialogCategory', 0)), password)
    DialogCondition_val = convert_int(getattr(DialogCondition, data.get('DialogCondition', 0)), password)
    DialogConditionDetail_val = convert_int(getattr(DialogConditionDetail, data.get('DialogConditionDetail', 0)), password)
    DialogConditionDetailValue_val = convert_long(data.get('DialogConditionDetailValue', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DialogType_val = convert_int(getattr(DialogType, data.get('DialogType', 0)), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    CVCollectionType_val = convert_int(getattr(CVCollectionType, data.get('CVCollectionType', 0)), password)
    UnlockBattlePassId_val = convert_long(data.get('UnlockBattlePassId', 0), password)
    CharacterDialogBattlePassExcel.Start(builder)
    CharacterDialogBattlePassExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    CharacterDialogBattlePassExcel.AddOriginalCharacterId(builder, OriginalCharacterId_val)
    CharacterDialogBattlePassExcel.AddDisplayOrder(builder, DisplayOrder_val)
    CharacterDialogBattlePassExcel.AddBattlePassID(builder, BattlePassID_val)
    CharacterDialogBattlePassExcel.AddProductionStep(builder, ProductionStep_val)
    CharacterDialogBattlePassExcel.AddDialogCategory(builder, DialogCategory_val)
    CharacterDialogBattlePassExcel.AddDialogCondition(builder, DialogCondition_val)
    CharacterDialogBattlePassExcel.AddDialogConditionDetail(builder, DialogConditionDetail_val)
    CharacterDialogBattlePassExcel.AddDialogConditionDetailValue(builder, DialogConditionDetailValue_val)
    CharacterDialogBattlePassExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogBattlePassExcel.AddDialogType(builder, DialogType_val)
    CharacterDialogBattlePassExcel.AddDuration(builder, Duration_val)
    CharacterDialogBattlePassExcel.AddAnimationName(builder, AnimationName_off)
    CharacterDialogBattlePassExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogBattlePassExcel.AddLocalizeJP(builder, LocalizeJP_off)
    CharacterDialogBattlePassExcel.AddVoiceId(builder, VoiceId_vec)
    CharacterDialogBattlePassExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CharacterDialogBattlePassExcel.AddCVCollectionType(builder, CVCollectionType_val)
    CharacterDialogBattlePassExcel.AddUnlockBattlePassId(builder, UnlockBattlePassId_val)
    CharacterDialogBattlePassExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    return CharacterDialogBattlePassExcel.End(builder)

def pack_CharacterDialogEmojiExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogEmoji") if encrypt else None
    DialogType_off = builder.CreateString(encrypt_string(data.get('DialogType', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    TargetIndex_val = convert_int(data.get('TargetIndex', 0), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    HideUI_val = data.get('HideUI', 0)
    CharacterDialogEmojiExcel.Start(builder)
    CharacterDialogEmojiExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogEmojiExcel.AddTargetIndex(builder, TargetIndex_val)
    CharacterDialogEmojiExcel.AddDialogType(builder, DialogType_off)
    CharacterDialogEmojiExcel.AddDuration(builder, Duration_val)
    CharacterDialogEmojiExcel.AddHideUI(builder, HideUI_val)
    CharacterDialogEmojiExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogEmojiExcel.AddLocalizeJP(builder, LocalizeJP_off)
    return CharacterDialogEmojiExcel.End(builder)

def pack_CharacterDialogEventExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogEvent") if encrypt else None
    ActionName_off = builder.CreateString(encrypt_string(data.get('ActionName', ''), password))
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        CharacterDialogEventExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    OriginalCharacterId_val = convert_long(data.get('OriginalCharacterId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    EventID_val = convert_long(data.get('EventID', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    DialogCategory_val = convert_int(getattr(DialogCategory, data.get('DialogCategory', 0)), password)
    DialogCondition_val = convert_int(getattr(DialogCondition, data.get('DialogCondition', 0)), password)
    DialogConditionDetail_val = convert_int(getattr(DialogConditionDetail, data.get('DialogConditionDetail', 0)), password)
    DialogConditionDetailValue_val = convert_long(data.get('DialogConditionDetailValue', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DialogType_val = convert_int(getattr(DialogType, data.get('DialogType', 0)), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    CVCollectionType_val = convert_int(getattr(CVCollectionType, data.get('CVCollectionType', 0)), password)
    CVUnlockScenarioType_val = convert_int(getattr(CVUnlockScenarioType, data.get('CVUnlockScenarioType', 0)), password)
    UnlockEventSeason_val = convert_long(data.get('UnlockEventSeason', 0), password)
    ScenarioGroupId_val = convert_long(data.get('ScenarioGroupId', 0), password)
    CharacterDialogEventExcel.Start(builder)
    CharacterDialogEventExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    CharacterDialogEventExcel.AddOriginalCharacterId(builder, OriginalCharacterId_val)
    CharacterDialogEventExcel.AddDisplayOrder(builder, DisplayOrder_val)
    CharacterDialogEventExcel.AddEventID(builder, EventID_val)
    CharacterDialogEventExcel.AddProductionStep(builder, ProductionStep_val)
    CharacterDialogEventExcel.AddDialogCategory(builder, DialogCategory_val)
    CharacterDialogEventExcel.AddDialogCondition(builder, DialogCondition_val)
    CharacterDialogEventExcel.AddDialogConditionDetail(builder, DialogConditionDetail_val)
    CharacterDialogEventExcel.AddDialogConditionDetailValue(builder, DialogConditionDetailValue_val)
    CharacterDialogEventExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogEventExcel.AddDialogType(builder, DialogType_val)
    CharacterDialogEventExcel.AddActionName(builder, ActionName_off)
    CharacterDialogEventExcel.AddDuration(builder, Duration_val)
    CharacterDialogEventExcel.AddAnimationName(builder, AnimationName_off)
    CharacterDialogEventExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogEventExcel.AddLocalizeJP(builder, LocalizeJP_off)
    CharacterDialogEventExcel.AddVoiceId(builder, VoiceId_vec)
    CharacterDialogEventExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CharacterDialogEventExcel.AddCVCollectionType(builder, CVCollectionType_val)
    CharacterDialogEventExcel.AddCVUnlockScenarioType(builder, CVUnlockScenarioType_val)
    CharacterDialogEventExcel.AddUnlockEventSeason(builder, UnlockEventSeason_val)
    CharacterDialogEventExcel.AddScenarioGroupId(builder, ScenarioGroupId_val)
    CharacterDialogEventExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    return CharacterDialogEventExcel.End(builder)

def pack_CharacterDialogExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialog") if encrypt else None
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    ActionName_off = builder.CreateString(encrypt_string(data.get('ActionName', ''), password))
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        CharacterDialogExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    DialogCategory_val = convert_int(getattr(DialogCategory, data.get('DialogCategory', 0)), password)
    DialogCondition_val = convert_int(getattr(DialogCondition, data.get('DialogCondition', 0)), password)
    Anniversary_val = convert_int(getattr(Anniversary, data.get('Anniversary', 0)), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DialogType_val = convert_int(getattr(DialogType, data.get('DialogType', 0)), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    ApplyPosition_val = data.get('ApplyPosition', 0)
    PosX_val = encrypt_float(data.get('PosX', 0), password)
    PosY_val = encrypt_float(data.get('PosY', 0), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    CVCollectionType_val = convert_int(getattr(CVCollectionType, data.get('CVCollectionType', 0)), password)
    UnlockFavorRank_val = convert_long(data.get('UnlockFavorRank', 0), password)
    UnlockEquipWeapon_val = data.get('UnlockEquipWeapon', 0)
    CharacterDialogExcel.Start(builder)
    CharacterDialogExcel.AddCharacterId(builder, CharacterId_val)
    CharacterDialogExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    CharacterDialogExcel.AddDisplayOrder(builder, DisplayOrder_val)
    CharacterDialogExcel.AddProductionStep(builder, ProductionStep_val)
    CharacterDialogExcel.AddDialogCategory(builder, DialogCategory_val)
    CharacterDialogExcel.AddDialogCondition(builder, DialogCondition_val)
    CharacterDialogExcel.AddAnniversary(builder, Anniversary_val)
    CharacterDialogExcel.AddStartDate(builder, StartDate_off)
    CharacterDialogExcel.AddEndDate(builder, EndDate_off)
    CharacterDialogExcel.AddGroupId(builder, GroupId_val)
    CharacterDialogExcel.AddDialogType(builder, DialogType_val)
    CharacterDialogExcel.AddActionName(builder, ActionName_off)
    CharacterDialogExcel.AddDuration(builder, Duration_val)
    CharacterDialogExcel.AddAnimationName(builder, AnimationName_off)
    CharacterDialogExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogExcel.AddLocalizeJP(builder, LocalizeJP_off)
    CharacterDialogExcel.AddVoiceId(builder, VoiceId_vec)
    CharacterDialogExcel.AddApplyPosition(builder, ApplyPosition_val)
    CharacterDialogExcel.AddPosX(builder, PosX_val)
    CharacterDialogExcel.AddPosY(builder, PosY_val)
    CharacterDialogExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CharacterDialogExcel.AddCVCollectionType(builder, CVCollectionType_val)
    CharacterDialogExcel.AddUnlockFavorRank(builder, UnlockFavorRank_val)
    CharacterDialogExcel.AddUnlockEquipWeapon(builder, UnlockEquipWeapon_val)
    CharacterDialogExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    return CharacterDialogExcel.End(builder)

def pack_CharacterDialogSubtitleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterDialogSubtitle") if encrypt else None
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    Separate_val = data.get('Separate', 0)
    CharacterDialogSubtitleExcel.Start(builder)
    CharacterDialogSubtitleExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    CharacterDialogSubtitleExcel.AddCharacterId(builder, CharacterId_val)
    CharacterDialogSubtitleExcel.AddDuration(builder, Duration_val)
    CharacterDialogSubtitleExcel.AddSeparate(builder, Separate_val)
    CharacterDialogSubtitleExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterDialogSubtitleExcel.AddLocalizeJP(builder, LocalizeJP_off)
    return CharacterDialogSubtitleExcel.End(builder)

def pack_CharacterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Character") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    ReleaseDate_off = builder.CreateString(encrypt_string(data.get('ReleaseDate', ''), password))
    CollectionVisibleStartDate_off = builder.CreateString(encrypt_string(data.get('CollectionVisibleStartDate', ''), password))
    CollectionVisibleEndDate_off = builder.CreateString(encrypt_string(data.get('CollectionVisibleEndDate', ''), password))
    ScenarioCharacter_off = builder.CreateString(encrypt_string(data.get('ScenarioCharacter', ''), password))
    EquipmentSlot_vec = 0
    if 'EquipmentSlot' in data:
        EquipmentSlot_items = data['EquipmentSlot']
        CharacterExcel.StartEquipmentSlotVector(builder, len(EquipmentSlot_items))
        for item in reversed(EquipmentSlot_items):
            builder.PrependInt32(convert_int(getattr(EquipmentCategory, item), password))
        EquipmentSlot_vec = builder.EndVector(len(EquipmentSlot_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        CharacterExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CostumeGroupId_val = convert_long(data.get('CostumeGroupId', 0), password)
    IsPlayable_val = data.get('IsPlayable', 0)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    IsPlayableCharacter_val = data.get('IsPlayableCharacter', 0)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    IsNPC_val = data.get('IsNPC', 0)
    TacticEntityType_val = convert_int(getattr(TacticEntityType, data.get('TacticEntityType', 0)), password)
    CanSurvive_val = data.get('CanSurvive', 0)
    IsDummy_val = data.get('IsDummy', 0)
    SubPartsCount_val = convert_int(data.get('SubPartsCount', 0), password)
    TacticRole_val = convert_int(getattr(TacticRole, data.get('TacticRole', 0)), password)
    WeaponType_val = convert_int(getattr(WeaponType, data.get('WeaponType', 0)), password)
    TacticRange_val = convert_int(getattr(TacticRange, data.get('TacticRange', 0)), password)
    BulletType_val = convert_int(getattr(BulletType, data.get('BulletType', 0)), password)
    ArmorType_val = convert_int(getattr(ArmorType, data.get('ArmorType', 0)), password)
    AimIKType_val = convert_int(getattr(AimIKType, data.get('AimIKType', 0)), password)
    School_val = convert_int(getattr(School, data.get('School', 0)), password)
    Club_val = convert_int(getattr(Club, data.get('Club', 0)), password)
    DefaultStarGrade_val = convert_int(data.get('DefaultStarGrade', 0), password)
    MaxStarGrade_val = convert_int(data.get('MaxStarGrade', 0), password)
    StatLevelUpType_val = convert_int(getattr(StatLevelUpType, data.get('StatLevelUpType', 0)), password)
    SquadType_val = convert_int(getattr(SquadType, data.get('SquadType', 0)), password)
    Jumpable_val = data.get('Jumpable', 0)
    PersonalityId_val = convert_long(data.get('PersonalityId', 0), password)
    CharacterAIId_val = convert_long(data.get('CharacterAIId', 0), password)
    ExternalBTId_val = convert_long(data.get('ExternalBTId', 0), password)
    MainCombatStyleId_val = convert_long(data.get('MainCombatStyleId', 0), password)
    CombatStyleIndex_val = convert_int(data.get('CombatStyleIndex', 0), password)
    SpawnTemplateId_val = convert_uint(data.get('SpawnTemplateId', 0), password)
    FavorLevelupType_val = convert_int(data.get('FavorLevelupType', 0), password)
    WeaponLocalizeId_val = convert_uint(data.get('WeaponLocalizeId', 0), password)
    DisplayEnemyInfo_val = data.get('DisplayEnemyInfo', 0)
    BodyRadius_val = convert_long(data.get('BodyRadius', 0), password)
    RandomEffectRadius_val = convert_long(data.get('RandomEffectRadius', 0), password)
    HPBarHide_val = data.get('HPBarHide', 0)
    HpBarHeight_val = encrypt_float(data.get('HpBarHeight', 0), password)
    HighlightFloaterHeight_val = encrypt_float(data.get('HighlightFloaterHeight', 0), password)
    EmojiOffsetX_val = encrypt_float(data.get('EmojiOffsetX', 0), password)
    EmojiOffsetY_val = encrypt_float(data.get('EmojiOffsetY', 0), password)
    MoveStartFrame_val = convert_int(data.get('MoveStartFrame', 0), password)
    MoveEndFrame_val = convert_int(data.get('MoveEndFrame', 0), password)
    JumpMotionFrame_val = convert_int(data.get('JumpMotionFrame', 0), password)
    AppearFrame_val = convert_int(data.get('AppearFrame', 0), password)
    CanMove_val = data.get('CanMove', 0)
    CanFix_val = data.get('CanFix', 0)
    CanCrowdControl_val = data.get('CanCrowdControl', 0)
    CanBattleItemMove_val = data.get('CanBattleItemMove', 0)
    IgnoreObstacle_val = data.get('IgnoreObstacle', 0)
    IsAirUnit_val = data.get('IsAirUnit', 0)
    AirUnitHeight_val = convert_long(data.get('AirUnitHeight', 0), password)
    SecretStoneItemId_val = convert_long(data.get('SecretStoneItemId', 0), password)
    SecretStoneItemAmount_val = convert_int(data.get('SecretStoneItemAmount', 0), password)
    CharacterPieceItemId_val = convert_long(data.get('CharacterPieceItemId', 0), password)
    CharacterPieceItemAmount_val = convert_int(data.get('CharacterPieceItemAmount', 0), password)
    CombineRecipeId_val = convert_long(data.get('CombineRecipeId', 0), password)
    CharacterExcel.Start(builder)
    CharacterExcel.AddId(builder, Id_val)
    CharacterExcel.AddDevName(builder, DevName_off)
    CharacterExcel.AddCostumeGroupId(builder, CostumeGroupId_val)
    CharacterExcel.AddIsPlayable(builder, IsPlayable_val)
    CharacterExcel.AddProductionStep(builder, ProductionStep_val)
    CharacterExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CharacterExcel.AddReleaseDate(builder, ReleaseDate_off)
    CharacterExcel.AddCollectionVisibleStartDate(builder, CollectionVisibleStartDate_off)
    CharacterExcel.AddCollectionVisibleEndDate(builder, CollectionVisibleEndDate_off)
    CharacterExcel.AddIsPlayableCharacter(builder, IsPlayableCharacter_val)
    CharacterExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    CharacterExcel.AddRarity(builder, Rarity_val)
    CharacterExcel.AddIsNPC(builder, IsNPC_val)
    CharacterExcel.AddTacticEntityType(builder, TacticEntityType_val)
    CharacterExcel.AddCanSurvive(builder, CanSurvive_val)
    CharacterExcel.AddIsDummy(builder, IsDummy_val)
    CharacterExcel.AddSubPartsCount(builder, SubPartsCount_val)
    CharacterExcel.AddTacticRole(builder, TacticRole_val)
    CharacterExcel.AddWeaponType(builder, WeaponType_val)
    CharacterExcel.AddTacticRange(builder, TacticRange_val)
    CharacterExcel.AddBulletType(builder, BulletType_val)
    CharacterExcel.AddArmorType(builder, ArmorType_val)
    CharacterExcel.AddAimIKType(builder, AimIKType_val)
    CharacterExcel.AddSchool(builder, School_val)
    CharacterExcel.AddClub(builder, Club_val)
    CharacterExcel.AddDefaultStarGrade(builder, DefaultStarGrade_val)
    CharacterExcel.AddMaxStarGrade(builder, MaxStarGrade_val)
    CharacterExcel.AddStatLevelUpType(builder, StatLevelUpType_val)
    CharacterExcel.AddSquadType(builder, SquadType_val)
    CharacterExcel.AddJumpable(builder, Jumpable_val)
    CharacterExcel.AddPersonalityId(builder, PersonalityId_val)
    CharacterExcel.AddCharacterAIId(builder, CharacterAIId_val)
    CharacterExcel.AddExternalBTId(builder, ExternalBTId_val)
    CharacterExcel.AddMainCombatStyleId(builder, MainCombatStyleId_val)
    CharacterExcel.AddCombatStyleIndex(builder, CombatStyleIndex_val)
    CharacterExcel.AddScenarioCharacter(builder, ScenarioCharacter_off)
    CharacterExcel.AddSpawnTemplateId(builder, SpawnTemplateId_val)
    CharacterExcel.AddFavorLevelupType(builder, FavorLevelupType_val)
    CharacterExcel.AddEquipmentSlot(builder, EquipmentSlot_vec)
    CharacterExcel.AddWeaponLocalizeId(builder, WeaponLocalizeId_val)
    CharacterExcel.AddDisplayEnemyInfo(builder, DisplayEnemyInfo_val)
    CharacterExcel.AddBodyRadius(builder, BodyRadius_val)
    CharacterExcel.AddRandomEffectRadius(builder, RandomEffectRadius_val)
    CharacterExcel.AddHPBarHide(builder, HPBarHide_val)
    CharacterExcel.AddHpBarHeight(builder, HpBarHeight_val)
    CharacterExcel.AddHighlightFloaterHeight(builder, HighlightFloaterHeight_val)
    CharacterExcel.AddEmojiOffsetX(builder, EmojiOffsetX_val)
    CharacterExcel.AddEmojiOffsetY(builder, EmojiOffsetY_val)
    CharacterExcel.AddMoveStartFrame(builder, MoveStartFrame_val)
    CharacterExcel.AddMoveEndFrame(builder, MoveEndFrame_val)
    CharacterExcel.AddJumpMotionFrame(builder, JumpMotionFrame_val)
    CharacterExcel.AddAppearFrame(builder, AppearFrame_val)
    CharacterExcel.AddCanMove(builder, CanMove_val)
    CharacterExcel.AddCanFix(builder, CanFix_val)
    CharacterExcel.AddCanCrowdControl(builder, CanCrowdControl_val)
    CharacterExcel.AddCanBattleItemMove(builder, CanBattleItemMove_val)
    CharacterExcel.AddIgnoreObstacle(builder, IgnoreObstacle_val)
    CharacterExcel.AddIsAirUnit(builder, IsAirUnit_val)
    CharacterExcel.AddAirUnitHeight(builder, AirUnitHeight_val)
    CharacterExcel.AddTags(builder, Tags_vec)
    CharacterExcel.AddSecretStoneItemId(builder, SecretStoneItemId_val)
    CharacterExcel.AddSecretStoneItemAmount(builder, SecretStoneItemAmount_val)
    CharacterExcel.AddCharacterPieceItemId(builder, CharacterPieceItemId_val)
    CharacterExcel.AddCharacterPieceItemAmount(builder, CharacterPieceItemAmount_val)
    CharacterExcel.AddCombineRecipeId(builder, CombineRecipeId_val)
    return CharacterExcel.End(builder)

def pack_CharacterGearExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterGear") if encrypt else None
    LearnSkillSlot_off = builder.CreateString(encrypt_string(data.get('LearnSkillSlot', ''), password))
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    StatType_vec = 0
    if 'StatType' in data:
        StatType_items = data['StatType']
        CharacterGearExcel.StartStatTypeVector(builder, len(StatType_items))
        for item in reversed(StatType_items):
            builder.PrependInt32(convert_int(getattr(EquipmentOptionType, item), password))
        StatType_vec = builder.EndVector(len(StatType_items))
    MinStatValue_vec = 0
    if 'MinStatValue' in data:
        MinStatValue_items = data['MinStatValue']
        CharacterGearExcel.StartMinStatValueVector(builder, len(MinStatValue_items))
        for item in reversed(MinStatValue_items):
            builder.PrependInt64(convert_long(item, password))
        MinStatValue_vec = builder.EndVector(len(MinStatValue_items))
    MaxStatValue_vec = 0
    if 'MaxStatValue' in data:
        MaxStatValue_items = data['MaxStatValue']
        CharacterGearExcel.StartMaxStatValueVector(builder, len(MaxStatValue_items))
        for item in reversed(MaxStatValue_items):
            builder.PrependInt64(convert_long(item, password))
        MaxStatValue_vec = builder.EndVector(len(MaxStatValue_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        CharacterGearExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    StatLevelUpType_val = convert_int(getattr(StatLevelUpType, data.get('StatLevelUpType', 0)), password)
    Tier_val = convert_long(data.get('Tier', 0), password)
    NextTierEquipment_val = convert_long(data.get('NextTierEquipment', 0), password)
    RecipeId_val = convert_long(data.get('RecipeId', 0), password)
    OpenFavorLevel_val = convert_long(data.get('OpenFavorLevel', 0), password)
    MaxLevel_val = convert_long(data.get('MaxLevel', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    CharacterGearExcel.Start(builder)
    CharacterGearExcel.AddId(builder, Id_val)
    CharacterGearExcel.AddCharacterId(builder, CharacterId_val)
    CharacterGearExcel.AddStatLevelUpType(builder, StatLevelUpType_val)
    CharacterGearExcel.AddTier(builder, Tier_val)
    CharacterGearExcel.AddNextTierEquipment(builder, NextTierEquipment_val)
    CharacterGearExcel.AddRecipeId(builder, RecipeId_val)
    CharacterGearExcel.AddOpenFavorLevel(builder, OpenFavorLevel_val)
    CharacterGearExcel.AddMaxLevel(builder, MaxLevel_val)
    CharacterGearExcel.AddLearnSkillSlot(builder, LearnSkillSlot_off)
    CharacterGearExcel.AddStatType(builder, StatType_vec)
    CharacterGearExcel.AddMinStatValue(builder, MinStatValue_vec)
    CharacterGearExcel.AddMaxStatValue(builder, MaxStatValue_vec)
    CharacterGearExcel.AddIcon(builder, Icon_off)
    CharacterGearExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    CharacterGearExcel.AddTags(builder, Tags_vec)
    return CharacterGearExcel.End(builder)

def pack_CharacterGearLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterGearLevel") if encrypt else None
    TierLevelExp_vec = 0
    if 'TierLevelExp' in data:
        TierLevelExp_items = data['TierLevelExp']
        CharacterGearLevelExcel.StartTierLevelExpVector(builder, len(TierLevelExp_items))
        for item in reversed(TierLevelExp_items):
            builder.PrependInt64(convert_long(item, password))
        TierLevelExp_vec = builder.EndVector(len(TierLevelExp_items))
    TotalExp_vec = 0
    if 'TotalExp' in data:
        TotalExp_items = data['TotalExp']
        CharacterGearLevelExcel.StartTotalExpVector(builder, len(TotalExp_items))
        for item in reversed(TotalExp_items):
            builder.PrependInt64(convert_long(item, password))
        TotalExp_vec = builder.EndVector(len(TotalExp_items))
    Level_val = convert_int(data.get('Level', 0), password)
    CharacterGearLevelExcel.Start(builder)
    CharacterGearLevelExcel.AddLevel(builder, Level_val)
    CharacterGearLevelExcel.AddTierLevelExp(builder, TierLevelExp_vec)
    CharacterGearLevelExcel.AddTotalExp(builder, TotalExp_vec)
    return CharacterGearLevelExcel.End(builder)

def pack_CharacterIllustCoordinateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterIllustCoordinate") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterBodyCenterX_val = encrypt_float(data.get('CharacterBodyCenterX', 0), password)
    CharacterBodyCenterY_val = encrypt_float(data.get('CharacterBodyCenterY', 0), password)
    DefaultScale_val = encrypt_float(data.get('DefaultScale', 0), password)
    MinScale_val = encrypt_float(data.get('MinScale', 0), password)
    MaxScale_val = encrypt_float(data.get('MaxScale', 0), password)
    CharacterIllustCoordinateExcel.Start(builder)
    CharacterIllustCoordinateExcel.AddId(builder, Id_val)
    CharacterIllustCoordinateExcel.AddCharacterBodyCenterX(builder, CharacterBodyCenterX_val)
    CharacterIllustCoordinateExcel.AddCharacterBodyCenterY(builder, CharacterBodyCenterY_val)
    CharacterIllustCoordinateExcel.AddDefaultScale(builder, DefaultScale_val)
    CharacterIllustCoordinateExcel.AddMinScale(builder, MinScale_val)
    CharacterIllustCoordinateExcel.AddMaxScale(builder, MaxScale_val)
    return CharacterIllustCoordinateExcel.End(builder)

def pack_CharacterLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterLevel") if encrypt else None
    Level_val = convert_int(data.get('Level', 0), password)
    Exp_val = convert_long(data.get('Exp', 0), password)
    TotalExp_val = convert_long(data.get('TotalExp', 0), password)
    CharacterLevelExcel.Start(builder)
    CharacterLevelExcel.AddLevel(builder, Level_val)
    CharacterLevelExcel.AddExp(builder, Exp_val)
    CharacterLevelExcel.AddTotalExp(builder, TotalExp_val)
    return CharacterLevelExcel.End(builder)

def pack_CharacterLevelStatFactorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterLevelStatFactor") if encrypt else None
    Level_val = convert_long(data.get('Level', 0), password)
    CriticalFactor_val = convert_long(data.get('CriticalFactor', 0), password)
    StabilityFactor_val = convert_long(data.get('StabilityFactor', 0), password)
    DefenceFactor_val = convert_long(data.get('DefenceFactor', 0), password)
    AccuracyFactor_val = convert_long(data.get('AccuracyFactor', 0), password)
    CharacterLevelStatFactorExcel.Start(builder)
    CharacterLevelStatFactorExcel.AddLevel(builder, Level_val)
    CharacterLevelStatFactorExcel.AddCriticalFactor(builder, CriticalFactor_val)
    CharacterLevelStatFactorExcel.AddStabilityFactor(builder, StabilityFactor_val)
    CharacterLevelStatFactorExcel.AddDefenceFactor(builder, DefenceFactor_val)
    CharacterLevelStatFactorExcel.AddAccuracyFactor(builder, AccuracyFactor_val)
    return CharacterLevelStatFactorExcel.End(builder)

def pack_CharacterPotentialExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterPotential") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    PotentialStatGroupId_val = convert_long(data.get('PotentialStatGroupId', 0), password)
    PotentialStatBonusRateType_val = convert_int(getattr(PotentialStatBonusRateType, data.get('PotentialStatBonusRateType', 0)), password)
    IsUnnecessaryStat_val = data.get('IsUnnecessaryStat', 0)
    CharacterPotentialExcel.Start(builder)
    CharacterPotentialExcel.AddId(builder, Id_val)
    CharacterPotentialExcel.AddPotentialStatGroupId(builder, PotentialStatGroupId_val)
    CharacterPotentialExcel.AddPotentialStatBonusRateType(builder, PotentialStatBonusRateType_val)
    CharacterPotentialExcel.AddIsUnnecessaryStat(builder, IsUnnecessaryStat_val)
    return CharacterPotentialExcel.End(builder)

def pack_CharacterPotentialRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterPotentialReward") if encrypt else None
    RequirePotentialStatType_vec = 0
    if 'RequirePotentialStatType' in data:
        RequirePotentialStatType_items = data['RequirePotentialStatType']
        CharacterPotentialRewardExcel.StartRequirePotentialStatTypeVector(builder, len(RequirePotentialStatType_items))
        for item in reversed(RequirePotentialStatType_items):
            builder.PrependInt32(convert_int(getattr(PotentialStatBonusRateType, item), password))
        RequirePotentialStatType_vec = builder.EndVector(len(RequirePotentialStatType_items))
    RequirePotentialStatLevel_vec = 0
    if 'RequirePotentialStatLevel' in data:
        RequirePotentialStatLevel_items = data['RequirePotentialStatLevel']
        CharacterPotentialRewardExcel.StartRequirePotentialStatLevelVector(builder, len(RequirePotentialStatLevel_items))
        for item in reversed(RequirePotentialStatLevel_items):
            builder.PrependInt64(convert_long(item, password))
        RequirePotentialStatLevel_vec = builder.EndVector(len(RequirePotentialStatLevel_items))
    Id_val = convert_long(data.get('Id', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    CharacterPotentialRewardExcel.Start(builder)
    CharacterPotentialRewardExcel.AddId(builder, Id_val)
    CharacterPotentialRewardExcel.AddRequirePotentialStatType(builder, RequirePotentialStatType_vec)
    CharacterPotentialRewardExcel.AddRequirePotentialStatLevel(builder, RequirePotentialStatLevel_vec)
    CharacterPotentialRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    CharacterPotentialRewardExcel.AddRewardId(builder, RewardId_val)
    CharacterPotentialRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    return CharacterPotentialRewardExcel.End(builder)

def pack_CharacterPotentialStatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterPotentialStat") if encrypt else None
    PotentialStatGroupId_val = convert_long(data.get('PotentialStatGroupId', 0), password)
    PotentialLevel_val = convert_int(data.get('PotentialLevel', 0), password)
    RecipeId_val = convert_long(data.get('RecipeId', 0), password)
    StatBonusRate_val = convert_long(data.get('StatBonusRate', 0), password)
    CharacterPotentialStatExcel.Start(builder)
    CharacterPotentialStatExcel.AddPotentialStatGroupId(builder, PotentialStatGroupId_val)
    CharacterPotentialStatExcel.AddPotentialLevel(builder, PotentialLevel_val)
    CharacterPotentialStatExcel.AddRecipeId(builder, RecipeId_val)
    CharacterPotentialStatExcel.AddStatBonusRate(builder, StatBonusRate_val)
    return CharacterPotentialStatExcel.End(builder)

def pack_CharacterSkillListExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterSkillList") if encrypt else None
    NormalSkillGroupId_vec = 0
    if 'NormalSkillGroupId' in data:
        NormalSkillGroupId_items = data['NormalSkillGroupId']
        NormalSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in NormalSkillGroupId_items]
        CharacterSkillListExcel.StartNormalSkillGroupIdVector(builder, len(NormalSkillGroupId_str_offsets))
        for offset in reversed(NormalSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        NormalSkillGroupId_vec = builder.EndVector(len(NormalSkillGroupId_items))
    NormalSkillTimeLineIndex_vec = 0
    if 'NormalSkillTimeLineIndex' in data:
        NormalSkillTimeLineIndex_items = data['NormalSkillTimeLineIndex']
        CharacterSkillListExcel.StartNormalSkillTimeLineIndexVector(builder, len(NormalSkillTimeLineIndex_items))
        for item in reversed(NormalSkillTimeLineIndex_items):
            builder.PrependInt32(convert_int(item, password))
        NormalSkillTimeLineIndex_vec = builder.EndVector(len(NormalSkillTimeLineIndex_items))
    ExSkillGroupId_vec = 0
    if 'ExSkillGroupId' in data:
        ExSkillGroupId_items = data['ExSkillGroupId']
        ExSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ExSkillGroupId_items]
        CharacterSkillListExcel.StartExSkillGroupIdVector(builder, len(ExSkillGroupId_str_offsets))
        for offset in reversed(ExSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ExSkillGroupId_vec = builder.EndVector(len(ExSkillGroupId_items))
    ExSkillCutInTimeLineIndex_vec = 0
    if 'ExSkillCutInTimeLineIndex' in data:
        ExSkillCutInTimeLineIndex_items = data['ExSkillCutInTimeLineIndex']
        ExSkillCutInTimeLineIndex_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ExSkillCutInTimeLineIndex_items]
        CharacterSkillListExcel.StartExSkillCutInTimeLineIndexVector(builder, len(ExSkillCutInTimeLineIndex_str_offsets))
        for offset in reversed(ExSkillCutInTimeLineIndex_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ExSkillCutInTimeLineIndex_vec = builder.EndVector(len(ExSkillCutInTimeLineIndex_items))
    ExSkillLevelTimeLineIndex_vec = 0
    if 'ExSkillLevelTimeLineIndex' in data:
        ExSkillLevelTimeLineIndex_items = data['ExSkillLevelTimeLineIndex']
        ExSkillLevelTimeLineIndex_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ExSkillLevelTimeLineIndex_items]
        CharacterSkillListExcel.StartExSkillLevelTimeLineIndexVector(builder, len(ExSkillLevelTimeLineIndex_str_offsets))
        for offset in reversed(ExSkillLevelTimeLineIndex_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ExSkillLevelTimeLineIndex_vec = builder.EndVector(len(ExSkillLevelTimeLineIndex_items))
    PublicSkillGroupId_vec = 0
    if 'PublicSkillGroupId' in data:
        PublicSkillGroupId_items = data['PublicSkillGroupId']
        PublicSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PublicSkillGroupId_items]
        CharacterSkillListExcel.StartPublicSkillGroupIdVector(builder, len(PublicSkillGroupId_str_offsets))
        for offset in reversed(PublicSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PublicSkillGroupId_vec = builder.EndVector(len(PublicSkillGroupId_items))
    PublicSkillTimeLineIndex_vec = 0
    if 'PublicSkillTimeLineIndex' in data:
        PublicSkillTimeLineIndex_items = data['PublicSkillTimeLineIndex']
        CharacterSkillListExcel.StartPublicSkillTimeLineIndexVector(builder, len(PublicSkillTimeLineIndex_items))
        for item in reversed(PublicSkillTimeLineIndex_items):
            builder.PrependInt32(convert_int(item, password))
        PublicSkillTimeLineIndex_vec = builder.EndVector(len(PublicSkillTimeLineIndex_items))
    PassiveSkillGroupId_vec = 0
    if 'PassiveSkillGroupId' in data:
        PassiveSkillGroupId_items = data['PassiveSkillGroupId']
        PassiveSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PassiveSkillGroupId_items]
        CharacterSkillListExcel.StartPassiveSkillGroupIdVector(builder, len(PassiveSkillGroupId_str_offsets))
        for offset in reversed(PassiveSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PassiveSkillGroupId_vec = builder.EndVector(len(PassiveSkillGroupId_items))
    LeaderSkillGroupId_vec = 0
    if 'LeaderSkillGroupId' in data:
        LeaderSkillGroupId_items = data['LeaderSkillGroupId']
        LeaderSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in LeaderSkillGroupId_items]
        CharacterSkillListExcel.StartLeaderSkillGroupIdVector(builder, len(LeaderSkillGroupId_str_offsets))
        for offset in reversed(LeaderSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        LeaderSkillGroupId_vec = builder.EndVector(len(LeaderSkillGroupId_items))
    ExtraPassiveSkillGroupId_vec = 0
    if 'ExtraPassiveSkillGroupId' in data:
        ExtraPassiveSkillGroupId_items = data['ExtraPassiveSkillGroupId']
        ExtraPassiveSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ExtraPassiveSkillGroupId_items]
        CharacterSkillListExcel.StartExtraPassiveSkillGroupIdVector(builder, len(ExtraPassiveSkillGroupId_str_offsets))
        for offset in reversed(ExtraPassiveSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ExtraPassiveSkillGroupId_vec = builder.EndVector(len(ExtraPassiveSkillGroupId_items))
    HiddenPassiveSkillGroupId_vec = 0
    if 'HiddenPassiveSkillGroupId' in data:
        HiddenPassiveSkillGroupId_items = data['HiddenPassiveSkillGroupId']
        HiddenPassiveSkillGroupId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in HiddenPassiveSkillGroupId_items]
        CharacterSkillListExcel.StartHiddenPassiveSkillGroupIdVector(builder, len(HiddenPassiveSkillGroupId_str_offsets))
        for offset in reversed(HiddenPassiveSkillGroupId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        HiddenPassiveSkillGroupId_vec = builder.EndVector(len(HiddenPassiveSkillGroupId_items))
    CharacterSkillListGroupId_val = convert_long(data.get('CharacterSkillListGroupId', 0), password)
    MinimumGradeCharacterWeapon_val = convert_int(data.get('MinimumGradeCharacterWeapon', 0), password)
    MinimumTierCharacterGear_val = convert_int(data.get('MinimumTierCharacterGear', 0), password)
    FormIndex_val = convert_int(data.get('FormIndex', 0), password)
    IsRootMotion_val = data.get('IsRootMotion', 0)
    IsMoveLeftRight_val = data.get('IsMoveLeftRight', 0)
    UseRandomExSkillTimeline_val = data.get('UseRandomExSkillTimeline', 0)
    TSAInteractionId_val = convert_long(data.get('TSAInteractionId', 0), password)
    SelectExSkillActionSkillSlot_val = convert_int(data.get('SelectExSkillActionSkillSlot', 0), password)
    CharacterSkillListExcel.Start(builder)
    CharacterSkillListExcel.AddCharacterSkillListGroupId(builder, CharacterSkillListGroupId_val)
    CharacterSkillListExcel.AddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon_val)
    CharacterSkillListExcel.AddMinimumTierCharacterGear(builder, MinimumTierCharacterGear_val)
    CharacterSkillListExcel.AddFormIndex(builder, FormIndex_val)
    CharacterSkillListExcel.AddIsRootMotion(builder, IsRootMotion_val)
    CharacterSkillListExcel.AddIsMoveLeftRight(builder, IsMoveLeftRight_val)
    CharacterSkillListExcel.AddUseRandomExSkillTimeline(builder, UseRandomExSkillTimeline_val)
    CharacterSkillListExcel.AddTSAInteractionId(builder, TSAInteractionId_val)
    CharacterSkillListExcel.AddNormalSkillGroupId(builder, NormalSkillGroupId_vec)
    CharacterSkillListExcel.AddNormalSkillTimeLineIndex(builder, NormalSkillTimeLineIndex_vec)
    CharacterSkillListExcel.AddSelectExSkillActionSkillSlot(builder, SelectExSkillActionSkillSlot_val)
    CharacterSkillListExcel.AddExSkillGroupId(builder, ExSkillGroupId_vec)
    CharacterSkillListExcel.AddExSkillCutInTimeLineIndex(builder, ExSkillCutInTimeLineIndex_vec)
    CharacterSkillListExcel.AddExSkillLevelTimeLineIndex(builder, ExSkillLevelTimeLineIndex_vec)
    CharacterSkillListExcel.AddPublicSkillGroupId(builder, PublicSkillGroupId_vec)
    CharacterSkillListExcel.AddPublicSkillTimeLineIndex(builder, PublicSkillTimeLineIndex_vec)
    CharacterSkillListExcel.AddPassiveSkillGroupId(builder, PassiveSkillGroupId_vec)
    CharacterSkillListExcel.AddLeaderSkillGroupId(builder, LeaderSkillGroupId_vec)
    CharacterSkillListExcel.AddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupId_vec)
    CharacterSkillListExcel.AddHiddenPassiveSkillGroupId(builder, HiddenPassiveSkillGroupId_vec)
    return CharacterSkillListExcel.End(builder)

def pack_CharacterStatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterStat") if encrypt else None
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    StabilityRate_val = convert_long(data.get('StabilityRate', 0), password)
    StabilityPoint_val = convert_long(data.get('StabilityPoint', 0), password)
    AttackPower1_val = convert_long(data.get('AttackPower1', 0), password)
    AttackPower100_val = convert_long(data.get('AttackPower100', 0), password)
    MaxHP1_val = convert_long(data.get('MaxHP1', 0), password)
    MaxHP100_val = convert_long(data.get('MaxHP100', 0), password)
    DefensePower1_val = convert_long(data.get('DefensePower1', 0), password)
    DefensePower100_val = convert_long(data.get('DefensePower100', 0), password)
    HealPower1_val = convert_long(data.get('HealPower1', 0), password)
    HealPower100_val = convert_long(data.get('HealPower100', 0), password)
    DodgePoint_val = convert_long(data.get('DodgePoint', 0), password)
    AccuracyPoint_val = convert_long(data.get('AccuracyPoint', 0), password)
    CriticalPoint_val = convert_long(data.get('CriticalPoint', 0), password)
    CriticalResistPoint_val = convert_long(data.get('CriticalResistPoint', 0), password)
    CriticalDamageRate_val = convert_long(data.get('CriticalDamageRate', 0), password)
    CriticalDamageResistRate_val = convert_long(data.get('CriticalDamageResistRate', 0), password)
    BlockRate_val = convert_long(data.get('BlockRate', 0), password)
    HealEffectivenessRate_val = convert_long(data.get('HealEffectivenessRate', 0), password)
    OppressionPower_val = convert_long(data.get('OppressionPower', 0), password)
    OppressionResist_val = convert_long(data.get('OppressionResist', 0), password)
    DefensePenetration1_val = convert_long(data.get('DefensePenetration1', 0), password)
    DefensePenetration100_val = convert_long(data.get('DefensePenetration100', 0), password)
    DefensePenetrationResist1_val = convert_long(data.get('DefensePenetrationResist1', 0), password)
    DefensePenetrationResist100_val = convert_long(data.get('DefensePenetrationResist100', 0), password)
    EnhanceExplosionRate_val = convert_long(data.get('EnhanceExplosionRate', 0), password)
    EnhancePierceRate_val = convert_long(data.get('EnhancePierceRate', 0), password)
    EnhanceMysticRate_val = convert_long(data.get('EnhanceMysticRate', 0), password)
    EnhanceSonicRate_val = convert_long(data.get('EnhanceSonicRate', 0), password)
    EnhanceSiegeRate_val = convert_long(data.get('EnhanceSiegeRate', 0), password)
    EnhanceNormalRate_val = convert_long(data.get('EnhanceNormalRate', 0), password)
    EnhanceLightArmorRate_val = convert_long(data.get('EnhanceLightArmorRate', 0), password)
    EnhanceHeavyArmorRate_val = convert_long(data.get('EnhanceHeavyArmorRate', 0), password)
    EnhanceUnarmedRate_val = convert_long(data.get('EnhanceUnarmedRate', 0), password)
    EnhanceElasticArmorRate_val = convert_long(data.get('EnhanceElasticArmorRate', 0), password)
    EnhanceStructureRate_val = convert_long(data.get('EnhanceStructureRate', 0), password)
    EnhanceNormalArmorRate_val = convert_long(data.get('EnhanceNormalArmorRate', 0), password)
    ExtendBuffDuration_val = convert_long(data.get('ExtendBuffDuration', 0), password)
    ExtendDebuffDuration_val = convert_long(data.get('ExtendDebuffDuration', 0), password)
    ExtendCrowdControlDuration_val = convert_long(data.get('ExtendCrowdControlDuration', 0), password)
    AmmoCount_val = convert_long(data.get('AmmoCount', 0), password)
    AmmoCost_val = convert_long(data.get('AmmoCost', 0), password)
    IgnoreDelayCount_val = convert_long(data.get('IgnoreDelayCount', 0), password)
    NormalAttackSpeed_val = convert_long(data.get('NormalAttackSpeed', 0), password)
    Range_val = convert_long(data.get('Range', 0), password)
    InitialRangeRate_val = convert_long(data.get('InitialRangeRate', 0), password)
    MoveSpeed_val = convert_long(data.get('MoveSpeed', 0), password)
    SightPoint_val = convert_long(data.get('SightPoint', 0), password)
    ActiveGauge_val = convert_long(data.get('ActiveGauge', 0), password)
    GroggyGauge_val = convert_int(data.get('GroggyGauge', 0), password)
    GroggyTime_val = convert_int(data.get('GroggyTime', 0), password)
    StrategyMobility_val = convert_long(data.get('StrategyMobility', 0), password)
    ActionCount_val = convert_long(data.get('ActionCount', 0), password)
    StrategySightRange_val = convert_long(data.get('StrategySightRange', 0), password)
    DamageRatio_val = convert_long(data.get('DamageRatio', 0), password)
    DamagedRatio_val = convert_long(data.get('DamagedRatio', 0), password)
    DamageRatio2Increase_val = convert_long(data.get('DamageRatio2Increase', 0), password)
    DamageRatio2Decrease_val = convert_long(data.get('DamageRatio2Decrease', 0), password)
    DamagedRatio2Increase_val = convert_long(data.get('DamagedRatio2Increase', 0), password)
    DamagedRatio2Decrease_val = convert_long(data.get('DamagedRatio2Decrease', 0), password)
    ExDamagedRatioIncrease_val = convert_long(data.get('ExDamagedRatioIncrease', 0), password)
    ExDamagedRatioDecrease_val = convert_long(data.get('ExDamagedRatioDecrease', 0), password)
    EnhanceExDamageRate_val = convert_long(data.get('EnhanceExDamageRate', 0), password)
    ReduceExDamagedRate_val = convert_long(data.get('ReduceExDamagedRate', 0), password)
    HealRate_val = convert_long(data.get('HealRate', 0), password)
    HealLightArmorRate_val = convert_long(data.get('HealLightArmorRate', 0), password)
    HealHeavyArmorRate_val = convert_long(data.get('HealHeavyArmorRate', 0), password)
    HealUnarmedRate_val = convert_long(data.get('HealUnarmedRate', 0), password)
    HealElasticArmorRate_val = convert_long(data.get('HealElasticArmorRate', 0), password)
    HealNormalArmorRate_val = convert_long(data.get('HealNormalArmorRate', 0), password)
    HealedExplosionRate_val = convert_long(data.get('HealedExplosionRate', 0), password)
    HealedPierceRate_val = convert_long(data.get('HealedPierceRate', 0), password)
    HealedMysticRate_val = convert_long(data.get('HealedMysticRate', 0), password)
    HealedSonicRate_val = convert_long(data.get('HealedSonicRate', 0), password)
    HealedNormalRate_val = convert_long(data.get('HealedNormalRate', 0), password)
    StreetBattleAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('StreetBattleAdaptation', 0)), password)
    OutdoorBattleAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('OutdoorBattleAdaptation', 0)), password)
    IndoorBattleAdaptation_val = convert_int(getattr(TerrainAdaptationStat, data.get('IndoorBattleAdaptation', 0)), password)
    RegenCost_val = convert_long(data.get('RegenCost', 0), password)
    CharacterStatExcel.Start(builder)
    CharacterStatExcel.AddCharacterId(builder, CharacterId_val)
    CharacterStatExcel.AddStabilityRate(builder, StabilityRate_val)
    CharacterStatExcel.AddStabilityPoint(builder, StabilityPoint_val)
    CharacterStatExcel.AddAttackPower1(builder, AttackPower1_val)
    CharacterStatExcel.AddAttackPower100(builder, AttackPower100_val)
    CharacterStatExcel.AddMaxHP1(builder, MaxHP1_val)
    CharacterStatExcel.AddMaxHP100(builder, MaxHP100_val)
    CharacterStatExcel.AddDefensePower1(builder, DefensePower1_val)
    CharacterStatExcel.AddDefensePower100(builder, DefensePower100_val)
    CharacterStatExcel.AddHealPower1(builder, HealPower1_val)
    CharacterStatExcel.AddHealPower100(builder, HealPower100_val)
    CharacterStatExcel.AddDodgePoint(builder, DodgePoint_val)
    CharacterStatExcel.AddAccuracyPoint(builder, AccuracyPoint_val)
    CharacterStatExcel.AddCriticalPoint(builder, CriticalPoint_val)
    CharacterStatExcel.AddCriticalResistPoint(builder, CriticalResistPoint_val)
    CharacterStatExcel.AddCriticalDamageRate(builder, CriticalDamageRate_val)
    CharacterStatExcel.AddCriticalDamageResistRate(builder, CriticalDamageResistRate_val)
    CharacterStatExcel.AddBlockRate(builder, BlockRate_val)
    CharacterStatExcel.AddHealEffectivenessRate(builder, HealEffectivenessRate_val)
    CharacterStatExcel.AddOppressionPower(builder, OppressionPower_val)
    CharacterStatExcel.AddOppressionResist(builder, OppressionResist_val)
    CharacterStatExcel.AddDefensePenetration1(builder, DefensePenetration1_val)
    CharacterStatExcel.AddDefensePenetration100(builder, DefensePenetration100_val)
    CharacterStatExcel.AddDefensePenetrationResist1(builder, DefensePenetrationResist1_val)
    CharacterStatExcel.AddDefensePenetrationResist100(builder, DefensePenetrationResist100_val)
    CharacterStatExcel.AddEnhanceExplosionRate(builder, EnhanceExplosionRate_val)
    CharacterStatExcel.AddEnhancePierceRate(builder, EnhancePierceRate_val)
    CharacterStatExcel.AddEnhanceMysticRate(builder, EnhanceMysticRate_val)
    CharacterStatExcel.AddEnhanceSonicRate(builder, EnhanceSonicRate_val)
    CharacterStatExcel.AddEnhanceSiegeRate(builder, EnhanceSiegeRate_val)
    CharacterStatExcel.AddEnhanceNormalRate(builder, EnhanceNormalRate_val)
    CharacterStatExcel.AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate_val)
    CharacterStatExcel.AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate_val)
    CharacterStatExcel.AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate_val)
    CharacterStatExcel.AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate_val)
    CharacterStatExcel.AddEnhanceStructureRate(builder, EnhanceStructureRate_val)
    CharacterStatExcel.AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate_val)
    CharacterStatExcel.AddExtendBuffDuration(builder, ExtendBuffDuration_val)
    CharacterStatExcel.AddExtendDebuffDuration(builder, ExtendDebuffDuration_val)
    CharacterStatExcel.AddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration_val)
    CharacterStatExcel.AddAmmoCount(builder, AmmoCount_val)
    CharacterStatExcel.AddAmmoCost(builder, AmmoCost_val)
    CharacterStatExcel.AddIgnoreDelayCount(builder, IgnoreDelayCount_val)
    CharacterStatExcel.AddNormalAttackSpeed(builder, NormalAttackSpeed_val)
    CharacterStatExcel.AddRange(builder, Range_val)
    CharacterStatExcel.AddInitialRangeRate(builder, InitialRangeRate_val)
    CharacterStatExcel.AddMoveSpeed(builder, MoveSpeed_val)
    CharacterStatExcel.AddSightPoint(builder, SightPoint_val)
    CharacterStatExcel.AddActiveGauge(builder, ActiveGauge_val)
    CharacterStatExcel.AddGroggyGauge(builder, GroggyGauge_val)
    CharacterStatExcel.AddGroggyTime(builder, GroggyTime_val)
    CharacterStatExcel.AddStrategyMobility(builder, StrategyMobility_val)
    CharacterStatExcel.AddActionCount(builder, ActionCount_val)
    CharacterStatExcel.AddStrategySightRange(builder, StrategySightRange_val)
    CharacterStatExcel.AddDamageRatio(builder, DamageRatio_val)
    CharacterStatExcel.AddDamagedRatio(builder, DamagedRatio_val)
    CharacterStatExcel.AddDamageRatio2Increase(builder, DamageRatio2Increase_val)
    CharacterStatExcel.AddDamageRatio2Decrease(builder, DamageRatio2Decrease_val)
    CharacterStatExcel.AddDamagedRatio2Increase(builder, DamagedRatio2Increase_val)
    CharacterStatExcel.AddDamagedRatio2Decrease(builder, DamagedRatio2Decrease_val)
    CharacterStatExcel.AddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease_val)
    CharacterStatExcel.AddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease_val)
    CharacterStatExcel.AddEnhanceExDamageRate(builder, EnhanceExDamageRate_val)
    CharacterStatExcel.AddReduceExDamagedRate(builder, ReduceExDamagedRate_val)
    CharacterStatExcel.AddHealRate(builder, HealRate_val)
    CharacterStatExcel.AddHealLightArmorRate(builder, HealLightArmorRate_val)
    CharacterStatExcel.AddHealHeavyArmorRate(builder, HealHeavyArmorRate_val)
    CharacterStatExcel.AddHealUnarmedRate(builder, HealUnarmedRate_val)
    CharacterStatExcel.AddHealElasticArmorRate(builder, HealElasticArmorRate_val)
    CharacterStatExcel.AddHealNormalArmorRate(builder, HealNormalArmorRate_val)
    CharacterStatExcel.AddHealedExplosionRate(builder, HealedExplosionRate_val)
    CharacterStatExcel.AddHealedPierceRate(builder, HealedPierceRate_val)
    CharacterStatExcel.AddHealedMysticRate(builder, HealedMysticRate_val)
    CharacterStatExcel.AddHealedSonicRate(builder, HealedSonicRate_val)
    CharacterStatExcel.AddHealedNormalRate(builder, HealedNormalRate_val)
    CharacterStatExcel.AddStreetBattleAdaptation(builder, StreetBattleAdaptation_val)
    CharacterStatExcel.AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation_val)
    CharacterStatExcel.AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation_val)
    CharacterStatExcel.AddRegenCost(builder, RegenCost_val)
    return CharacterStatExcel.End(builder)

def pack_CharacterStatLimitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterStatLimit") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    TacticEntityType_val = convert_int(getattr(TacticEntityType, data.get('TacticEntityType', 0)), password)
    StatType_val = convert_int(getattr(StatType, data.get('StatType', 0)), password)
    StatMinValue_val = convert_long(data.get('StatMinValue', 0), password)
    StatMaxValue_val = convert_long(data.get('StatMaxValue', 0), password)
    StatRatioMinValue_val = convert_long(data.get('StatRatioMinValue', 0), password)
    StatRatioMaxValue_val = convert_long(data.get('StatRatioMaxValue', 0), password)
    CharacterStatLimitExcel.Start(builder)
    CharacterStatLimitExcel.AddId(builder, Id_val)
    CharacterStatLimitExcel.AddTacticEntityType(builder, TacticEntityType_val)
    CharacterStatLimitExcel.AddStatType(builder, StatType_val)
    CharacterStatLimitExcel.AddStatMinValue(builder, StatMinValue_val)
    CharacterStatLimitExcel.AddStatMaxValue(builder, StatMaxValue_val)
    CharacterStatLimitExcel.AddStatRatioMinValue(builder, StatRatioMinValue_val)
    CharacterStatLimitExcel.AddStatRatioMaxValue(builder, StatRatioMaxValue_val)
    return CharacterStatLimitExcel.End(builder)

def pack_CharacterStatsDetailExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterStatsDetail") if encrypt else None
    DetailShowStats_vec = 0
    if 'DetailShowStats' in data:
        DetailShowStats_items = data['DetailShowStats']
        CharacterStatsDetailExcel.StartDetailShowStatsVector(builder, len(DetailShowStats_items))
        for item in reversed(DetailShowStats_items):
            builder.PrependInt32(convert_int(getattr(StatType, item), password))
        DetailShowStats_vec = builder.EndVector(len(DetailShowStats_items))
    IsStatsPercent_vec = 0
    if 'IsStatsPercent' in data:
        IsStatsPercent_items = data['IsStatsPercent']
        CharacterStatsDetailExcel.StartIsStatsPercentVector(builder, len(IsStatsPercent_items))
        for item in reversed(IsStatsPercent_items):
            builder.PrependBool(item)
        IsStatsPercent_vec = builder.EndVector(len(IsStatsPercent_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CharacterStatsDetailExcel.Start(builder)
    CharacterStatsDetailExcel.AddId(builder, Id_val)
    CharacterStatsDetailExcel.AddDetailShowStats(builder, DetailShowStats_vec)
    CharacterStatsDetailExcel.AddIsStatsPercent(builder, IsStatsPercent_vec)
    return CharacterStatsDetailExcel.End(builder)

def pack_CharacterStatsTransExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterStatsTrans") if encrypt else None
    TransSupportStats_val = convert_int(getattr(StatType, data.get('TransSupportStats', 0)), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    TransSupportStatsFactor_val = convert_int(data.get('TransSupportStatsFactor', 0), password)
    StatTransType_val = convert_int(getattr(StatTransType, data.get('StatTransType', 0)), password)
    CharacterStatsTransExcel.Start(builder)
    CharacterStatsTransExcel.AddTransSupportStats(builder, TransSupportStats_val)
    CharacterStatsTransExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    CharacterStatsTransExcel.AddTransSupportStatsFactor(builder, TransSupportStatsFactor_val)
    CharacterStatsTransExcel.AddStatTransType(builder, StatTransType_val)
    return CharacterStatsTransExcel.End(builder)

def pack_CharacterTranscendenceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterTranscendence") if encrypt else None
    MaxFavorLevel_vec = 0
    if 'MaxFavorLevel' in data:
        MaxFavorLevel_items = data['MaxFavorLevel']
        CharacterTranscendenceExcel.StartMaxFavorLevelVector(builder, len(MaxFavorLevel_items))
        for item in reversed(MaxFavorLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MaxFavorLevel_vec = builder.EndVector(len(MaxFavorLevel_items))
    StatBonusRateAttack_vec = 0
    if 'StatBonusRateAttack' in data:
        StatBonusRateAttack_items = data['StatBonusRateAttack']
        CharacterTranscendenceExcel.StartStatBonusRateAttackVector(builder, len(StatBonusRateAttack_items))
        for item in reversed(StatBonusRateAttack_items):
            builder.PrependInt64(convert_long(item, password))
        StatBonusRateAttack_vec = builder.EndVector(len(StatBonusRateAttack_items))
    StatBonusRateHP_vec = 0
    if 'StatBonusRateHP' in data:
        StatBonusRateHP_items = data['StatBonusRateHP']
        CharacterTranscendenceExcel.StartStatBonusRateHPVector(builder, len(StatBonusRateHP_items))
        for item in reversed(StatBonusRateHP_items):
            builder.PrependInt64(convert_long(item, password))
        StatBonusRateHP_vec = builder.EndVector(len(StatBonusRateHP_items))
    StatBonusRateHeal_vec = 0
    if 'StatBonusRateHeal' in data:
        StatBonusRateHeal_items = data['StatBonusRateHeal']
        CharacterTranscendenceExcel.StartStatBonusRateHealVector(builder, len(StatBonusRateHeal_items))
        for item in reversed(StatBonusRateHeal_items):
            builder.PrependInt64(convert_long(item, password))
        StatBonusRateHeal_vec = builder.EndVector(len(StatBonusRateHeal_items))
    RecipeId_vec = 0
    if 'RecipeId' in data:
        RecipeId_items = data['RecipeId']
        CharacterTranscendenceExcel.StartRecipeIdVector(builder, len(RecipeId_items))
        for item in reversed(RecipeId_items):
            builder.PrependInt64(convert_long(item, password))
        RecipeId_vec = builder.EndVector(len(RecipeId_items))
    SkillSlotA_vec = 0
    if 'SkillSlotA' in data:
        SkillSlotA_items = data['SkillSlotA']
        SkillSlotA_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in SkillSlotA_items]
        CharacterTranscendenceExcel.StartSkillSlotAVector(builder, len(SkillSlotA_str_offsets))
        for offset in reversed(SkillSlotA_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        SkillSlotA_vec = builder.EndVector(len(SkillSlotA_items))
    SkillSlotB_vec = 0
    if 'SkillSlotB' in data:
        SkillSlotB_items = data['SkillSlotB']
        SkillSlotB_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in SkillSlotB_items]
        CharacterTranscendenceExcel.StartSkillSlotBVector(builder, len(SkillSlotB_str_offsets))
        for offset in reversed(SkillSlotB_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        SkillSlotB_vec = builder.EndVector(len(SkillSlotB_items))
    SkillSlotC_vec = 0
    if 'SkillSlotC' in data:
        SkillSlotC_items = data['SkillSlotC']
        SkillSlotC_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in SkillSlotC_items]
        CharacterTranscendenceExcel.StartSkillSlotCVector(builder, len(SkillSlotC_str_offsets))
        for offset in reversed(SkillSlotC_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        SkillSlotC_vec = builder.EndVector(len(SkillSlotC_items))
    MaxlevelStar_vec = 0
    if 'MaxlevelStar' in data:
        MaxlevelStar_items = data['MaxlevelStar']
        CharacterTranscendenceExcel.StartMaxlevelStarVector(builder, len(MaxlevelStar_items))
        for item in reversed(MaxlevelStar_items):
            builder.PrependInt32(convert_int(item, password))
        MaxlevelStar_vec = builder.EndVector(len(MaxlevelStar_items))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    CharacterTranscendenceExcel.Start(builder)
    CharacterTranscendenceExcel.AddCharacterId(builder, CharacterId_val)
    CharacterTranscendenceExcel.AddMaxFavorLevel(builder, MaxFavorLevel_vec)
    CharacterTranscendenceExcel.AddStatBonusRateAttack(builder, StatBonusRateAttack_vec)
    CharacterTranscendenceExcel.AddStatBonusRateHP(builder, StatBonusRateHP_vec)
    CharacterTranscendenceExcel.AddStatBonusRateHeal(builder, StatBonusRateHeal_vec)
    CharacterTranscendenceExcel.AddRecipeId(builder, RecipeId_vec)
    CharacterTranscendenceExcel.AddSkillSlotA(builder, SkillSlotA_vec)
    CharacterTranscendenceExcel.AddSkillSlotB(builder, SkillSlotB_vec)
    CharacterTranscendenceExcel.AddSkillSlotC(builder, SkillSlotC_vec)
    CharacterTranscendenceExcel.AddMaxlevelStar(builder, MaxlevelStar_vec)
    return CharacterTranscendenceExcel.End(builder)

def pack_CharacterVictoryInteractionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterVictoryInteraction") if encrypt else None
    VictoryStartAnimationPath01_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath01', ''), password))
    VictoryEndAnimationPath01_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath01', ''), password))
    VictoryStartAnimationPath02_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath02', ''), password))
    VictoryEndAnimationPath02_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath02', ''), password))
    VictoryStartAnimationPath03_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath03', ''), password))
    VictoryEndAnimationPath03_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath03', ''), password))
    VictoryStartAnimationPath04_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath04', ''), password))
    VictoryEndAnimationPath04_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath04', ''), password))
    VictoryStartAnimationPath05_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath05', ''), password))
    VictoryEndAnimationPath05_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath05', ''), password))
    VictoryStartAnimationPath06_off = builder.CreateString(encrypt_string(data.get('VictoryStartAnimationPath06', ''), password))
    VictoryEndAnimationPath06_off = builder.CreateString(encrypt_string(data.get('VictoryEndAnimationPath06', ''), password))
    InteractionId_val = convert_long(data.get('InteractionId', 0), password)
    CostumeId01_val = convert_long(data.get('CostumeId01', 0), password)
    PositionIndex01_val = convert_int(data.get('PositionIndex01', 0), password)
    VoiceEvent01_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent01', 0)), password)
    CostumeId02_val = convert_long(data.get('CostumeId02', 0), password)
    PositionIndex02_val = convert_int(data.get('PositionIndex02', 0), password)
    VoiceEvent02_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent02', 0)), password)
    CostumeId03_val = convert_long(data.get('CostumeId03', 0), password)
    PositionIndex03_val = convert_int(data.get('PositionIndex03', 0), password)
    VoiceEvent03_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent03', 0)), password)
    CostumeId04_val = convert_long(data.get('CostumeId04', 0), password)
    PositionIndex04_val = convert_int(data.get('PositionIndex04', 0), password)
    VoiceEvent04_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent04', 0)), password)
    CostumeId05_val = convert_long(data.get('CostumeId05', 0), password)
    PositionIndex05_val = convert_int(data.get('PositionIndex05', 0), password)
    VoiceEvent05_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent05', 0)), password)
    CostumeId06_val = convert_long(data.get('CostumeId06', 0), password)
    PositionIndex06_val = convert_int(data.get('PositionIndex06', 0), password)
    VoiceEvent06_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent06', 0)), password)
    CharacterVictoryInteractionExcel.Start(builder)
    CharacterVictoryInteractionExcel.AddInteractionId(builder, InteractionId_val)
    CharacterVictoryInteractionExcel.AddCostumeId01(builder, CostumeId01_val)
    CharacterVictoryInteractionExcel.AddPositionIndex01(builder, PositionIndex01_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath01(builder, VictoryStartAnimationPath01_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath01(builder, VictoryEndAnimationPath01_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent01(builder, VoiceEvent01_val)
    CharacterVictoryInteractionExcel.AddCostumeId02(builder, CostumeId02_val)
    CharacterVictoryInteractionExcel.AddPositionIndex02(builder, PositionIndex02_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath02(builder, VictoryStartAnimationPath02_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath02(builder, VictoryEndAnimationPath02_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent02(builder, VoiceEvent02_val)
    CharacterVictoryInteractionExcel.AddCostumeId03(builder, CostumeId03_val)
    CharacterVictoryInteractionExcel.AddPositionIndex03(builder, PositionIndex03_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath03(builder, VictoryStartAnimationPath03_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath03(builder, VictoryEndAnimationPath03_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent03(builder, VoiceEvent03_val)
    CharacterVictoryInteractionExcel.AddCostumeId04(builder, CostumeId04_val)
    CharacterVictoryInteractionExcel.AddPositionIndex04(builder, PositionIndex04_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath04(builder, VictoryStartAnimationPath04_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath04(builder, VictoryEndAnimationPath04_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent04(builder, VoiceEvent04_val)
    CharacterVictoryInteractionExcel.AddCostumeId05(builder, CostumeId05_val)
    CharacterVictoryInteractionExcel.AddPositionIndex05(builder, PositionIndex05_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath05(builder, VictoryStartAnimationPath05_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath05(builder, VictoryEndAnimationPath05_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent05(builder, VoiceEvent05_val)
    CharacterVictoryInteractionExcel.AddCostumeId06(builder, CostumeId06_val)
    CharacterVictoryInteractionExcel.AddPositionIndex06(builder, PositionIndex06_val)
    CharacterVictoryInteractionExcel.AddVictoryStartAnimationPath06(builder, VictoryStartAnimationPath06_off)
    CharacterVictoryInteractionExcel.AddVictoryEndAnimationPath06(builder, VictoryEndAnimationPath06_off)
    CharacterVictoryInteractionExcel.AddVoiceEvent06(builder, VoiceEvent06_val)
    return CharacterVictoryInteractionExcel.End(builder)

def pack_CharacterVoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterVoice") if encrypt else None
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        CharacterVoiceExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    Volume_vec = 0
    if 'Volume' in data:
        Volume_items = data['Volume']
        CharacterVoiceExcel.StartVolumeVector(builder, len(Volume_items))
        for item in reversed(Volume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Volume_vec = builder.EndVector(len(Volume_items))
    Delay_vec = 0
    if 'Delay' in data:
        Delay_items = data['Delay']
        CharacterVoiceExcel.StartDelayVector(builder, len(Delay_items))
        for item in reversed(Delay_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Delay_vec = builder.EndVector(len(Delay_items))
    Path_vec = 0
    if 'Path' in data:
        Path_items = data['Path']
        Path_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in Path_items]
        CharacterVoiceExcel.StartPathVector(builder, len(Path_str_offsets))
        for offset in reversed(Path_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        Path_vec = builder.EndVector(len(Path_items))
    CharacterVoiceUniqueId_val = convert_long(data.get('CharacterVoiceUniqueId', 0), password)
    CharacterVoiceGroupId_val = convert_long(data.get('CharacterVoiceGroupId', 0), password)
    VoiceHash_val = convert_uint(data.get('VoiceHash', 0), password)
    OnlyOne_val = data.get('OnlyOne', 0)
    Priority_val = convert_int(data.get('Priority', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    CVCollectionType_val = convert_int(getattr(CVCollectionType, data.get('CVCollectionType', 0)), password)
    UnlockFavorRank_val = convert_long(data.get('UnlockFavorRank', 0), password)
    CharacterVoiceExcel.Start(builder)
    CharacterVoiceExcel.AddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId_val)
    CharacterVoiceExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId_val)
    CharacterVoiceExcel.AddVoiceHash(builder, VoiceHash_val)
    CharacterVoiceExcel.AddOnlyOne(builder, OnlyOne_val)
    CharacterVoiceExcel.AddPriority(builder, Priority_val)
    CharacterVoiceExcel.AddDisplayOrder(builder, DisplayOrder_val)
    CharacterVoiceExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CharacterVoiceExcel.AddCVCollectionType(builder, CVCollectionType_val)
    CharacterVoiceExcel.AddUnlockFavorRank(builder, UnlockFavorRank_val)
    CharacterVoiceExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    CharacterVoiceExcel.AddNation(builder, Nation_vec)
    CharacterVoiceExcel.AddVolume(builder, Volume_vec)
    CharacterVoiceExcel.AddDelay(builder, Delay_vec)
    CharacterVoiceExcel.AddPath(builder, Path_vec)
    return CharacterVoiceExcel.End(builder)

def pack_CharacterVoiceSubtitleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterVoiceSubtitle") if encrypt else None
    LocalizeCVGroup_off = builder.CreateString(encrypt_string(data.get('LocalizeCVGroup', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    CharacterVoiceGroupId_val = convert_long(data.get('CharacterVoiceGroupId', 0), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    Separate_val = data.get('Separate', 0)
    CharacterVoiceSubtitleExcel.Start(builder)
    CharacterVoiceSubtitleExcel.AddLocalizeCVGroup(builder, LocalizeCVGroup_off)
    CharacterVoiceSubtitleExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId_val)
    CharacterVoiceSubtitleExcel.AddDuration(builder, Duration_val)
    CharacterVoiceSubtitleExcel.AddSeparate(builder, Separate_val)
    CharacterVoiceSubtitleExcel.AddLocalizeKR(builder, LocalizeKR_off)
    CharacterVoiceSubtitleExcel.AddLocalizeJP(builder, LocalizeJP_off)
    return CharacterVoiceSubtitleExcel.End(builder)

def pack_CharacterWeaponExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterWeapon") if encrypt else None
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    Unlock_vec = 0
    if 'Unlock' in data:
        Unlock_items = data['Unlock']
        CharacterWeaponExcel.StartUnlockVector(builder, len(Unlock_items))
        for item in reversed(Unlock_items):
            builder.PrependBool(item)
        Unlock_vec = builder.EndVector(len(Unlock_items))
    RecipeId_vec = 0
    if 'RecipeId' in data:
        RecipeId_items = data['RecipeId']
        CharacterWeaponExcel.StartRecipeIdVector(builder, len(RecipeId_items))
        for item in reversed(RecipeId_items):
            builder.PrependInt64(convert_long(item, password))
        RecipeId_vec = builder.EndVector(len(RecipeId_items))
    MaxLevel_vec = 0
    if 'MaxLevel' in data:
        MaxLevel_items = data['MaxLevel']
        CharacterWeaponExcel.StartMaxLevelVector(builder, len(MaxLevel_items))
        for item in reversed(MaxLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MaxLevel_vec = builder.EndVector(len(MaxLevel_items))
    LearnSkillSlot_vec = 0
    if 'LearnSkillSlot' in data:
        LearnSkillSlot_items = data['LearnSkillSlot']
        LearnSkillSlot_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in LearnSkillSlot_items]
        CharacterWeaponExcel.StartLearnSkillSlotVector(builder, len(LearnSkillSlot_str_offsets))
        for offset in reversed(LearnSkillSlot_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        LearnSkillSlot_vec = builder.EndVector(len(LearnSkillSlot_items))
    StatType_vec = 0
    if 'StatType' in data:
        StatType_items = data['StatType']
        CharacterWeaponExcel.StartStatTypeVector(builder, len(StatType_items))
        for item in reversed(StatType_items):
            builder.PrependInt32(convert_int(getattr(EquipmentOptionType, item), password))
        StatType_vec = builder.EndVector(len(StatType_items))
    StatValue_vec = 0
    if 'StatValue' in data:
        StatValue_items = data['StatValue']
        CharacterWeaponExcel.StartStatValueVector(builder, len(StatValue_items))
        for item in reversed(StatValue_items):
            builder.PrependInt64(convert_long(item, password))
        StatValue_vec = builder.EndVector(len(StatValue_items))
    Id_val = convert_long(data.get('Id', 0), password)
    SetRecipe_val = convert_long(data.get('SetRecipe', 0), password)
    StatLevelUpType_val = convert_int(getattr(StatLevelUpType, data.get('StatLevelUpType', 0)), password)
    AttackPower_val = convert_long(data.get('AttackPower', 0), password)
    AttackPower100_val = convert_long(data.get('AttackPower100', 0), password)
    MaxHP_val = convert_long(data.get('MaxHP', 0), password)
    MaxHP100_val = convert_long(data.get('MaxHP100', 0), password)
    HealPower_val = convert_long(data.get('HealPower', 0), password)
    HealPower100_val = convert_long(data.get('HealPower100', 0), password)
    CharacterWeaponExcel.Start(builder)
    CharacterWeaponExcel.AddId(builder, Id_val)
    CharacterWeaponExcel.AddImagePath(builder, ImagePath_off)
    CharacterWeaponExcel.AddSetRecipe(builder, SetRecipe_val)
    CharacterWeaponExcel.AddStatLevelUpType(builder, StatLevelUpType_val)
    CharacterWeaponExcel.AddAttackPower(builder, AttackPower_val)
    CharacterWeaponExcel.AddAttackPower100(builder, AttackPower100_val)
    CharacterWeaponExcel.AddMaxHP(builder, MaxHP_val)
    CharacterWeaponExcel.AddMaxHP100(builder, MaxHP100_val)
    CharacterWeaponExcel.AddHealPower(builder, HealPower_val)
    CharacterWeaponExcel.AddHealPower100(builder, HealPower100_val)
    CharacterWeaponExcel.AddUnlock(builder, Unlock_vec)
    CharacterWeaponExcel.AddRecipeId(builder, RecipeId_vec)
    CharacterWeaponExcel.AddMaxLevel(builder, MaxLevel_vec)
    CharacterWeaponExcel.AddLearnSkillSlot(builder, LearnSkillSlot_vec)
    CharacterWeaponExcel.AddStatType(builder, StatType_vec)
    CharacterWeaponExcel.AddStatValue(builder, StatValue_vec)
    return CharacterWeaponExcel.End(builder)

def pack_CharacterWeaponExpBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterWeaponExpBonus") if encrypt else None
    WeaponType_val = convert_int(getattr(WeaponType, data.get('WeaponType', 0)), password)
    WeaponExpGrowthA_val = convert_int(data.get('WeaponExpGrowthA', 0), password)
    WeaponExpGrowthB_val = convert_int(data.get('WeaponExpGrowthB', 0), password)
    WeaponExpGrowthC_val = convert_int(data.get('WeaponExpGrowthC', 0), password)
    WeaponExpGrowthZ_val = convert_int(data.get('WeaponExpGrowthZ', 0), password)
    CharacterWeaponExpBonusExcel.Start(builder)
    CharacterWeaponExpBonusExcel.AddWeaponType(builder, WeaponType_val)
    CharacterWeaponExpBonusExcel.AddWeaponExpGrowthA(builder, WeaponExpGrowthA_val)
    CharacterWeaponExpBonusExcel.AddWeaponExpGrowthB(builder, WeaponExpGrowthB_val)
    CharacterWeaponExpBonusExcel.AddWeaponExpGrowthC(builder, WeaponExpGrowthC_val)
    CharacterWeaponExpBonusExcel.AddWeaponExpGrowthZ(builder, WeaponExpGrowthZ_val)
    return CharacterWeaponExpBonusExcel.End(builder)

def pack_CharacterWeaponLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CharacterWeaponLevel") if encrypt else None
    Level_val = convert_int(data.get('Level', 0), password)
    Exp_val = convert_long(data.get('Exp', 0), password)
    TotalExp_val = convert_long(data.get('TotalExp', 0), password)
    CharacterWeaponLevelExcel.Start(builder)
    CharacterWeaponLevelExcel.AddLevel(builder, Level_val)
    CharacterWeaponLevelExcel.AddExp(builder, Exp_val)
    CharacterWeaponLevelExcel.AddTotalExp(builder, TotalExp_val)
    return CharacterWeaponLevelExcel.End(builder)

def pack_CheatCodeListExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CheatCodeList") if encrypt else None
    Desc_off = builder.CreateString(encrypt_string(data.get('Desc', ''), password))
    CheatCode_vec = 0
    if 'CheatCode' in data:
        CheatCode_items = data['CheatCode']
        CheatCode_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CheatCode_items]
        CheatCodeListExcel.StartCheatCodeVector(builder, len(CheatCode_str_offsets))
        for offset in reversed(CheatCode_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CheatCode_vec = builder.EndVector(len(CheatCode_items))
    InputTitle_vec = 0
    if 'InputTitle' in data:
        InputTitle_items = data['InputTitle']
        InputTitle_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in InputTitle_items]
        CheatCodeListExcel.StartInputTitleVector(builder, len(InputTitle_str_offsets))
        for offset in reversed(InputTitle_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        InputTitle_vec = builder.EndVector(len(InputTitle_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CheatCodeListExcel.Start(builder)
    CheatCodeListExcel.AddId(builder, Id_val)
    CheatCodeListExcel.AddCheatCode(builder, CheatCode_vec)
    CheatCodeListExcel.AddInputTitle(builder, InputTitle_vec)
    CheatCodeListExcel.AddDesc(builder, Desc_off)
    return CheatCodeListExcel.End(builder)

def pack_ClanChattingEmojiExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ClanChattingEmoji") if encrypt else None
    ImagePathKr_off = builder.CreateString(encrypt_string(data.get('ImagePathKr', ''), password))
    ImagePathJp_off = builder.CreateString(encrypt_string(data.get('ImagePathJp', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    TabGroupId_val = convert_int(data.get('TabGroupId', 0), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    ClanChattingEmojiExcel.Start(builder)
    ClanChattingEmojiExcel.AddId(builder, Id_val)
    ClanChattingEmojiExcel.AddTabGroupId(builder, TabGroupId_val)
    ClanChattingEmojiExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ClanChattingEmojiExcel.AddImagePathKr(builder, ImagePathKr_off)
    ClanChattingEmojiExcel.AddImagePathJp(builder, ImagePathJp_off)
    return ClanChattingEmojiExcel.End(builder)

def pack_ClanRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ClanReward") if encrypt else None
    ClanRewardType_val = convert_int(getattr(ClanRewardType, data.get('ClanRewardType', 0)), password)
    EchelonType_val = convert_int(getattr(EchelonType, data.get('EchelonType', 0)), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    ClanRewardExcel.Start(builder)
    ClanRewardExcel.AddClanRewardType(builder, ClanRewardType_val)
    ClanRewardExcel.AddEchelonType(builder, EchelonType_val)
    ClanRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    ClanRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    ClanRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return ClanRewardExcel.End(builder)

def pack_CombatEmojiExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("CombatEmoji") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    EmojiEvent_val = convert_int(getattr(EmojiEvent, data.get('EmojiEvent', 0)), password)
    OrderOfPriority_val = convert_int(data.get('OrderOfPriority', 0), password)
    EmojiDuration_val = data.get('EmojiDuration', 0)
    EmojiReversal_val = data.get('EmojiReversal', 0)
    EmojiTurnOn_val = data.get('EmojiTurnOn', 0)
    ShowEmojiDelay_val = convert_int(data.get('ShowEmojiDelay', 0), password)
    ShowDefaultBG_val = data.get('ShowDefaultBG', 0)
    CombatEmojiExcel.Start(builder)
    CombatEmojiExcel.AddUniqueId(builder, UniqueId_val)
    CombatEmojiExcel.AddEmojiEvent(builder, EmojiEvent_val)
    CombatEmojiExcel.AddOrderOfPriority(builder, OrderOfPriority_val)
    CombatEmojiExcel.AddEmojiDuration(builder, EmojiDuration_val)
    CombatEmojiExcel.AddEmojiReversal(builder, EmojiReversal_val)
    CombatEmojiExcel.AddEmojiTurnOn(builder, EmojiTurnOn_val)
    CombatEmojiExcel.AddShowEmojiDelay(builder, ShowEmojiDelay_val)
    CombatEmojiExcel.AddShowDefaultBG(builder, ShowDefaultBG_val)
    return CombatEmojiExcel.End(builder)

def pack_ConquestCalculateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestCalculate") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CalculateConditionParcelType_val = convert_int(getattr(ParcelType, data.get('CalculateConditionParcelType', 0)), password)
    CalculateConditionParcelUniqueId_val = convert_long(data.get('CalculateConditionParcelUniqueId', 0), password)
    CalculateConditionParcelAmount_val = convert_long(data.get('CalculateConditionParcelAmount', 0), password)
    ConquestCalculateExcel.Start(builder)
    ConquestCalculateExcel.AddEventContentId(builder, EventContentId_val)
    ConquestCalculateExcel.AddCalculateConditionParcelType(builder, CalculateConditionParcelType_val)
    ConquestCalculateExcel.AddCalculateConditionParcelUniqueId(builder, CalculateConditionParcelUniqueId_val)
    ConquestCalculateExcel.AddCalculateConditionParcelAmount(builder, CalculateConditionParcelAmount_val)
    return ConquestCalculateExcel.End(builder)

def pack_ConquestCameraSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestCameraSetting") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    ConquestMapBoundaryOffsetLeft_val = encrypt_float(data.get('ConquestMapBoundaryOffsetLeft', 0), password)
    ConquestMapBoundaryOffsetRight_val = encrypt_float(data.get('ConquestMapBoundaryOffsetRight', 0), password)
    ConquestMapBoundaryOffsetTop_val = encrypt_float(data.get('ConquestMapBoundaryOffsetTop', 0), password)
    ConquestMapBoundaryOffsetBottom_val = encrypt_float(data.get('ConquestMapBoundaryOffsetBottom', 0), password)
    ConquestMapCenterOffsetX_val = encrypt_float(data.get('ConquestMapCenterOffsetX', 0), password)
    ConquestMapCenterOffsetY_val = encrypt_float(data.get('ConquestMapCenterOffsetY', 0), password)
    CameraAngle_val = encrypt_float(data.get('CameraAngle', 0), password)
    CameraZoomMax_val = encrypt_float(data.get('CameraZoomMax', 0), password)
    CameraZoomMin_val = encrypt_float(data.get('CameraZoomMin', 0), password)
    CameraZoomDefault_val = encrypt_float(data.get('CameraZoomDefault', 0), password)
    ConquestCameraSettingExcel.Start(builder)
    ConquestCameraSettingExcel.AddId(builder, Id_val)
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetLeft(builder, ConquestMapBoundaryOffsetLeft_val)
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetRight(builder, ConquestMapBoundaryOffsetRight_val)
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetTop(builder, ConquestMapBoundaryOffsetTop_val)
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetBottom(builder, ConquestMapBoundaryOffsetBottom_val)
    ConquestCameraSettingExcel.AddConquestMapCenterOffsetX(builder, ConquestMapCenterOffsetX_val)
    ConquestCameraSettingExcel.AddConquestMapCenterOffsetY(builder, ConquestMapCenterOffsetY_val)
    ConquestCameraSettingExcel.AddCameraAngle(builder, CameraAngle_val)
    ConquestCameraSettingExcel.AddCameraZoomMax(builder, CameraZoomMax_val)
    ConquestCameraSettingExcel.AddCameraZoomMin(builder, CameraZoomMin_val)
    ConquestCameraSettingExcel.AddCameraZoomDefault(builder, CameraZoomDefault_val)
    return ConquestCameraSettingExcel.End(builder)

def pack_ConquestErosionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestErosion") if encrypt else None
    PhaseStartConditionType_vec = 0
    if 'PhaseStartConditionType' in data:
        PhaseStartConditionType_items = data['PhaseStartConditionType']
        ConquestErosionExcel.StartPhaseStartConditionTypeVector(builder, len(PhaseStartConditionType_items))
        for item in reversed(PhaseStartConditionType_items):
            builder.PrependInt32(convert_int(getattr(ConquestConditionType, item), password))
        PhaseStartConditionType_vec = builder.EndVector(len(PhaseStartConditionType_items))
    PhaseStartConditionParameter_vec = 0
    if 'PhaseStartConditionParameter' in data:
        PhaseStartConditionParameter_items = data['PhaseStartConditionParameter']
        PhaseStartConditionParameter_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PhaseStartConditionParameter_items]
        ConquestErosionExcel.StartPhaseStartConditionParameterVector(builder, len(PhaseStartConditionParameter_str_offsets))
        for offset in reversed(PhaseStartConditionParameter_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PhaseStartConditionParameter_vec = builder.EndVector(len(PhaseStartConditionParameter_items))
    PhaseBeforeExposeConditionType_vec = 0
    if 'PhaseBeforeExposeConditionType' in data:
        PhaseBeforeExposeConditionType_items = data['PhaseBeforeExposeConditionType']
        ConquestErosionExcel.StartPhaseBeforeExposeConditionTypeVector(builder, len(PhaseBeforeExposeConditionType_items))
        for item in reversed(PhaseBeforeExposeConditionType_items):
            builder.PrependInt32(convert_int(getattr(ConquestConditionType, item), password))
        PhaseBeforeExposeConditionType_vec = builder.EndVector(len(PhaseBeforeExposeConditionType_items))
    PhaseBeforeExposeConditionParameter_vec = 0
    if 'PhaseBeforeExposeConditionParameter' in data:
        PhaseBeforeExposeConditionParameter_items = data['PhaseBeforeExposeConditionParameter']
        PhaseBeforeExposeConditionParameter_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PhaseBeforeExposeConditionParameter_items]
        ConquestErosionExcel.StartPhaseBeforeExposeConditionParameterVector(builder, len(PhaseBeforeExposeConditionParameter_str_offsets))
        for offset in reversed(PhaseBeforeExposeConditionParameter_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PhaseBeforeExposeConditionParameter_vec = builder.EndVector(len(PhaseBeforeExposeConditionParameter_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    ErosionType_val = convert_int(getattr(ConquestErosionType, data.get('ErosionType', 0)), password)
    Phase_val = convert_int(data.get('Phase', 0), password)
    PhaseAlarm_val = data.get('PhaseAlarm', 0)
    StepIndex_val = convert_int(data.get('StepIndex', 0), password)
    ErosionBattleConditionParcelType_val = convert_int(getattr(ParcelType, data.get('ErosionBattleConditionParcelType', 0)), password)
    ErosionBattleConditionParcelUniqueId_val = convert_long(data.get('ErosionBattleConditionParcelUniqueId', 0), password)
    ErosionBattleConditionParcelAmount_val = convert_long(data.get('ErosionBattleConditionParcelAmount', 0), password)
    ConquestRewardId_val = convert_long(data.get('ConquestRewardId', 0), password)
    ConquestErosionExcel.Start(builder)
    ConquestErosionExcel.AddEventContentId(builder, EventContentId_val)
    ConquestErosionExcel.AddId(builder, Id_val)
    ConquestErosionExcel.AddErosionType(builder, ErosionType_val)
    ConquestErosionExcel.AddPhase(builder, Phase_val)
    ConquestErosionExcel.AddPhaseAlarm(builder, PhaseAlarm_val)
    ConquestErosionExcel.AddStepIndex(builder, StepIndex_val)
    ConquestErosionExcel.AddPhaseStartConditionType(builder, PhaseStartConditionType_vec)
    ConquestErosionExcel.AddPhaseStartConditionParameter(builder, PhaseStartConditionParameter_vec)
    ConquestErosionExcel.AddPhaseBeforeExposeConditionType(builder, PhaseBeforeExposeConditionType_vec)
    ConquestErosionExcel.AddPhaseBeforeExposeConditionParameter(builder, PhaseBeforeExposeConditionParameter_vec)
    ConquestErosionExcel.AddErosionBattleConditionParcelType(builder, ErosionBattleConditionParcelType_val)
    ConquestErosionExcel.AddErosionBattleConditionParcelUniqueId(builder, ErosionBattleConditionParcelUniqueId_val)
    ConquestErosionExcel.AddErosionBattleConditionParcelAmount(builder, ErosionBattleConditionParcelAmount_val)
    ConquestErosionExcel.AddConquestRewardId(builder, ConquestRewardId_val)
    return ConquestErosionExcel.End(builder)

def pack_ConquestErosionUnitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestErosionUnit") if encrypt else None
    TilePrefabId_val = convert_long(data.get('TilePrefabId', 0), password)
    MassErosionUnitId_val = convert_long(data.get('MassErosionUnitId', 0), password)
    MassErosionUnitRotationY_val = encrypt_float(data.get('MassErosionUnitRotationY', 0), password)
    IndividualErosionUnitId_val = convert_long(data.get('IndividualErosionUnitId', 0), password)
    IndividualErosionUnitRotationY_val = encrypt_float(data.get('IndividualErosionUnitRotationY', 0), password)
    ConquestErosionUnitExcel.Start(builder)
    ConquestErosionUnitExcel.AddTilePrefabId(builder, TilePrefabId_val)
    ConquestErosionUnitExcel.AddMassErosionUnitId(builder, MassErosionUnitId_val)
    ConquestErosionUnitExcel.AddMassErosionUnitRotationY(builder, MassErosionUnitRotationY_val)
    ConquestErosionUnitExcel.AddIndividualErosionUnitId(builder, IndividualErosionUnitId_val)
    ConquestErosionUnitExcel.AddIndividualErosionUnitRotationY(builder, IndividualErosionUnitRotationY_val)
    return ConquestErosionUnitExcel.End(builder)

def pack_ConquestEventExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestEvent") if encrypt else None
    EvnetMapGoalLocalize_off = builder.CreateString(encrypt_string(data.get('EvnetMapGoalLocalize', ''), password))
    EvnetMapNameLocalize_off = builder.CreateString(encrypt_string(data.get('EvnetMapNameLocalize', ''), password))
    EvnetScenarioBG_off = builder.CreateString(encrypt_string(data.get('EvnetScenarioBG', ''), password))
    LocalizeUnexpected_off = builder.CreateString(encrypt_string(data.get('LocalizeUnexpected', ''), password))
    LocalizeErosions_off = builder.CreateString(encrypt_string(data.get('LocalizeErosions', ''), password))
    LocalizeStep_off = builder.CreateString(encrypt_string(data.get('LocalizeStep', ''), password))
    LocalizeTile_off = builder.CreateString(encrypt_string(data.get('LocalizeTile', ''), password))
    LocalizeMapInfo_off = builder.CreateString(encrypt_string(data.get('LocalizeMapInfo', ''), password))
    LocalizeManage_off = builder.CreateString(encrypt_string(data.get('LocalizeManage', ''), password))
    LocalizeUpgrade_off = builder.CreateString(encrypt_string(data.get('LocalizeUpgrade', ''), password))
    LocalizeTreasureBox_off = builder.CreateString(encrypt_string(data.get('LocalizeTreasureBox', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    MainStoryEventContentId_val = convert_long(data.get('MainStoryEventContentId', 0), password)
    ConquestEventType_val = convert_int(getattr(ConquestEventType, data.get('ConquestEventType', 0)), password)
    UseErosion_val = data.get('UseErosion', 0)
    UseUnexpectedEvent_val = data.get('UseUnexpectedEvent', 0)
    UseCalculate_val = data.get('UseCalculate', 0)
    UseConquestObject_val = data.get('UseConquestObject', 0)
    MapEnterScenarioGroupId_val = convert_long(data.get('MapEnterScenarioGroupId', 0), password)
    ManageUnitChange_val = convert_int(data.get('ManageUnitChange', 0), password)
    AssistCount_val = convert_int(data.get('AssistCount', 0), password)
    PlayTimeLimitInSeconds_val = convert_int(data.get('PlayTimeLimitInSeconds', 0), password)
    AnimationUnitAmountMin_val = convert_int(data.get('AnimationUnitAmountMin', 0), password)
    AnimationUnitAmountMax_val = convert_int(data.get('AnimationUnitAmountMax', 0), password)
    AnimationUnitDelay_val = encrypt_float(data.get('AnimationUnitDelay', 0), password)
    IndividualErosionDailyCount_val = convert_long(data.get('IndividualErosionDailyCount', 0), password)
    ConquestEventExcel.Start(builder)
    ConquestEventExcel.AddEventContentId(builder, EventContentId_val)
    ConquestEventExcel.AddMainStoryEventContentId(builder, MainStoryEventContentId_val)
    ConquestEventExcel.AddConquestEventType(builder, ConquestEventType_val)
    ConquestEventExcel.AddUseErosion(builder, UseErosion_val)
    ConquestEventExcel.AddUseUnexpectedEvent(builder, UseUnexpectedEvent_val)
    ConquestEventExcel.AddUseCalculate(builder, UseCalculate_val)
    ConquestEventExcel.AddUseConquestObject(builder, UseConquestObject_val)
    ConquestEventExcel.AddEvnetMapGoalLocalize(builder, EvnetMapGoalLocalize_off)
    ConquestEventExcel.AddEvnetMapNameLocalize(builder, EvnetMapNameLocalize_off)
    ConquestEventExcel.AddMapEnterScenarioGroupId(builder, MapEnterScenarioGroupId_val)
    ConquestEventExcel.AddEvnetScenarioBG(builder, EvnetScenarioBG_off)
    ConquestEventExcel.AddManageUnitChange(builder, ManageUnitChange_val)
    ConquestEventExcel.AddAssistCount(builder, AssistCount_val)
    ConquestEventExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds_val)
    ConquestEventExcel.AddAnimationUnitAmountMin(builder, AnimationUnitAmountMin_val)
    ConquestEventExcel.AddAnimationUnitAmountMax(builder, AnimationUnitAmountMax_val)
    ConquestEventExcel.AddAnimationUnitDelay(builder, AnimationUnitDelay_val)
    ConquestEventExcel.AddLocalizeUnexpected(builder, LocalizeUnexpected_off)
    ConquestEventExcel.AddLocalizeErosions(builder, LocalizeErosions_off)
    ConquestEventExcel.AddLocalizeStep(builder, LocalizeStep_off)
    ConquestEventExcel.AddLocalizeTile(builder, LocalizeTile_off)
    ConquestEventExcel.AddLocalizeMapInfo(builder, LocalizeMapInfo_off)
    ConquestEventExcel.AddLocalizeManage(builder, LocalizeManage_off)
    ConquestEventExcel.AddLocalizeUpgrade(builder, LocalizeUpgrade_off)
    ConquestEventExcel.AddLocalizeTreasureBox(builder, LocalizeTreasureBox_off)
    ConquestEventExcel.AddIndividualErosionDailyCount(builder, IndividualErosionDailyCount_val)
    return ConquestEventExcel.End(builder)

def pack_ConquestGroupBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestGroupBonus") if encrypt else None
    School_vec = 0
    if 'School' in data:
        School_items = data['School']
        ConquestGroupBonusExcel.StartSchoolVector(builder, len(School_items))
        for item in reversed(School_items):
            builder.PrependInt32(convert_int(getattr(School, item), password))
        School_vec = builder.EndVector(len(School_items))
    BonusParcelType_vec = 0
    if 'BonusParcelType' in data:
        BonusParcelType_items = data['BonusParcelType']
        ConquestGroupBonusExcel.StartBonusParcelTypeVector(builder, len(BonusParcelType_items))
        for item in reversed(BonusParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        BonusParcelType_vec = builder.EndVector(len(BonusParcelType_items))
    BonusId_vec = 0
    if 'BonusId' in data:
        BonusId_items = data['BonusId']
        ConquestGroupBonusExcel.StartBonusIdVector(builder, len(BonusId_items))
        for item in reversed(BonusId_items):
            builder.PrependInt64(convert_long(item, password))
        BonusId_vec = builder.EndVector(len(BonusId_items))
    BonusCharacterCount1_vec = 0
    if 'BonusCharacterCount1' in data:
        BonusCharacterCount1_items = data['BonusCharacterCount1']
        ConquestGroupBonusExcel.StartBonusCharacterCount1Vector(builder, len(BonusCharacterCount1_items))
        for item in reversed(BonusCharacterCount1_items):
            builder.PrependInt32(convert_int(item, password))
        BonusCharacterCount1_vec = builder.EndVector(len(BonusCharacterCount1_items))
    BonusPercentage1_vec = 0
    if 'BonusPercentage1' in data:
        BonusPercentage1_items = data['BonusPercentage1']
        ConquestGroupBonusExcel.StartBonusPercentage1Vector(builder, len(BonusPercentage1_items))
        for item in reversed(BonusPercentage1_items):
            builder.PrependInt64(convert_long(item, password))
        BonusPercentage1_vec = builder.EndVector(len(BonusPercentage1_items))
    BonusCharacterCount2_vec = 0
    if 'BonusCharacterCount2' in data:
        BonusCharacterCount2_items = data['BonusCharacterCount2']
        ConquestGroupBonusExcel.StartBonusCharacterCount2Vector(builder, len(BonusCharacterCount2_items))
        for item in reversed(BonusCharacterCount2_items):
            builder.PrependInt32(convert_int(item, password))
        BonusCharacterCount2_vec = builder.EndVector(len(BonusCharacterCount2_items))
    BonusPercentage2_vec = 0
    if 'BonusPercentage2' in data:
        BonusPercentage2_items = data['BonusPercentage2']
        ConquestGroupBonusExcel.StartBonusPercentage2Vector(builder, len(BonusPercentage2_items))
        for item in reversed(BonusPercentage2_items):
            builder.PrependInt64(convert_long(item, password))
        BonusPercentage2_vec = builder.EndVector(len(BonusPercentage2_items))
    BonusCharacterCount3_vec = 0
    if 'BonusCharacterCount3' in data:
        BonusCharacterCount3_items = data['BonusCharacterCount3']
        ConquestGroupBonusExcel.StartBonusCharacterCount3Vector(builder, len(BonusCharacterCount3_items))
        for item in reversed(BonusCharacterCount3_items):
            builder.PrependInt32(convert_int(item, password))
        BonusCharacterCount3_vec = builder.EndVector(len(BonusCharacterCount3_items))
    BonusPercentage3_vec = 0
    if 'BonusPercentage3' in data:
        BonusPercentage3_items = data['BonusPercentage3']
        ConquestGroupBonusExcel.StartBonusPercentage3Vector(builder, len(BonusPercentage3_items))
        for item in reversed(BonusPercentage3_items):
            builder.PrependInt64(convert_long(item, password))
        BonusPercentage3_vec = builder.EndVector(len(BonusPercentage3_items))
    ConquestBonusId_val = convert_long(data.get('ConquestBonusId', 0), password)
    RecommandLocalizeEtcId_val = convert_uint(data.get('RecommandLocalizeEtcId', 0), password)
    ConquestGroupBonusExcel.Start(builder)
    ConquestGroupBonusExcel.AddConquestBonusId(builder, ConquestBonusId_val)
    ConquestGroupBonusExcel.AddSchool(builder, School_vec)
    ConquestGroupBonusExcel.AddRecommandLocalizeEtcId(builder, RecommandLocalizeEtcId_val)
    ConquestGroupBonusExcel.AddBonusParcelType(builder, BonusParcelType_vec)
    ConquestGroupBonusExcel.AddBonusId(builder, BonusId_vec)
    ConquestGroupBonusExcel.AddBonusCharacterCount1(builder, BonusCharacterCount1_vec)
    ConquestGroupBonusExcel.AddBonusPercentage1(builder, BonusPercentage1_vec)
    ConquestGroupBonusExcel.AddBonusCharacterCount2(builder, BonusCharacterCount2_vec)
    ConquestGroupBonusExcel.AddBonusPercentage2(builder, BonusPercentage2_vec)
    ConquestGroupBonusExcel.AddBonusCharacterCount3(builder, BonusCharacterCount3_vec)
    ConquestGroupBonusExcel.AddBonusPercentage3(builder, BonusPercentage3_vec)
    return ConquestGroupBonusExcel.End(builder)

def pack_ConquestGroupBuffExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestGroupBuff") if encrypt else None
    SkillGroupId_off = builder.CreateString(encrypt_string(data.get('SkillGroupId', ''), password))
    School_vec = 0
    if 'School' in data:
        School_items = data['School']
        ConquestGroupBuffExcel.StartSchoolVector(builder, len(School_items))
        for item in reversed(School_items):
            builder.PrependInt32(convert_int(getattr(School, item), password))
        School_vec = builder.EndVector(len(School_items))
    ConquestBuffId_val = convert_long(data.get('ConquestBuffId', 0), password)
    RecommandLocalizeEtcId_val = convert_uint(data.get('RecommandLocalizeEtcId', 0), password)
    ConquestGroupBuffExcel.Start(builder)
    ConquestGroupBuffExcel.AddConquestBuffId(builder, ConquestBuffId_val)
    ConquestGroupBuffExcel.AddSchool(builder, School_vec)
    ConquestGroupBuffExcel.AddRecommandLocalizeEtcId(builder, RecommandLocalizeEtcId_val)
    ConquestGroupBuffExcel.AddSkillGroupId(builder, SkillGroupId_off)
    return ConquestGroupBuffExcel.End(builder)

def pack_ConquestMapExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestMap") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    ConquestMap_off = builder.CreateString(encrypt_string(data.get('ConquestMap', ''), password))
    MapGoalLocalize_off = builder.CreateString(encrypt_string(data.get('MapGoalLocalize', ''), password))
    StepGoalLocalize_off = builder.CreateString(encrypt_string(data.get('StepGoalLocalize', ''), password))
    StepNameLocalize_off = builder.CreateString(encrypt_string(data.get('StepNameLocalize', ''), password))
    ConquestMapBG_off = builder.CreateString(encrypt_string(data.get('ConquestMapBG', ''), password))
    StepOpenConditionType_vec = 0
    if 'StepOpenConditionType' in data:
        StepOpenConditionType_items = data['StepOpenConditionType']
        ConquestMapExcel.StartStepOpenConditionTypeVector(builder, len(StepOpenConditionType_items))
        for item in reversed(StepOpenConditionType_items):
            builder.PrependInt32(convert_int(getattr(ConquestConditionType, item), password))
        StepOpenConditionType_vec = builder.EndVector(len(StepOpenConditionType_items))
    StepOpenConditionParameter_vec = 0
    if 'StepOpenConditionParameter' in data:
        StepOpenConditionParameter_items = data['StepOpenConditionParameter']
        StepOpenConditionParameter_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in StepOpenConditionParameter_items]
        ConquestMapExcel.StartStepOpenConditionParameterVector(builder, len(StepOpenConditionParameter_str_offsets))
        for offset in reversed(StepOpenConditionParameter_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        StepOpenConditionParameter_vec = builder.EndVector(len(StepOpenConditionParameter_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    MapDifficulty_val = convert_int(getattr(StageDifficulty, data.get('MapDifficulty', 0)), password)
    StepIndex_val = convert_int(data.get('StepIndex', 0), password)
    StepEnterScenarioGroupId_val = convert_long(data.get('StepEnterScenarioGroupId', 0), password)
    CameraSettingId_val = convert_long(data.get('CameraSettingId', 0), password)
    ConquestMapExcel.Start(builder)
    ConquestMapExcel.AddEventContentId(builder, EventContentId_val)
    ConquestMapExcel.AddDevName(builder, DevName_off)
    ConquestMapExcel.AddMapDifficulty(builder, MapDifficulty_val)
    ConquestMapExcel.AddStepIndex(builder, StepIndex_val)
    ConquestMapExcel.AddConquestMap(builder, ConquestMap_off)
    ConquestMapExcel.AddStepEnterScenarioGroupId(builder, StepEnterScenarioGroupId_val)
    ConquestMapExcel.AddStepOpenConditionType(builder, StepOpenConditionType_vec)
    ConquestMapExcel.AddStepOpenConditionParameter(builder, StepOpenConditionParameter_vec)
    ConquestMapExcel.AddMapGoalLocalize(builder, MapGoalLocalize_off)
    ConquestMapExcel.AddStepGoalLocalize(builder, StepGoalLocalize_off)
    ConquestMapExcel.AddStepNameLocalize(builder, StepNameLocalize_off)
    ConquestMapExcel.AddConquestMapBG(builder, ConquestMapBG_off)
    ConquestMapExcel.AddCameraSettingId(builder, CameraSettingId_val)
    return ConquestMapExcel.End(builder)

def pack_ConquestObjectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestObject") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ConquestObjectType_val = convert_int(getattr(ConquestObjectType, data.get('ConquestObjectType', 0)), password)
    Key_val = convert_uint(data.get('Key', 0), password)
    ConquestRewardParcelType_val = convert_int(getattr(ParcelType, data.get('ConquestRewardParcelType', 0)), password)
    ConquestRewardID_val = convert_long(data.get('ConquestRewardID', 0), password)
    ConquestRewardAmount_val = convert_int(data.get('ConquestRewardAmount', 0), password)
    Disposable_val = data.get('Disposable', 0)
    StepIndex_val = convert_int(data.get('StepIndex', 0), password)
    StepObjectCount_val = convert_int(data.get('StepObjectCount', 0), password)
    ConquestObjectExcel.Start(builder)
    ConquestObjectExcel.AddId(builder, Id_val)
    ConquestObjectExcel.AddEventContentId(builder, EventContentId_val)
    ConquestObjectExcel.AddConquestObjectType(builder, ConquestObjectType_val)
    ConquestObjectExcel.AddKey(builder, Key_val)
    ConquestObjectExcel.AddName(builder, Name_off)
    ConquestObjectExcel.AddPrefabName(builder, PrefabName_off)
    ConquestObjectExcel.AddConquestRewardParcelType(builder, ConquestRewardParcelType_val)
    ConquestObjectExcel.AddConquestRewardID(builder, ConquestRewardID_val)
    ConquestObjectExcel.AddConquestRewardAmount(builder, ConquestRewardAmount_val)
    ConquestObjectExcel.AddDisposable(builder, Disposable_val)
    ConquestObjectExcel.AddStepIndex(builder, StepIndex_val)
    ConquestObjectExcel.AddStepObjectCount(builder, StepObjectCount_val)
    return ConquestObjectExcel.End(builder)

def pack_ConquestPlayGuideExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestPlayGuide") if encrypt else None
    GuideTitle_off = builder.CreateString(encrypt_string(data.get('GuideTitle', ''), password))
    GuideImagePath_off = builder.CreateString(encrypt_string(data.get('GuideImagePath', ''), password))
    GuideText_off = builder.CreateString(encrypt_string(data.get('GuideText', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    ConquestPlayGuideExcel.Start(builder)
    ConquestPlayGuideExcel.AddId(builder, Id_val)
    ConquestPlayGuideExcel.AddEventContentId(builder, EventContentId_val)
    ConquestPlayGuideExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ConquestPlayGuideExcel.AddGuideTitle(builder, GuideTitle_off)
    ConquestPlayGuideExcel.AddGuideImagePath(builder, GuideImagePath_off)
    ConquestPlayGuideExcel.AddGuideText(builder, GuideText_off)
    return ConquestPlayGuideExcel.End(builder)

def pack_ConquestProgressResourceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestProgressResource") if encrypt else None
    ProgressResource_off = builder.CreateString(encrypt_string(data.get('ProgressResource', ''), password))
    ProgressLocalizeCode_off = builder.CreateString(encrypt_string(data.get('ProgressLocalizeCode', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        ConquestProgressResourceExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Group_val = convert_int(getattr(ConquestProgressType, data.get('Group', 0)), password)
    ConquestProgressResourceExcel.Start(builder)
    ConquestProgressResourceExcel.AddId(builder, Id_val)
    ConquestProgressResourceExcel.AddEventContentId(builder, EventContentId_val)
    ConquestProgressResourceExcel.AddGroup(builder, Group_val)
    ConquestProgressResourceExcel.AddProgressResource(builder, ProgressResource_off)
    ConquestProgressResourceExcel.AddVoiceId(builder, VoiceId_vec)
    ConquestProgressResourceExcel.AddProgressLocalizeCode(builder, ProgressLocalizeCode_off)
    return ConquestProgressResourceExcel.End(builder)

def pack_ConquestRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    ConquestRewardExcel.Start(builder)
    ConquestRewardExcel.AddGroupId(builder, GroupId_val)
    ConquestRewardExcel.AddRewardTag(builder, RewardTag_val)
    ConquestRewardExcel.AddRewardProb(builder, RewardProb_val)
    ConquestRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    ConquestRewardExcel.AddRewardId(builder, RewardId_val)
    ConquestRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    ConquestRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return ConquestRewardExcel.End(builder)

def pack_ConquestTileExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestTile") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    TileNameLocalize_off = builder.CreateString(encrypt_string(data.get('TileNameLocalize', ''), password))
    TileImageName_off = builder.CreateString(encrypt_string(data.get('TileImageName', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventId_val = convert_long(data.get('EventId', 0), password)
    Step_val = convert_int(data.get('Step', 0), password)
    Playable_val = data.get('Playable', 0)
    TileType_val = convert_int(getattr(ConquestTileType, data.get('TileType', 0)), password)
    NotMapFog_val = data.get('NotMapFog', 0)
    GroupBonusId_val = convert_long(data.get('GroupBonusId', 0), password)
    ConquestCostType_val = convert_int(getattr(ParcelType, data.get('ConquestCostType', 0)), password)
    ConquestCostId_val = convert_long(data.get('ConquestCostId', 0), password)
    ConquestCostAmount_val = convert_int(data.get('ConquestCostAmount', 0), password)
    ManageCostType_val = convert_int(getattr(ParcelType, data.get('ManageCostType', 0)), password)
    ManageCostId_val = convert_long(data.get('ManageCostId', 0), password)
    ManageCostAmount_val = convert_int(data.get('ManageCostAmount', 0), password)
    ConquestRewardId_val = convert_long(data.get('ConquestRewardId', 0), password)
    MassErosionId_val = convert_long(data.get('MassErosionId', 0), password)
    Upgrade2CostType_val = convert_int(getattr(ParcelType, data.get('Upgrade2CostType', 0)), password)
    Upgrade2CostId_val = convert_long(data.get('Upgrade2CostId', 0), password)
    Upgrade2CostAmount_val = convert_int(data.get('Upgrade2CostAmount', 0), password)
    Upgrade3CostType_val = convert_int(getattr(ParcelType, data.get('Upgrade3CostType', 0)), password)
    Upgrade3CostId_val = convert_long(data.get('Upgrade3CostId', 0), password)
    Upgrade3CostAmount_val = convert_int(data.get('Upgrade3CostAmount', 0), password)
    ConquestTileExcel.Start(builder)
    ConquestTileExcel.AddId(builder, Id_val)
    ConquestTileExcel.AddName(builder, Name_off)
    ConquestTileExcel.AddEventId(builder, EventId_val)
    ConquestTileExcel.AddStep(builder, Step_val)
    ConquestTileExcel.AddPrefabName(builder, PrefabName_off)
    ConquestTileExcel.AddTileNameLocalize(builder, TileNameLocalize_off)
    ConquestTileExcel.AddTileImageName(builder, TileImageName_off)
    ConquestTileExcel.AddPlayable(builder, Playable_val)
    ConquestTileExcel.AddTileType(builder, TileType_val)
    ConquestTileExcel.AddNotMapFog(builder, NotMapFog_val)
    ConquestTileExcel.AddGroupBonusId(builder, GroupBonusId_val)
    ConquestTileExcel.AddConquestCostType(builder, ConquestCostType_val)
    ConquestTileExcel.AddConquestCostId(builder, ConquestCostId_val)
    ConquestTileExcel.AddConquestCostAmount(builder, ConquestCostAmount_val)
    ConquestTileExcel.AddManageCostType(builder, ManageCostType_val)
    ConquestTileExcel.AddManageCostId(builder, ManageCostId_val)
    ConquestTileExcel.AddManageCostAmount(builder, ManageCostAmount_val)
    ConquestTileExcel.AddConquestRewardId(builder, ConquestRewardId_val)
    ConquestTileExcel.AddMassErosionId(builder, MassErosionId_val)
    ConquestTileExcel.AddUpgrade2CostType(builder, Upgrade2CostType_val)
    ConquestTileExcel.AddUpgrade2CostId(builder, Upgrade2CostId_val)
    ConquestTileExcel.AddUpgrade2CostAmount(builder, Upgrade2CostAmount_val)
    ConquestTileExcel.AddUpgrade3CostType(builder, Upgrade3CostType_val)
    ConquestTileExcel.AddUpgrade3CostId(builder, Upgrade3CostId_val)
    ConquestTileExcel.AddUpgrade3CostAmount(builder, Upgrade3CostAmount_val)
    return ConquestTileExcel.End(builder)

def pack_ConquestUnexpectedEventExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestUnexpectedEvent") if encrypt else None
    UnexpectedEventPrefab_vec = 0
    if 'UnexpectedEventPrefab' in data:
        UnexpectedEventPrefab_items = data['UnexpectedEventPrefab']
        UnexpectedEventPrefab_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in UnexpectedEventPrefab_items]
        ConquestUnexpectedEventExcel.StartUnexpectedEventPrefabVector(builder, len(UnexpectedEventPrefab_str_offsets))
        for offset in reversed(UnexpectedEventPrefab_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        UnexpectedEventPrefab_vec = builder.EndVector(len(UnexpectedEventPrefab_items))
    UnexpectedEventUnitId_vec = 0
    if 'UnexpectedEventUnitId' in data:
        UnexpectedEventUnitId_items = data['UnexpectedEventUnitId']
        ConquestUnexpectedEventExcel.StartUnexpectedEventUnitIdVector(builder, len(UnexpectedEventUnitId_items))
        for item in reversed(UnexpectedEventUnitId_items):
            builder.PrependInt64(convert_long(item, password))
        UnexpectedEventUnitId_vec = builder.EndVector(len(UnexpectedEventUnitId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UnexpectedEventConditionType_val = convert_int(getattr(ParcelType, data.get('UnexpectedEventConditionType', 0)), password)
    UnexpectedEventConditionUniqueId_val = convert_long(data.get('UnexpectedEventConditionUniqueId', 0), password)
    UnexpectedEventConditionAmount_val = convert_long(data.get('UnexpectedEventConditionAmount', 0), password)
    UnexpectedEventOccurDailyLimitCount_val = convert_int(data.get('UnexpectedEventOccurDailyLimitCount', 0), password)
    UnitCountPerStep_val = convert_int(data.get('UnitCountPerStep', 0), password)
    ConquestUnexpectedEventExcel.Start(builder)
    ConquestUnexpectedEventExcel.AddEventContentId(builder, EventContentId_val)
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionType(builder, UnexpectedEventConditionType_val)
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionUniqueId(builder, UnexpectedEventConditionUniqueId_val)
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionAmount(builder, UnexpectedEventConditionAmount_val)
    ConquestUnexpectedEventExcel.AddUnexpectedEventOccurDailyLimitCount(builder, UnexpectedEventOccurDailyLimitCount_val)
    ConquestUnexpectedEventExcel.AddUnitCountPerStep(builder, UnitCountPerStep_val)
    ConquestUnexpectedEventExcel.AddUnexpectedEventPrefab(builder, UnexpectedEventPrefab_vec)
    ConquestUnexpectedEventExcel.AddUnexpectedEventUnitId(builder, UnexpectedEventUnitId_vec)
    return ConquestUnexpectedEventExcel.End(builder)

def pack_ConquestUnitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ConquestUnit") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    StrategyPrefabName_off = builder.CreateString(encrypt_string(data.get('StrategyPrefabName', ''), password))
    UnitFxPrefabName_off = builder.CreateString(encrypt_string(data.get('UnitFxPrefabName', ''), password))
    PointAnimation_off = builder.CreateString(encrypt_string(data.get('PointAnimation', ''), password))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        ConquestUnitExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        ConquestUnitExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Key_val = convert_uint(data.get('Key', 0), password)
    Scale_val = encrypt_float(data.get('Scale', 0), password)
    ShieldEffectScale_val = encrypt_float(data.get('ShieldEffectScale', 0), password)
    EnemyType_val = convert_int(getattr(ConquestEnemyType, data.get('EnemyType', 0)), password)
    Team_val = convert_int(getattr(ConquestTeamType, data.get('Team', 0)), password)
    UnitGroup_val = convert_long(data.get('UnitGroup', 0), password)
    PrevUnitGroup_val = convert_long(data.get('PrevUnitGroup', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    GroupBuffId_val = convert_long(data.get('GroupBuffId', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    ManageEchelonStageEnterCostType_val = convert_int(getattr(ParcelType, data.get('ManageEchelonStageEnterCostType', 0)), password)
    ManageEchelonStageEnterCostId_val = convert_long(data.get('ManageEchelonStageEnterCostId', 0), password)
    ManageEchelonStageEnterCostAmount_val = convert_int(data.get('ManageEchelonStageEnterCostAmount', 0), password)
    EnterScenarioGroupId_val = convert_long(data.get('EnterScenarioGroupId', 0), password)
    ClearScenarioGroupId_val = convert_long(data.get('ClearScenarioGroupId', 0), password)
    ConquestRewardId_val = convert_long(data.get('ConquestRewardId', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    TacticRewardExp_val = convert_long(data.get('TacticRewardExp', 0), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    ConquestUnitExcel.Start(builder)
    ConquestUnitExcel.AddId(builder, Id_val)
    ConquestUnitExcel.AddKey(builder, Key_val)
    ConquestUnitExcel.AddName(builder, Name_off)
    ConquestUnitExcel.AddPrefabName(builder, PrefabName_off)
    ConquestUnitExcel.AddStrategyPrefabName(builder, StrategyPrefabName_off)
    ConquestUnitExcel.AddScale(builder, Scale_val)
    ConquestUnitExcel.AddShieldEffectScale(builder, ShieldEffectScale_val)
    ConquestUnitExcel.AddUnitFxPrefabName(builder, UnitFxPrefabName_off)
    ConquestUnitExcel.AddPointAnimation(builder, PointAnimation_off)
    ConquestUnitExcel.AddEnemyType(builder, EnemyType_val)
    ConquestUnitExcel.AddTeam(builder, Team_val)
    ConquestUnitExcel.AddUnitGroup(builder, UnitGroup_val)
    ConquestUnitExcel.AddPrevUnitGroup(builder, PrevUnitGroup_val)
    ConquestUnitExcel.AddBattleDuration(builder, BattleDuration_val)
    ConquestUnitExcel.AddGroundId(builder, GroundId_val)
    ConquestUnitExcel.AddStarGoal(builder, StarGoal_vec)
    ConquestUnitExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    ConquestUnitExcel.AddGroupBuffId(builder, GroupBuffId_val)
    ConquestUnitExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    ConquestUnitExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    ConquestUnitExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    ConquestUnitExcel.AddManageEchelonStageEnterCostType(builder, ManageEchelonStageEnterCostType_val)
    ConquestUnitExcel.AddManageEchelonStageEnterCostId(builder, ManageEchelonStageEnterCostId_val)
    ConquestUnitExcel.AddManageEchelonStageEnterCostAmount(builder, ManageEchelonStageEnterCostAmount_val)
    ConquestUnitExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_val)
    ConquestUnitExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_val)
    ConquestUnitExcel.AddConquestRewardId(builder, ConquestRewardId_val)
    ConquestUnitExcel.AddStageTopography(builder, StageTopography_val)
    ConquestUnitExcel.AddRecommandLevel(builder, RecommandLevel_val)
    ConquestUnitExcel.AddTacticRewardExp(builder, TacticRewardExp_val)
    ConquestUnitExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    ConquestUnitExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return ConquestUnitExcel.End(builder)

def pack_ContentEnterCostReduceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ContentEnterCostReduce") if encrypt else None
    EnterCostReduceGroupId_val = convert_long(data.get('EnterCostReduceGroupId', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    StageId_val = convert_long(data.get('StageId', 0), password)
    ReduceEnterCostType_val = convert_int(getattr(ParcelType, data.get('ReduceEnterCostType', 0)), password)
    ReduceEnterCostId_val = convert_long(data.get('ReduceEnterCostId', 0), password)
    ReduceAmount_val = convert_long(data.get('ReduceAmount', 0), password)
    ContentEnterCostReduceExcel.Start(builder)
    ContentEnterCostReduceExcel.AddEnterCostReduceGroupId(builder, EnterCostReduceGroupId_val)
    ContentEnterCostReduceExcel.AddContentType(builder, ContentType_val)
    ContentEnterCostReduceExcel.AddStageId(builder, StageId_val)
    ContentEnterCostReduceExcel.AddReduceEnterCostType(builder, ReduceEnterCostType_val)
    ContentEnterCostReduceExcel.AddReduceEnterCostId(builder, ReduceEnterCostId_val)
    ContentEnterCostReduceExcel.AddReduceAmount(builder, ReduceAmount_val)
    return ContentEnterCostReduceExcel.End(builder)

def pack_ContentsFeverExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ContentsFever") if encrypt else None
    ConditionContent_val = convert_int(getattr(FeverBattleType, data.get('ConditionContent', 0)), password)
    SkillFeverCheckCondition_val = convert_int(getattr(SkillPriorityCheckTarget, data.get('SkillFeverCheckCondition', 0)), password)
    SkillCostFever_val = convert_long(data.get('SkillCostFever', 0), password)
    FeverStartTime_val = convert_long(data.get('FeverStartTime', 0), password)
    FeverDurationTime_val = convert_long(data.get('FeverDurationTime', 0), password)
    ContentsFeverExcel.Start(builder)
    ContentsFeverExcel.AddConditionContent(builder, ConditionContent_val)
    ContentsFeverExcel.AddSkillFeverCheckCondition(builder, SkillFeverCheckCondition_val)
    ContentsFeverExcel.AddSkillCostFever(builder, SkillCostFever_val)
    ContentsFeverExcel.AddFeverStartTime(builder, FeverStartTime_val)
    ContentsFeverExcel.AddFeverDurationTime(builder, FeverDurationTime_val)
    return ContentsFeverExcel.End(builder)

def pack_ContentSpoilerPopupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ContentSpoilerPopup") if encrypt else None
    SpoilerPopupTitle_off = builder.CreateString(encrypt_string(data.get('SpoilerPopupTitle', ''), password))
    SpoilerPopupDescription_off = builder.CreateString(encrypt_string(data.get('SpoilerPopupDescription', ''), password))
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    IsWarningPopUp_val = data.get('IsWarningPopUp', 0)
    ConditionScenarioModeId_val = convert_long(data.get('ConditionScenarioModeId', 0), password)
    ContentSpoilerPopupExcel.Start(builder)
    ContentSpoilerPopupExcel.AddContentType(builder, ContentType_val)
    ContentSpoilerPopupExcel.AddSpoilerPopupTitle(builder, SpoilerPopupTitle_off)
    ContentSpoilerPopupExcel.AddSpoilerPopupDescription(builder, SpoilerPopupDescription_off)
    ContentSpoilerPopupExcel.AddIsWarningPopUp(builder, IsWarningPopUp_val)
    ContentSpoilerPopupExcel.AddConditionScenarioModeId(builder, ConditionScenarioModeId_val)
    return ContentSpoilerPopupExcel.End(builder)

def pack_ContentsScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ContentsScenario") if encrypt else None
    ScenarioGroupId_vec = 0
    if 'ScenarioGroupId' in data:
        ScenarioGroupId_items = data['ScenarioGroupId']
        ContentsScenarioExcel.StartScenarioGroupIdVector(builder, len(ScenarioGroupId_items))
        for item in reversed(ScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ScenarioGroupId_vec = builder.EndVector(len(ScenarioGroupId_items))
    Id_val = convert_uint(data.get('Id', 0), password)
    LocalizeId_val = convert_uint(data.get('LocalizeId', 0), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    ScenarioContentType_val = convert_int(getattr(ScenarioContentType, data.get('ScenarioContentType', 0)), password)
    ContentsScenarioExcel.Start(builder)
    ContentsScenarioExcel.AddId(builder, Id_val)
    ContentsScenarioExcel.AddLocalizeId(builder, LocalizeId_val)
    ContentsScenarioExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ContentsScenarioExcel.AddScenarioContentType(builder, ScenarioContentType_val)
    ContentsScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId_vec)
    return ContentsScenarioExcel.End(builder)

def pack_ContentsShortcutExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ContentsShortcut") if encrypt else None
    ShortcutOpenTime_off = builder.CreateString(encrypt_string(data.get('ShortcutOpenTime', ''), password))
    ShortcutCloseTime_off = builder.CreateString(encrypt_string(data.get('ShortcutCloseTime', ''), password))
    Localize_off = builder.CreateString(encrypt_string(data.get('Localize', ''), password))
    ShortcutUIName_vec = 0
    if 'ShortcutUIName' in data:
        ShortcutUIName_items = data['ShortcutUIName']
        ShortcutUIName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUIName_items]
        ContentsShortcutExcel.StartShortcutUINameVector(builder, len(ShortcutUIName_str_offsets))
        for offset in reversed(ShortcutUIName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUIName_vec = builder.EndVector(len(ShortcutUIName_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ScenarioModeVolume_val = convert_long(data.get('ScenarioModeVolume', 0), password)
    ScenarioModeChapter_val = convert_long(data.get('ScenarioModeChapter', 0), password)
    ConditionContentId_val = convert_long(data.get('ConditionContentId', 0), password)
    ConquestMapDifficulty_val = convert_int(getattr(StageDifficulty, data.get('ConquestMapDifficulty', 0)), password)
    ConquestStepIndex_val = convert_int(data.get('ConquestStepIndex', 0), password)
    ShortcutContentId_val = convert_long(data.get('ShortcutContentId', 0), password)
    ContentsShortcutExcel.Start(builder)
    ContentsShortcutExcel.AddUniqueId(builder, UniqueId_val)
    ContentsShortcutExcel.AddContentType(builder, ContentType_val)
    ContentsShortcutExcel.AddEventContentId(builder, EventContentId_val)
    ContentsShortcutExcel.AddScenarioModeVolume(builder, ScenarioModeVolume_val)
    ContentsShortcutExcel.AddScenarioModeChapter(builder, ScenarioModeChapter_val)
    ContentsShortcutExcel.AddShortcutOpenTime(builder, ShortcutOpenTime_off)
    ContentsShortcutExcel.AddShortcutCloseTime(builder, ShortcutCloseTime_off)
    ContentsShortcutExcel.AddConditionContentId(builder, ConditionContentId_val)
    ContentsShortcutExcel.AddConquestMapDifficulty(builder, ConquestMapDifficulty_val)
    ContentsShortcutExcel.AddConquestStepIndex(builder, ConquestStepIndex_val)
    ContentsShortcutExcel.AddShortcutContentId(builder, ShortcutContentId_val)
    ContentsShortcutExcel.AddShortcutUIName(builder, ShortcutUIName_vec)
    ContentsShortcutExcel.AddLocalize(builder, Localize_off)
    return ContentsShortcutExcel.End(builder)

def pack_CostumeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Costume") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    ReleaseDate_off = builder.CreateString(encrypt_string(data.get('ReleaseDate', ''), password))
    CollectionVisibleStartDate_off = builder.CreateString(encrypt_string(data.get('CollectionVisibleStartDate', ''), password))
    CollectionVisibleEndDate_off = builder.CreateString(encrypt_string(data.get('CollectionVisibleEndDate', ''), password))
    SpineResourceName_off = builder.CreateString(encrypt_string(data.get('SpineResourceName', ''), password))
    SpineResourceNameDiorama_off = builder.CreateString(encrypt_string(data.get('SpineResourceNameDiorama', ''), password))
    ModelPrefabName_off = builder.CreateString(encrypt_string(data.get('ModelPrefabName', ''), password))
    AnimatorName_off = builder.CreateString(encrypt_string(data.get('AnimatorName', ''), password))
    CafeModelPrefabName_off = builder.CreateString(encrypt_string(data.get('CafeModelPrefabName', ''), password))
    EchelonModelPrefabName_off = builder.CreateString(encrypt_string(data.get('EchelonModelPrefabName', ''), password))
    StrategyModelPrefabName_off = builder.CreateString(encrypt_string(data.get('StrategyModelPrefabName', ''), password))
    TextureDir_off = builder.CreateString(encrypt_string(data.get('TextureDir', ''), password))
    CollectionTexturePath_off = builder.CreateString(encrypt_string(data.get('CollectionTexturePath', ''), password))
    CollectionBGTexturePath_off = builder.CreateString(encrypt_string(data.get('CollectionBGTexturePath', ''), password))
    CombatStyleTexturePath_off = builder.CreateString(encrypt_string(data.get('CombatStyleTexturePath', ''), password))
    TextureBoss_off = builder.CreateString(encrypt_string(data.get('TextureBoss', ''), password))
    InformationPacel_off = builder.CreateString(encrypt_string(data.get('InformationPacel', ''), password))
    AnimationSSR_off = builder.CreateString(encrypt_string(data.get('AnimationSSR', ''), password))
    EnterStrategyAnimationName_off = builder.CreateString(encrypt_string(data.get('EnterStrategyAnimationName', ''), password))
    SpineResourceNameDioramaForFormConversion_vec = 0
    if 'SpineResourceNameDioramaForFormConversion' in data:
        SpineResourceNameDioramaForFormConversion_items = data['SpineResourceNameDioramaForFormConversion']
        SpineResourceNameDioramaForFormConversion_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in SpineResourceNameDioramaForFormConversion_items]
        CostumeExcel.StartSpineResourceNameDioramaForFormConversionVector(builder, len(SpineResourceNameDioramaForFormConversion_str_offsets))
        for offset in reversed(SpineResourceNameDioramaForFormConversion_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        SpineResourceNameDioramaForFormConversion_vec = builder.EndVector(len(SpineResourceNameDioramaForFormConversion_items))
    TextureSkillCard_vec = 0
    if 'TextureSkillCard' in data:
        TextureSkillCard_items = data['TextureSkillCard']
        TextureSkillCard_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in TextureSkillCard_items]
        CostumeExcel.StartTextureSkillCardVector(builder, len(TextureSkillCard_str_offsets))
        for offset in reversed(TextureSkillCard_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        TextureSkillCard_vec = builder.EndVector(len(TextureSkillCard_items))
    CostumeGroupId_val = convert_long(data.get('CostumeGroupId', 0), password)
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    IsDefault_val = data.get('IsDefault', 0)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    CharacterSkillListGroupId_val = convert_long(data.get('CharacterSkillListGroupId', 0), password)
    EntityMaterialType_val = convert_int(getattr(EntityMaterialType, data.get('EntityMaterialType', 0)), password)
    UseObjectHPBAR_val = data.get('UseObjectHPBAR', 0)
    AnimationValidator_val = data.get('AnimationValidator', 0)
    CharacterVoiceGroupId_val = convert_long(data.get('CharacterVoiceGroupId', 0), password)
    ShowObjectHpStatus_val = data.get('ShowObjectHpStatus', 0)
    CostumeExcel.Start(builder)
    CostumeExcel.AddCostumeGroupId(builder, CostumeGroupId_val)
    CostumeExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    CostumeExcel.AddDevName(builder, DevName_off)
    CostumeExcel.AddProductionStep(builder, ProductionStep_val)
    CostumeExcel.AddIsDefault(builder, IsDefault_val)
    CostumeExcel.AddCollectionVisible(builder, CollectionVisible_val)
    CostumeExcel.AddReleaseDate(builder, ReleaseDate_off)
    CostumeExcel.AddCollectionVisibleStartDate(builder, CollectionVisibleStartDate_off)
    CostumeExcel.AddCollectionVisibleEndDate(builder, CollectionVisibleEndDate_off)
    CostumeExcel.AddRarity(builder, Rarity_val)
    CostumeExcel.AddCharacterSkillListGroupId(builder, CharacterSkillListGroupId_val)
    CostumeExcel.AddSpineResourceName(builder, SpineResourceName_off)
    CostumeExcel.AddSpineResourceNameDiorama(builder, SpineResourceNameDiorama_off)
    CostumeExcel.AddSpineResourceNameDioramaForFormConversion(builder, SpineResourceNameDioramaForFormConversion_vec)
    CostumeExcel.AddEntityMaterialType(builder, EntityMaterialType_val)
    CostumeExcel.AddModelPrefabName(builder, ModelPrefabName_off)
    CostumeExcel.AddAnimatorName(builder, AnimatorName_off)
    CostumeExcel.AddCafeModelPrefabName(builder, CafeModelPrefabName_off)
    CostumeExcel.AddEchelonModelPrefabName(builder, EchelonModelPrefabName_off)
    CostumeExcel.AddStrategyModelPrefabName(builder, StrategyModelPrefabName_off)
    CostumeExcel.AddTextureDir(builder, TextureDir_off)
    CostumeExcel.AddCollectionTexturePath(builder, CollectionTexturePath_off)
    CostumeExcel.AddCollectionBGTexturePath(builder, CollectionBGTexturePath_off)
    CostumeExcel.AddCombatStyleTexturePath(builder, CombatStyleTexturePath_off)
    CostumeExcel.AddUseObjectHPBAR(builder, UseObjectHPBAR_val)
    CostumeExcel.AddTextureBoss(builder, TextureBoss_off)
    CostumeExcel.AddTextureSkillCard(builder, TextureSkillCard_vec)
    CostumeExcel.AddInformationPacel(builder, InformationPacel_off)
    CostumeExcel.AddAnimationSSR(builder, AnimationSSR_off)
    CostumeExcel.AddEnterStrategyAnimationName(builder, EnterStrategyAnimationName_off)
    CostumeExcel.AddAnimationValidator(builder, AnimationValidator_val)
    CostumeExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId_val)
    CostumeExcel.AddShowObjectHpStatus(builder, ShowObjectHpStatus_val)
    return CostumeExcel.End(builder)

def pack_CurrencyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Currency") if encrypt else None
    CurrencyName_off = builder.CreateString(encrypt_string(data.get('CurrencyName', ''), password))
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    SpriteName_off = builder.CreateString(encrypt_string(data.get('SpriteName', ''), password))
    ExpirationDateTime_off = builder.CreateString(encrypt_string(data.get('ExpirationDateTime', ''), password))
    DailyRefillTime_vec = 0
    if 'DailyRefillTime' in data:
        DailyRefillTime_items = data['DailyRefillTime']
        CurrencyExcel.StartDailyRefillTimeVector(builder, len(DailyRefillTime_items))
        for item in reversed(DailyRefillTime_items):
            builder.PrependInt64(convert_long(item, password))
        DailyRefillTime_vec = builder.EndVector(len(DailyRefillTime_items))
    ID_val = convert_long(data.get('ID', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    CurrencyType_val = convert_int(getattr(CurrencyTypes, data.get('CurrencyType', 0)), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    AutoChargeMsc_val = convert_int(data.get('AutoChargeMsc', 0), password)
    AutoChargeAmount_val = convert_int(data.get('AutoChargeAmount', 0), password)
    CurrencyOverChargeType_val = convert_int(getattr(CurrencyOverChargeType, data.get('CurrencyOverChargeType', 0)), password)
    CurrencyAdditionalChargeType_val = convert_int(getattr(CurrencyAdditionalChargeType, data.get('CurrencyAdditionalChargeType', 0)), password)
    ChargeLimit_val = convert_long(data.get('ChargeLimit', 0), password)
    OverChargeLimit_val = convert_long(data.get('OverChargeLimit', 0), password)
    DailyRefillType_val = convert_int(getattr(DailyRefillType, data.get('DailyRefillType', 0)), password)
    DailyRefillAmount_val = convert_long(data.get('DailyRefillAmount', 0), password)
    ExpirationNotifyDateIn_val = convert_int(data.get('ExpirationNotifyDateIn', 0), password)
    ExpiryChangeParcelType_val = convert_int(getattr(ParcelType, data.get('ExpiryChangeParcelType', 0)), password)
    ExpiryChangeId_val = convert_long(data.get('ExpiryChangeId', 0), password)
    ExpiryChangeAmount_val = convert_long(data.get('ExpiryChangeAmount', 0), password)
    ResetType_val = convert_int(getattr(PeriodType, data.get('ResetType', 0)), password)
    ResetAmount_val = convert_long(data.get('ResetAmount', 0), password)
    CurrencyExcel.Start(builder)
    CurrencyExcel.AddID(builder, ID_val)
    CurrencyExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    CurrencyExcel.AddCurrencyType(builder, CurrencyType_val)
    CurrencyExcel.AddCurrencyName(builder, CurrencyName_off)
    CurrencyExcel.AddIcon(builder, Icon_off)
    CurrencyExcel.AddRarity(builder, Rarity_val)
    CurrencyExcel.AddAutoChargeMsc(builder, AutoChargeMsc_val)
    CurrencyExcel.AddAutoChargeAmount(builder, AutoChargeAmount_val)
    CurrencyExcel.AddCurrencyOverChargeType(builder, CurrencyOverChargeType_val)
    CurrencyExcel.AddCurrencyAdditionalChargeType(builder, CurrencyAdditionalChargeType_val)
    CurrencyExcel.AddChargeLimit(builder, ChargeLimit_val)
    CurrencyExcel.AddOverChargeLimit(builder, OverChargeLimit_val)
    CurrencyExcel.AddSpriteName(builder, SpriteName_off)
    CurrencyExcel.AddDailyRefillType(builder, DailyRefillType_val)
    CurrencyExcel.AddDailyRefillAmount(builder, DailyRefillAmount_val)
    CurrencyExcel.AddDailyRefillTime(builder, DailyRefillTime_vec)
    CurrencyExcel.AddExpirationDateTime(builder, ExpirationDateTime_off)
    CurrencyExcel.AddExpirationNotifyDateIn(builder, ExpirationNotifyDateIn_val)
    CurrencyExcel.AddExpiryChangeParcelType(builder, ExpiryChangeParcelType_val)
    CurrencyExcel.AddExpiryChangeId(builder, ExpiryChangeId_val)
    CurrencyExcel.AddExpiryChangeAmount(builder, ExpiryChangeAmount_val)
    CurrencyExcel.AddResetType(builder, ResetType_val)
    CurrencyExcel.AddResetAmount(builder, ResetAmount_val)
    return CurrencyExcel.End(builder)

def pack_DuplicateBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("DuplicateBonus") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    ItemCategory_val = convert_int(getattr(ItemCategory, data.get('ItemCategory', 0)), password)
    ItemId_val = convert_long(data.get('ItemId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    DuplicateBonusExcel.Start(builder)
    DuplicateBonusExcel.AddId(builder, Id_val)
    DuplicateBonusExcel.AddItemCategory(builder, ItemCategory_val)
    DuplicateBonusExcel.AddItemId(builder, ItemId_val)
    DuplicateBonusExcel.AddCharacterId(builder, CharacterId_val)
    DuplicateBonusExcel.AddRewardParcelType(builder, RewardParcelType_val)
    DuplicateBonusExcel.AddRewardParcelId(builder, RewardParcelId_val)
    DuplicateBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return DuplicateBonusExcel.End(builder)

def pack_EchelonConstraintExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EchelonConstraint") if encrypt else None
    CharacterId_vec = 0
    if 'CharacterId' in data:
        CharacterId_items = data['CharacterId']
        EchelonConstraintExcel.StartCharacterIdVector(builder, len(CharacterId_items))
        for item in reversed(CharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        CharacterId_vec = builder.EndVector(len(CharacterId_items))
    PersonalityId_vec = 0
    if 'PersonalityId' in data:
        PersonalityId_items = data['PersonalityId']
        EchelonConstraintExcel.StartPersonalityIdVector(builder, len(PersonalityId_items))
        for item in reversed(PersonalityId_items):
            builder.PrependInt64(convert_long(item, password))
        PersonalityId_vec = builder.EndVector(len(PersonalityId_items))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    IsWhiteList_val = data.get('IsWhiteList', 0)
    WeaponType_val = convert_int(getattr(WeaponType, data.get('WeaponType', 0)), password)
    School_val = convert_int(getattr(School, data.get('School', 0)), password)
    Club_val = convert_int(getattr(Club, data.get('Club', 0)), password)
    Role_val = convert_int(getattr(TacticRole, data.get('Role', 0)), password)
    EchelonConstraintExcel.Start(builder)
    EchelonConstraintExcel.AddGroupId(builder, GroupId_val)
    EchelonConstraintExcel.AddIsWhiteList(builder, IsWhiteList_val)
    EchelonConstraintExcel.AddCharacterId(builder, CharacterId_vec)
    EchelonConstraintExcel.AddPersonalityId(builder, PersonalityId_vec)
    EchelonConstraintExcel.AddWeaponType(builder, WeaponType_val)
    EchelonConstraintExcel.AddSchool(builder, School_val)
    EchelonConstraintExcel.AddClub(builder, Club_val)
    EchelonConstraintExcel.AddRole(builder, Role_val)
    return EchelonConstraintExcel.End(builder)

def pack_EliminateRaidRankingRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidRankingReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EliminateRaidRankingRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelUniqueId_vec = 0
    if 'RewardParcelUniqueId' in data:
        RewardParcelUniqueId_items = data['RewardParcelUniqueId']
        EliminateRaidRankingRewardExcel.StartRewardParcelUniqueIdVector(builder, len(RewardParcelUniqueId_items))
        for item in reversed(RewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelUniqueId_vec = builder.EndVector(len(RewardParcelUniqueId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EliminateRaidRankingRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    RankingRewardGroupId_val = convert_long(data.get('RankingRewardGroupId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    RankStart_val = convert_long(data.get('RankStart', 0), password)
    RankEnd_val = convert_long(data.get('RankEnd', 0), password)
    PercentRankStart_val = convert_long(data.get('PercentRankStart', 0), password)
    PercentRankEnd_val = convert_long(data.get('PercentRankEnd', 0), password)
    Tier_val = convert_int(data.get('Tier', 0), password)
    EliminateRaidRankingRewardExcel.Start(builder)
    EliminateRaidRankingRewardExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId_val)
    EliminateRaidRankingRewardExcel.AddId(builder, Id_val)
    EliminateRaidRankingRewardExcel.AddRankStart(builder, RankStart_val)
    EliminateRaidRankingRewardExcel.AddRankEnd(builder, RankEnd_val)
    EliminateRaidRankingRewardExcel.AddPercentRankStart(builder, PercentRankStart_val)
    EliminateRaidRankingRewardExcel.AddPercentRankEnd(builder, PercentRankEnd_val)
    EliminateRaidRankingRewardExcel.AddTier(builder, Tier_val)
    EliminateRaidRankingRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EliminateRaidRankingRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId_vec)
    EliminateRaidRankingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EliminateRaidRankingRewardExcel.End(builder)

def pack_EliminateRaidSeasonManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidSeasonManage") if encrypt else None
    SeasonStartData_off = builder.CreateString(encrypt_string(data.get('SeasonStartData', ''), password))
    EndNoteLabelStartDate_off = builder.CreateString(encrypt_string(data.get('EndNoteLabelStartDate', ''), password))
    SeasonEndData_off = builder.CreateString(encrypt_string(data.get('SeasonEndData', ''), password))
    SettlementEndDate_off = builder.CreateString(encrypt_string(data.get('SettlementEndDate', ''), password))
    LobbyTableBGPath_off = builder.CreateString(encrypt_string(data.get('LobbyTableBGPath', ''), password))
    LobbyScreenBGPath_off = builder.CreateString(encrypt_string(data.get('LobbyScreenBGPath', ''), password))
    OpenRaidBossGroup01_off = builder.CreateString(encrypt_string(data.get('OpenRaidBossGroup01', ''), password))
    OpenRaidBossGroup02_off = builder.CreateString(encrypt_string(data.get('OpenRaidBossGroup02', ''), password))
    OpenRaidBossGroup03_off = builder.CreateString(encrypt_string(data.get('OpenRaidBossGroup03', ''), password))
    StackedSeasonRewardGauge_vec = 0
    if 'StackedSeasonRewardGauge' in data:
        StackedSeasonRewardGauge_items = data['StackedSeasonRewardGauge']
        EliminateRaidSeasonManageExcel.StartStackedSeasonRewardGaugeVector(builder, len(StackedSeasonRewardGauge_items))
        for item in reversed(StackedSeasonRewardGauge_items):
            builder.PrependInt64(convert_long(item, password))
        StackedSeasonRewardGauge_vec = builder.EndVector(len(StackedSeasonRewardGauge_items))
    SeasonRewardId_vec = 0
    if 'SeasonRewardId' in data:
        SeasonRewardId_items = data['SeasonRewardId']
        EliminateRaidSeasonManageExcel.StartSeasonRewardIdVector(builder, len(SeasonRewardId_items))
        for item in reversed(SeasonRewardId_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardId_vec = builder.EndVector(len(SeasonRewardId_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    SeasonDisplay_val = convert_long(data.get('SeasonDisplay', 0), password)
    RankingRewardGroupId_val = convert_long(data.get('RankingRewardGroupId', 0), password)
    MaxSeasonRewardGauage_val = convert_int(data.get('MaxSeasonRewardGauage', 0), password)
    LimitedRewardIdNormal_val = convert_long(data.get('LimitedRewardIdNormal', 0), password)
    LimitedRewardIdHard_val = convert_long(data.get('LimitedRewardIdHard', 0), password)
    LimitedRewardIdVeryhard_val = convert_long(data.get('LimitedRewardIdVeryhard', 0), password)
    LimitedRewardIdHardcore_val = convert_long(data.get('LimitedRewardIdHardcore', 0), password)
    LimitedRewardIdExtreme_val = convert_long(data.get('LimitedRewardIdExtreme', 0), password)
    LimitedRewardIdInsane_val = convert_long(data.get('LimitedRewardIdInsane', 0), password)
    LimitedRewardIdTorment_val = convert_long(data.get('LimitedRewardIdTorment', 0), password)
    EliminateRaidSeasonManageExcel.Start(builder)
    EliminateRaidSeasonManageExcel.AddSeasonId(builder, SeasonId_val)
    EliminateRaidSeasonManageExcel.AddSeasonDisplay(builder, SeasonDisplay_val)
    EliminateRaidSeasonManageExcel.AddSeasonStartData(builder, SeasonStartData_off)
    EliminateRaidSeasonManageExcel.AddEndNoteLabelStartDate(builder, EndNoteLabelStartDate_off)
    EliminateRaidSeasonManageExcel.AddSeasonEndData(builder, SeasonEndData_off)
    EliminateRaidSeasonManageExcel.AddSettlementEndDate(builder, SettlementEndDate_off)
    EliminateRaidSeasonManageExcel.AddLobbyTableBGPath(builder, LobbyTableBGPath_off)
    EliminateRaidSeasonManageExcel.AddLobbyScreenBGPath(builder, LobbyScreenBGPath_off)
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup01(builder, OpenRaidBossGroup01_off)
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup02(builder, OpenRaidBossGroup02_off)
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup03(builder, OpenRaidBossGroup03_off)
    EliminateRaidSeasonManageExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId_val)
    EliminateRaidSeasonManageExcel.AddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage_val)
    EliminateRaidSeasonManageExcel.AddStackedSeasonRewardGauge(builder, StackedSeasonRewardGauge_vec)
    EliminateRaidSeasonManageExcel.AddSeasonRewardId(builder, SeasonRewardId_vec)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdNormal(builder, LimitedRewardIdNormal_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdHard(builder, LimitedRewardIdHard_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdVeryhard(builder, LimitedRewardIdVeryhard_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdHardcore(builder, LimitedRewardIdHardcore_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdExtreme(builder, LimitedRewardIdExtreme_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdInsane(builder, LimitedRewardIdInsane_val)
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdTorment(builder, LimitedRewardIdTorment_val)
    return EliminateRaidSeasonManageExcel.End(builder)

def pack_EliminateRaidStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidStage") if encrypt else None
    RaidBossGroup_off = builder.CreateString(encrypt_string(data.get('RaidBossGroup', ''), password))
    BossSpinePath_off = builder.CreateString(encrypt_string(data.get('BossSpinePath', ''), password))
    PortraitPath_off = builder.CreateString(encrypt_string(data.get('PortraitPath', ''), password))
    BGPath_off = builder.CreateString(encrypt_string(data.get('BGPath', ''), password))
    GroundDevName_off = builder.CreateString(encrypt_string(data.get('GroundDevName', ''), password))
    EnterTimeLine_off = builder.CreateString(encrypt_string(data.get('EnterTimeLine', ''), password))
    VictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('VictoryTimelinePath', ''), password))
    PhaseChangeTimelinePath_off = builder.CreateString(encrypt_string(data.get('PhaseChangeTimelinePath', ''), password))
    BossCharacterId_vec = 0
    if 'BossCharacterId' in data:
        BossCharacterId_items = data['BossCharacterId']
        EliminateRaidStageExcel.StartBossCharacterIdVector(builder, len(BossCharacterId_items))
        for item in reversed(BossCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        BossCharacterId_vec = builder.EndVector(len(BossCharacterId_items))
    BattleReadyTimelinePath_vec = 0
    if 'BattleReadyTimelinePath' in data:
        BattleReadyTimelinePath_items = data['BattleReadyTimelinePath']
        BattleReadyTimelinePath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in BattleReadyTimelinePath_items]
        EliminateRaidStageExcel.StartBattleReadyTimelinePathVector(builder, len(BattleReadyTimelinePath_str_offsets))
        for offset in reversed(BattleReadyTimelinePath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        BattleReadyTimelinePath_vec = builder.EndVector(len(BattleReadyTimelinePath_items))
    BattleReadyTimelinePhaseStart_vec = 0
    if 'BattleReadyTimelinePhaseStart' in data:
        BattleReadyTimelinePhaseStart_items = data['BattleReadyTimelinePhaseStart']
        EliminateRaidStageExcel.StartBattleReadyTimelinePhaseStartVector(builder, len(BattleReadyTimelinePhaseStart_items))
        for item in reversed(BattleReadyTimelinePhaseStart_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseStart_vec = builder.EndVector(len(BattleReadyTimelinePhaseStart_items))
    BattleReadyTimelinePhaseEnd_vec = 0
    if 'BattleReadyTimelinePhaseEnd' in data:
        BattleReadyTimelinePhaseEnd_items = data['BattleReadyTimelinePhaseEnd']
        EliminateRaidStageExcel.StartBattleReadyTimelinePhaseEndVector(builder, len(BattleReadyTimelinePhaseEnd_items))
        for item in reversed(BattleReadyTimelinePhaseEnd_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseEnd_vec = builder.EndVector(len(BattleReadyTimelinePhaseEnd_items))
    Id_val = convert_long(data.get('Id', 0), password)
    UseBossIndex_val = data.get('UseBossIndex', 0)
    UseBossAIPhaseSync_val = data.get('UseBossAIPhaseSync', 0)
    RaidEnterCostType_val = convert_int(getattr(ParcelType, data.get('RaidEnterCostType', 0)), password)
    RaidEnterCostId_val = convert_long(data.get('RaidEnterCostId', 0), password)
    RaidEnterCostAmount_val = convert_int(data.get('RaidEnterCostAmount', 0), password)
    RaidCharacterId_val = convert_long(data.get('RaidCharacterId', 0), password)
    Difficulty_val = convert_int(getattr(Difficulty, data.get('Difficulty', 0)), password)
    IsOpen_val = data.get('IsOpen', 0)
    MaxPlayerCount_val = convert_long(data.get('MaxPlayerCount', 0), password)
    RaidRoomLifeTime_val = convert_int(data.get('RaidRoomLifeTime', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    TacticEnvironment_val = convert_int(getattr(TacticEnvironment, data.get('TacticEnvironment', 0)), password)
    DefaultClearScore_val = convert_long(data.get('DefaultClearScore', 0), password)
    MaximumScore_val = convert_long(data.get('MaximumScore', 0), password)
    PerSecondMinusScore_val = convert_long(data.get('PerSecondMinusScore', 0), password)
    HPPercentScore_val = convert_long(data.get('HPPercentScore', 0), password)
    MinimumAcquisitionScore_val = convert_long(data.get('MinimumAcquisitionScore', 0), password)
    MaximumAcquisitionScore_val = convert_long(data.get('MaximumAcquisitionScore', 0), password)
    RaidRewardGroupId_val = convert_long(data.get('RaidRewardGroupId', 0), password)
    TimeLinePhase_val = convert_long(data.get('TimeLinePhase', 0), password)
    EnterScenarioKey_val = convert_uint(data.get('EnterScenarioKey', 0), password)
    ClearScenarioKey_val = convert_uint(data.get('ClearScenarioKey', 0), password)
    ShowSkillCard_val = data.get('ShowSkillCard', 0)
    BossBGInfoKey_val = convert_uint(data.get('BossBGInfoKey', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    EliminateRaidStageExcel.Start(builder)
    EliminateRaidStageExcel.AddId(builder, Id_val)
    EliminateRaidStageExcel.AddUseBossIndex(builder, UseBossIndex_val)
    EliminateRaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync_val)
    EliminateRaidStageExcel.AddRaidBossGroup(builder, RaidBossGroup_off)
    EliminateRaidStageExcel.AddRaidEnterCostType(builder, RaidEnterCostType_val)
    EliminateRaidStageExcel.AddRaidEnterCostId(builder, RaidEnterCostId_val)
    EliminateRaidStageExcel.AddRaidEnterCostAmount(builder, RaidEnterCostAmount_val)
    EliminateRaidStageExcel.AddBossSpinePath(builder, BossSpinePath_off)
    EliminateRaidStageExcel.AddPortraitPath(builder, PortraitPath_off)
    EliminateRaidStageExcel.AddBGPath(builder, BGPath_off)
    EliminateRaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId_val)
    EliminateRaidStageExcel.AddBossCharacterId(builder, BossCharacterId_vec)
    EliminateRaidStageExcel.AddDifficulty(builder, Difficulty_val)
    EliminateRaidStageExcel.AddIsOpen(builder, IsOpen_val)
    EliminateRaidStageExcel.AddMaxPlayerCount(builder, MaxPlayerCount_val)
    EliminateRaidStageExcel.AddRaidRoomLifeTime(builder, RaidRoomLifeTime_val)
    EliminateRaidStageExcel.AddBattleDuration(builder, BattleDuration_val)
    EliminateRaidStageExcel.AddGroundId(builder, GroundId_val)
    EliminateRaidStageExcel.AddGroundDevName(builder, GroundDevName_off)
    EliminateRaidStageExcel.AddEnterTimeLine(builder, EnterTimeLine_off)
    EliminateRaidStageExcel.AddTacticEnvironment(builder, TacticEnvironment_val)
    EliminateRaidStageExcel.AddDefaultClearScore(builder, DefaultClearScore_val)
    EliminateRaidStageExcel.AddMaximumScore(builder, MaximumScore_val)
    EliminateRaidStageExcel.AddPerSecondMinusScore(builder, PerSecondMinusScore_val)
    EliminateRaidStageExcel.AddHPPercentScore(builder, HPPercentScore_val)
    EliminateRaidStageExcel.AddMinimumAcquisitionScore(builder, MinimumAcquisitionScore_val)
    EliminateRaidStageExcel.AddMaximumAcquisitionScore(builder, MaximumAcquisitionScore_val)
    EliminateRaidStageExcel.AddRaidRewardGroupId(builder, RaidRewardGroupId_val)
    EliminateRaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePath_vec)
    EliminateRaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStart_vec)
    EliminateRaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEnd_vec)
    EliminateRaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePath_off)
    EliminateRaidStageExcel.AddPhaseChangeTimelinePath(builder, PhaseChangeTimelinePath_off)
    EliminateRaidStageExcel.AddTimeLinePhase(builder, TimeLinePhase_val)
    EliminateRaidStageExcel.AddEnterScenarioKey(builder, EnterScenarioKey_val)
    EliminateRaidStageExcel.AddClearScenarioKey(builder, ClearScenarioKey_val)
    EliminateRaidStageExcel.AddShowSkillCard(builder, ShowSkillCard_val)
    EliminateRaidStageExcel.AddBossBGInfoKey(builder, BossBGInfoKey_val)
    EliminateRaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return EliminateRaidStageExcel.End(builder)

def pack_EliminateRaidStageLimitedRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidStageLimitedReward") if encrypt else None
    LimitedRewardParcelType_vec = 0
    if 'LimitedRewardParcelType' in data:
        LimitedRewardParcelType_items = data['LimitedRewardParcelType']
        EliminateRaidStageLimitedRewardExcel.StartLimitedRewardParcelTypeVector(builder, len(LimitedRewardParcelType_items))
        for item in reversed(LimitedRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        LimitedRewardParcelType_vec = builder.EndVector(len(LimitedRewardParcelType_items))
    LimitedRewardParcelUniqueId_vec = 0
    if 'LimitedRewardParcelUniqueId' in data:
        LimitedRewardParcelUniqueId_items = data['LimitedRewardParcelUniqueId']
        EliminateRaidStageLimitedRewardExcel.StartLimitedRewardParcelUniqueIdVector(builder, len(LimitedRewardParcelUniqueId_items))
        for item in reversed(LimitedRewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        LimitedRewardParcelUniqueId_vec = builder.EndVector(len(LimitedRewardParcelUniqueId_items))
    LimitedRewardAmount_vec = 0
    if 'LimitedRewardAmount' in data:
        LimitedRewardAmount_items = data['LimitedRewardAmount']
        EliminateRaidStageLimitedRewardExcel.StartLimitedRewardAmountVector(builder, len(LimitedRewardAmount_items))
        for item in reversed(LimitedRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        LimitedRewardAmount_vec = builder.EndVector(len(LimitedRewardAmount_items))
    LimitedRewardId_val = convert_long(data.get('LimitedRewardId', 0), password)
    EliminateRaidStageLimitedRewardExcel.Start(builder)
    EliminateRaidStageLimitedRewardExcel.AddLimitedRewardId(builder, LimitedRewardId_val)
    EliminateRaidStageLimitedRewardExcel.AddLimitedRewardParcelType(builder, LimitedRewardParcelType_vec)
    EliminateRaidStageLimitedRewardExcel.AddLimitedRewardParcelUniqueId(builder, LimitedRewardParcelUniqueId_vec)
    EliminateRaidStageLimitedRewardExcel.AddLimitedRewardAmount(builder, LimitedRewardAmount_vec)
    return EliminateRaidStageLimitedRewardExcel.End(builder)

def pack_EliminateRaidStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    IsClearStageRewardHideInfo_val = data.get('IsClearStageRewardHideInfo', 0)
    ClearStageRewardProb_val = convert_long(data.get('ClearStageRewardProb', 0), password)
    ClearStageRewardParcelType_val = convert_int(getattr(ParcelType, data.get('ClearStageRewardParcelType', 0)), password)
    ClearStageRewardParcelUniqueID_val = convert_long(data.get('ClearStageRewardParcelUniqueID', 0), password)
    ClearStageRewardAmount_val = convert_long(data.get('ClearStageRewardAmount', 0), password)
    EliminateRaidStageRewardExcel.Start(builder)
    EliminateRaidStageRewardExcel.AddGroupId(builder, GroupId_val)
    EliminateRaidStageRewardExcel.AddIsClearStageRewardHideInfo(builder, IsClearStageRewardHideInfo_val)
    EliminateRaidStageRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb_val)
    EliminateRaidStageRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType_val)
    EliminateRaidStageRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID_val)
    EliminateRaidStageRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount_val)
    return EliminateRaidStageRewardExcel.End(builder)

def pack_EliminateRaidStageSeasonRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EliminateRaidStageSeasonReward") if encrypt else None
    SeasonRewardParcelType_vec = 0
    if 'SeasonRewardParcelType' in data:
        SeasonRewardParcelType_items = data['SeasonRewardParcelType']
        EliminateRaidStageSeasonRewardExcel.StartSeasonRewardParcelTypeVector(builder, len(SeasonRewardParcelType_items))
        for item in reversed(SeasonRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        SeasonRewardParcelType_vec = builder.EndVector(len(SeasonRewardParcelType_items))
    SeasonRewardParcelUniqueId_vec = 0
    if 'SeasonRewardParcelUniqueId' in data:
        SeasonRewardParcelUniqueId_items = data['SeasonRewardParcelUniqueId']
        EliminateRaidStageSeasonRewardExcel.StartSeasonRewardParcelUniqueIdVector(builder, len(SeasonRewardParcelUniqueId_items))
        for item in reversed(SeasonRewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardParcelUniqueId_vec = builder.EndVector(len(SeasonRewardParcelUniqueId_items))
    SeasonRewardAmount_vec = 0
    if 'SeasonRewardAmount' in data:
        SeasonRewardAmount_items = data['SeasonRewardAmount']
        EliminateRaidStageSeasonRewardExcel.StartSeasonRewardAmountVector(builder, len(SeasonRewardAmount_items))
        for item in reversed(SeasonRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardAmount_vec = builder.EndVector(len(SeasonRewardAmount_items))
    SeasonRewardId_val = convert_long(data.get('SeasonRewardId', 0), password)
    EliminateRaidStageSeasonRewardExcel.Start(builder)
    EliminateRaidStageSeasonRewardExcel.AddSeasonRewardId(builder, SeasonRewardId_val)
    EliminateRaidStageSeasonRewardExcel.AddSeasonRewardParcelType(builder, SeasonRewardParcelType_vec)
    EliminateRaidStageSeasonRewardExcel.AddSeasonRewardParcelUniqueId(builder, SeasonRewardParcelUniqueId_vec)
    EliminateRaidStageSeasonRewardExcel.AddSeasonRewardAmount(builder, SeasonRewardAmount_vec)
    return EliminateRaidStageSeasonRewardExcel.End(builder)

def pack_EmblemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Emblem") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    EmblemIconPath_off = builder.CreateString(encrypt_string(data.get('EmblemIconPath', ''), password))
    EmblemIconBGPath_off = builder.CreateString(encrypt_string(data.get('EmblemIconBGPath', ''), password))
    EmblemBGPathJp_off = builder.CreateString(encrypt_string(data.get('EmblemBGPathJp', ''), password))
    EmblemBGPathKr_off = builder.CreateString(encrypt_string(data.get('EmblemBGPathKr', ''), password))
    EmblemEffectPath_off = builder.CreateString(encrypt_string(data.get('EmblemEffectPath', ''), password))
    DisplayStartDate_off = builder.CreateString(encrypt_string(data.get('DisplayStartDate', ''), password))
    DisplayEndDate_off = builder.CreateString(encrypt_string(data.get('DisplayEndDate', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Category_val = convert_int(getattr(EmblemCategory, data.get('Category', 0)), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    LocalizeCodeId_val = convert_uint(data.get('LocalizeCodeId', 0), password)
    UseAtLocalizeId_val = convert_long(data.get('UseAtLocalizeId', 0), password)
    EmblemTextVisible_val = data.get('EmblemTextVisible', 0)
    EmblemIconNumControl_val = convert_int(data.get('EmblemIconNumControl', 0), password)
    DisplayType_val = convert_int(getattr(EmblemDisplayType, data.get('DisplayType', 0)), password)
    DislpayFavorLevel_val = convert_int(data.get('DislpayFavorLevel', 0), password)
    CheckPassType_val = convert_int(getattr(EmblemCheckPassType, data.get('CheckPassType', 0)), password)
    EmblemParameter_val = convert_long(data.get('EmblemParameter', 0), password)
    CheckPassCount_val = convert_long(data.get('CheckPassCount', 0), password)
    EmblemExcel.Start(builder)
    EmblemExcel.AddId(builder, Id_val)
    EmblemExcel.AddCategory(builder, Category_val)
    EmblemExcel.AddRarity(builder, Rarity_val)
    EmblemExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EmblemExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EmblemExcel.AddLocalizeCodeId(builder, LocalizeCodeId_val)
    EmblemExcel.AddUseAtLocalizeId(builder, UseAtLocalizeId_val)
    EmblemExcel.AddEmblemTextVisible(builder, EmblemTextVisible_val)
    EmblemExcel.AddIconPath(builder, IconPath_off)
    EmblemExcel.AddEmblemIconPath(builder, EmblemIconPath_off)
    EmblemExcel.AddEmblemIconNumControl(builder, EmblemIconNumControl_val)
    EmblemExcel.AddEmblemIconBGPath(builder, EmblemIconBGPath_off)
    EmblemExcel.AddEmblemBGPathJp(builder, EmblemBGPathJp_off)
    EmblemExcel.AddEmblemBGPathKr(builder, EmblemBGPathKr_off)
    EmblemExcel.AddEmblemEffectPath(builder, EmblemEffectPath_off)
    EmblemExcel.AddDisplayType(builder, DisplayType_val)
    EmblemExcel.AddDisplayStartDate(builder, DisplayStartDate_off)
    EmblemExcel.AddDisplayEndDate(builder, DisplayEndDate_off)
    EmblemExcel.AddDislpayFavorLevel(builder, DislpayFavorLevel_val)
    EmblemExcel.AddCheckPassType(builder, CheckPassType_val)
    EmblemExcel.AddEmblemParameter(builder, EmblemParameter_val)
    EmblemExcel.AddCheckPassCount(builder, CheckPassCount_val)
    return EmblemExcel.End(builder)

def pack_EquipmentExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Equipment") if encrypt else None
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    ImageName_off = builder.CreateString(encrypt_string(data.get('ImageName', ''), password))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        EquipmentExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    ShopCategory_vec = 0
    if 'ShopCategory' in data:
        ShopCategory_items = data['ShopCategory']
        EquipmentExcel.StartShopCategoryVector(builder, len(ShopCategory_items))
        for item in reversed(ShopCategory_items):
            builder.PrependInt32(convert_int(getattr(ShopCategoryType, item), password))
        ShopCategory_vec = builder.EndVector(len(ShopCategory_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EquipmentCategory_val = convert_int(getattr(EquipmentCategory, data.get('EquipmentCategory', 0)), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    Wear_val = data.get('Wear', 0)
    MaxLevel_val = convert_int(data.get('MaxLevel', 0), password)
    RecipeId_val = convert_int(data.get('RecipeId', 0), password)
    TierInit_val = convert_long(data.get('TierInit', 0), password)
    NextTierEquipment_val = convert_long(data.get('NextTierEquipment', 0), password)
    StackableMax_val = convert_int(data.get('StackableMax', 0), password)
    CraftQualityTier0_val = convert_long(data.get('CraftQualityTier0', 0), password)
    CraftQualityTier1_val = convert_long(data.get('CraftQualityTier1', 0), password)
    CraftQualityTier2_val = convert_long(data.get('CraftQualityTier2', 0), password)
    ShiftingCraftQuality_val = convert_long(data.get('ShiftingCraftQuality', 0), password)
    ShortcutTypeId_val = convert_long(data.get('ShortcutTypeId', 0), password)
    EquipmentExcel.Start(builder)
    EquipmentExcel.AddId(builder, Id_val)
    EquipmentExcel.AddEquipmentCategory(builder, EquipmentCategory_val)
    EquipmentExcel.AddRarity(builder, Rarity_val)
    EquipmentExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EquipmentExcel.AddWear(builder, Wear_val)
    EquipmentExcel.AddMaxLevel(builder, MaxLevel_val)
    EquipmentExcel.AddRecipeId(builder, RecipeId_val)
    EquipmentExcel.AddTierInit(builder, TierInit_val)
    EquipmentExcel.AddNextTierEquipment(builder, NextTierEquipment_val)
    EquipmentExcel.AddStackableMax(builder, StackableMax_val)
    EquipmentExcel.AddIcon(builder, Icon_off)
    EquipmentExcel.AddImageName(builder, ImageName_off)
    EquipmentExcel.AddTags(builder, Tags_vec)
    EquipmentExcel.AddCraftQualityTier0(builder, CraftQualityTier0_val)
    EquipmentExcel.AddCraftQualityTier1(builder, CraftQualityTier1_val)
    EquipmentExcel.AddCraftQualityTier2(builder, CraftQualityTier2_val)
    EquipmentExcel.AddShiftingCraftQuality(builder, ShiftingCraftQuality_val)
    EquipmentExcel.AddShopCategory(builder, ShopCategory_vec)
    EquipmentExcel.AddShortcutTypeId(builder, ShortcutTypeId_val)
    return EquipmentExcel.End(builder)

def pack_EquipmentLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EquipmentLevel") if encrypt else None
    TierLevelExp_vec = 0
    if 'TierLevelExp' in data:
        TierLevelExp_items = data['TierLevelExp']
        EquipmentLevelExcel.StartTierLevelExpVector(builder, len(TierLevelExp_items))
        for item in reversed(TierLevelExp_items):
            builder.PrependInt64(convert_long(item, password))
        TierLevelExp_vec = builder.EndVector(len(TierLevelExp_items))
    TotalExp_vec = 0
    if 'TotalExp' in data:
        TotalExp_items = data['TotalExp']
        EquipmentLevelExcel.StartTotalExpVector(builder, len(TotalExp_items))
        for item in reversed(TotalExp_items):
            builder.PrependInt64(convert_long(item, password))
        TotalExp_vec = builder.EndVector(len(TotalExp_items))
    Level_val = convert_int(data.get('Level', 0), password)
    EquipmentLevelExcel.Start(builder)
    EquipmentLevelExcel.AddLevel(builder, Level_val)
    EquipmentLevelExcel.AddTierLevelExp(builder, TierLevelExp_vec)
    EquipmentLevelExcel.AddTotalExp(builder, TotalExp_vec)
    return EquipmentLevelExcel.End(builder)

def pack_EquipmentStatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EquipmentStat") if encrypt else None
    DamageFactorGroupId_off = builder.CreateString(encrypt_string(data.get('DamageFactorGroupId', ''), password))
    StatType_vec = 0
    if 'StatType' in data:
        StatType_items = data['StatType']
        EquipmentStatExcel.StartStatTypeVector(builder, len(StatType_items))
        for item in reversed(StatType_items):
            builder.PrependInt32(convert_int(getattr(EquipmentOptionType, item), password))
        StatType_vec = builder.EndVector(len(StatType_items))
    MinStat_vec = 0
    if 'MinStat' in data:
        MinStat_items = data['MinStat']
        EquipmentStatExcel.StartMinStatVector(builder, len(MinStat_items))
        for item in reversed(MinStat_items):
            builder.PrependInt64(convert_long(item, password))
        MinStat_vec = builder.EndVector(len(MinStat_items))
    MaxStat_vec = 0
    if 'MaxStat' in data:
        MaxStat_items = data['MaxStat']
        EquipmentStatExcel.StartMaxStatVector(builder, len(MaxStat_items))
        for item in reversed(MaxStat_items):
            builder.PrependInt64(convert_long(item, password))
        MaxStat_vec = builder.EndVector(len(MaxStat_items))
    EquipmentId_val = convert_long(data.get('EquipmentId', 0), password)
    StatLevelUpType_val = convert_int(getattr(StatLevelUpType, data.get('StatLevelUpType', 0)), password)
    LevelUpInsertLimit_val = convert_int(data.get('LevelUpInsertLimit', 0), password)
    LevelUpFeedExp_val = convert_long(data.get('LevelUpFeedExp', 0), password)
    LevelUpFeedCostCurrency_val = convert_int(getattr(CurrencyTypes, data.get('LevelUpFeedCostCurrency', 0)), password)
    LevelUpFeedCostAmount_val = convert_long(data.get('LevelUpFeedCostAmount', 0), password)
    EquipmentCategory_val = convert_int(getattr(EquipmentCategory, data.get('EquipmentCategory', 0)), password)
    LevelUpFeedAddExp_val = convert_long(data.get('LevelUpFeedAddExp', 0), password)
    DefaultMaxLevel_val = convert_int(data.get('DefaultMaxLevel', 0), password)
    TranscendenceMax_val = convert_int(data.get('TranscendenceMax', 0), password)
    EquipmentStatExcel.Start(builder)
    EquipmentStatExcel.AddEquipmentId(builder, EquipmentId_val)
    EquipmentStatExcel.AddStatLevelUpType(builder, StatLevelUpType_val)
    EquipmentStatExcel.AddStatType(builder, StatType_vec)
    EquipmentStatExcel.AddMinStat(builder, MinStat_vec)
    EquipmentStatExcel.AddMaxStat(builder, MaxStat_vec)
    EquipmentStatExcel.AddLevelUpInsertLimit(builder, LevelUpInsertLimit_val)
    EquipmentStatExcel.AddLevelUpFeedExp(builder, LevelUpFeedExp_val)
    EquipmentStatExcel.AddLevelUpFeedCostCurrency(builder, LevelUpFeedCostCurrency_val)
    EquipmentStatExcel.AddLevelUpFeedCostAmount(builder, LevelUpFeedCostAmount_val)
    EquipmentStatExcel.AddEquipmentCategory(builder, EquipmentCategory_val)
    EquipmentStatExcel.AddLevelUpFeedAddExp(builder, LevelUpFeedAddExp_val)
    EquipmentStatExcel.AddDefaultMaxLevel(builder, DefaultMaxLevel_val)
    EquipmentStatExcel.AddTranscendenceMax(builder, TranscendenceMax_val)
    EquipmentStatExcel.AddDamageFactorGroupId(builder, DamageFactorGroupId_off)
    return EquipmentStatExcel.End(builder)

def pack_EventContentArchiveBannerOffsetExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentArchiveBannerOffset") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    OffsetX_val = encrypt_float(data.get('OffsetX', 0), password)
    OffsetY_val = encrypt_float(data.get('OffsetY', 0), password)
    ScaleX_val = encrypt_float(data.get('ScaleX', 0), password)
    ScaleY_val = encrypt_float(data.get('ScaleY', 0), password)
    EventContentArchiveBannerOffsetExcel.Start(builder)
    EventContentArchiveBannerOffsetExcel.AddEventContentId(builder, EventContentId_val)
    EventContentArchiveBannerOffsetExcel.AddOffsetX(builder, OffsetX_val)
    EventContentArchiveBannerOffsetExcel.AddOffsetY(builder, OffsetY_val)
    EventContentArchiveBannerOffsetExcel.AddScaleX(builder, ScaleX_val)
    EventContentArchiveBannerOffsetExcel.AddScaleY(builder, ScaleY_val)
    return EventContentArchiveBannerOffsetExcel.End(builder)

def pack_EventContentBoxGachaManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentBoxGachaManage") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Round_val = convert_long(data.get('Round', 0), password)
    GoodsId_val = convert_long(data.get('GoodsId', 0), password)
    IsLoop_val = data.get('IsLoop', 0)
    EventContentBoxGachaManageExcel.Start(builder)
    EventContentBoxGachaManageExcel.AddEventContentId(builder, EventContentId_val)
    EventContentBoxGachaManageExcel.AddRound(builder, Round_val)
    EventContentBoxGachaManageExcel.AddGoodsId(builder, GoodsId_val)
    EventContentBoxGachaManageExcel.AddIsLoop(builder, IsLoop_val)
    return EventContentBoxGachaManageExcel.End(builder)

def pack_EventContentBoxGachaShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentBoxGachaShop") if encrypt else None
    GoodsId_vec = 0
    if 'GoodsId' in data:
        GoodsId_items = data['GoodsId']
        EventContentBoxGachaShopExcel.StartGoodsIdVector(builder, len(GoodsId_items))
        for item in reversed(GoodsId_items):
            builder.PrependInt64(convert_long(item, password))
        GoodsId_vec = builder.EndVector(len(GoodsId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    GroupElementAmount_val = convert_long(data.get('GroupElementAmount', 0), password)
    Round_val = convert_long(data.get('Round', 0), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    IsPrize_val = data.get('IsPrize', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    EventContentBoxGachaShopExcel.Start(builder)
    EventContentBoxGachaShopExcel.AddEventContentId(builder, EventContentId_val)
    EventContentBoxGachaShopExcel.AddGroupId(builder, GroupId_val)
    EventContentBoxGachaShopExcel.AddGroupElementAmount(builder, GroupElementAmount_val)
    EventContentBoxGachaShopExcel.AddRound(builder, Round_val)
    EventContentBoxGachaShopExcel.AddIsLegacy(builder, IsLegacy_val)
    EventContentBoxGachaShopExcel.AddIsPrize(builder, IsPrize_val)
    EventContentBoxGachaShopExcel.AddGoodsId(builder, GoodsId_vec)
    EventContentBoxGachaShopExcel.AddDisplayOrder(builder, DisplayOrder_val)
    return EventContentBoxGachaShopExcel.End(builder)

def pack_EventContentBuffExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentBuff") if encrypt else None
    SkillGroupId_off = builder.CreateString(encrypt_string(data.get('SkillGroupId', ''), password))
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    SpriteName_off = builder.CreateString(encrypt_string(data.get('SpriteName', ''), password))
    BuffDescriptionLocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('BuffDescriptionLocalizeCodeId', ''), password))
    EnumTypeValue_vec = 0
    if 'EnumTypeValue' in data:
        EnumTypeValue_items = data['EnumTypeValue']
        EnumTypeValue_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in EnumTypeValue_items]
        EventContentBuffExcel.StartEnumTypeValueVector(builder, len(EnumTypeValue_str_offsets))
        for offset in reversed(EnumTypeValue_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        EnumTypeValue_vec = builder.EndVector(len(EnumTypeValue_items))
    EventContentBuffId_val = convert_long(data.get('EventContentBuffId', 0), password)
    IsBuff_val = data.get('IsBuff', 0)
    CharacterTag_val = convert_int(getattr(Tag, data.get('CharacterTag', 0)), password)
    EnumType_val = convert_int(getattr(EventContentBuffFindRule, data.get('EnumType', 0)), password)
    EventContentBuffExcel.Start(builder)
    EventContentBuffExcel.AddEventContentBuffId(builder, EventContentBuffId_val)
    EventContentBuffExcel.AddIsBuff(builder, IsBuff_val)
    EventContentBuffExcel.AddCharacterTag(builder, CharacterTag_val)
    EventContentBuffExcel.AddEnumType(builder, EnumType_val)
    EventContentBuffExcel.AddEnumTypeValue(builder, EnumTypeValue_vec)
    EventContentBuffExcel.AddSkillGroupId(builder, SkillGroupId_off)
    EventContentBuffExcel.AddIconPath(builder, IconPath_off)
    EventContentBuffExcel.AddSpriteName(builder, SpriteName_off)
    EventContentBuffExcel.AddBuffDescriptionLocalizeCodeId(builder, BuffDescriptionLocalizeCodeId_off)
    return EventContentBuffExcel.End(builder)

def pack_EventContentBuffGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentBuffGroup") if encrypt else None
    BuffGroupNameLocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('BuffGroupNameLocalizeCodeId', ''), password))
    BuffNameLocalizeCodeId1_off = builder.CreateString(encrypt_string(data.get('BuffNameLocalizeCodeId1', ''), password))
    BuffDescriptionIconPath1_off = builder.CreateString(encrypt_string(data.get('BuffDescriptionIconPath1', ''), password))
    BuffNameLocalizeCodeId2_off = builder.CreateString(encrypt_string(data.get('BuffNameLocalizeCodeId2', ''), password))
    BuffDescriptionIconPath2_off = builder.CreateString(encrypt_string(data.get('BuffDescriptionIconPath2', ''), password))
    DebuffNameLocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('DebuffNameLocalizeCodeId', ''), password))
    DeBuffDescriptionIconPath_off = builder.CreateString(encrypt_string(data.get('DeBuffDescriptionIconPath', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    BuffContentId_val = convert_long(data.get('BuffContentId', 0), password)
    BuffGroupId_val = convert_long(data.get('BuffGroupId', 0), password)
    EventContentBuffId1_val = convert_long(data.get('EventContentBuffId1', 0), password)
    EventContentBuffId2_val = convert_long(data.get('EventContentBuffId2', 0), password)
    EventContentDebuffId_val = convert_long(data.get('EventContentDebuffId', 0), password)
    BuffGroupProb_val = convert_long(data.get('BuffGroupProb', 0), password)
    EventContentBuffGroupExcel.Start(builder)
    EventContentBuffGroupExcel.AddEventContentId(builder, EventContentId_val)
    EventContentBuffGroupExcel.AddBuffContentId(builder, BuffContentId_val)
    EventContentBuffGroupExcel.AddBuffGroupId(builder, BuffGroupId_val)
    EventContentBuffGroupExcel.AddBuffGroupNameLocalizeCodeId(builder, BuffGroupNameLocalizeCodeId_off)
    EventContentBuffGroupExcel.AddEventContentBuffId1(builder, EventContentBuffId1_val)
    EventContentBuffGroupExcel.AddBuffNameLocalizeCodeId1(builder, BuffNameLocalizeCodeId1_off)
    EventContentBuffGroupExcel.AddBuffDescriptionIconPath1(builder, BuffDescriptionIconPath1_off)
    EventContentBuffGroupExcel.AddEventContentBuffId2(builder, EventContentBuffId2_val)
    EventContentBuffGroupExcel.AddBuffNameLocalizeCodeId2(builder, BuffNameLocalizeCodeId2_off)
    EventContentBuffGroupExcel.AddBuffDescriptionIconPath2(builder, BuffDescriptionIconPath2_off)
    EventContentBuffGroupExcel.AddEventContentDebuffId(builder, EventContentDebuffId_val)
    EventContentBuffGroupExcel.AddDebuffNameLocalizeCodeId(builder, DebuffNameLocalizeCodeId_off)
    EventContentBuffGroupExcel.AddDeBuffDescriptionIconPath(builder, DeBuffDescriptionIconPath_off)
    EventContentBuffGroupExcel.AddBuffGroupProb(builder, BuffGroupProb_val)
    return EventContentBuffGroupExcel.End(builder)

def pack_EventContentCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCard") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    BackIconPath_off = builder.CreateString(encrypt_string(data.get('BackIconPath', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentCardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentCardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    CardGroupId_val = convert_int(data.get('CardGroupId', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    EventContentCardExcel.Start(builder)
    EventContentCardExcel.AddCardGroupId(builder, CardGroupId_val)
    EventContentCardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCardExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentCardExcel.AddIconPath(builder, IconPath_off)
    EventContentCardExcel.AddBackIconPath(builder, BackIconPath_off)
    EventContentCardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentCardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    return EventContentCardExcel.End(builder)

def pack_EventContentCardShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCardShop") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentCardShopExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentCardShopExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentCardShopExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    CostGoodsId_val = convert_long(data.get('CostGoodsId', 0), password)
    CardGroupId_val = convert_int(data.get('CardGroupId', 0), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    RefreshGroup_val = convert_int(data.get('RefreshGroup', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    ProbWeight1_val = convert_int(data.get('ProbWeight1', 0), password)
    EventContentCardShopExcel.Start(builder)
    EventContentCardShopExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCardShopExcel.AddId(builder, Id_val)
    EventContentCardShopExcel.AddRarity(builder, Rarity_val)
    EventContentCardShopExcel.AddCostGoodsId(builder, CostGoodsId_val)
    EventContentCardShopExcel.AddCardGroupId(builder, CardGroupId_val)
    EventContentCardShopExcel.AddIsLegacy(builder, IsLegacy_val)
    EventContentCardShopExcel.AddRefreshGroup(builder, RefreshGroup_val)
    EventContentCardShopExcel.AddProb(builder, Prob_val)
    EventContentCardShopExcel.AddProbWeight1(builder, ProbWeight1_val)
    EventContentCardShopExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentCardShopExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentCardShopExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentCardShopExcel.End(builder)

def pack_EventContentCardShopModifyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCardShopModify") if encrypt else None
    UsePrefabName_off = builder.CreateString(encrypt_string(data.get('UsePrefabName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentCardShopModifyExcel.Start(builder)
    EventContentCardShopModifyExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCardShopModifyExcel.AddUsePrefabName(builder, UsePrefabName_off)
    return EventContentCardShopModifyExcel.End(builder)

def pack_EventContentChangeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentChange") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ChangeCount_val = convert_long(data.get('ChangeCount', 0), password)
    IsLast_val = data.get('IsLast', 0)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    ChangeCostType_val = convert_int(getattr(ParcelType, data.get('ChangeCostType', 0)), password)
    ChangeCostId_val = convert_long(data.get('ChangeCostId', 0), password)
    ChangeCostAmount_val = convert_int(data.get('ChangeCostAmount', 0), password)
    EventContentChangeExcel.Start(builder)
    EventContentChangeExcel.AddEventContentId(builder, EventContentId_val)
    EventContentChangeExcel.AddChangeCount(builder, ChangeCount_val)
    EventContentChangeExcel.AddIsLast(builder, IsLast_val)
    EventContentChangeExcel.AddRewardParcelType(builder, RewardParcelType_val)
    EventContentChangeExcel.AddRewardId(builder, RewardId_val)
    EventContentChangeExcel.AddRewardAmount(builder, RewardAmount_val)
    EventContentChangeExcel.AddChangeCostType(builder, ChangeCostType_val)
    EventContentChangeExcel.AddChangeCostId(builder, ChangeCostId_val)
    EventContentChangeExcel.AddChangeCostAmount(builder, ChangeCostAmount_val)
    return EventContentChangeExcel.End(builder)

def pack_EventContentChangeScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentChangeScenario") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ChangeType_val = convert_int(getattr(EventChangeType, data.get('ChangeType', 0)), password)
    ChangeCount_val = convert_long(data.get('ChangeCount', 0), password)
    ScenarioGroupId_val = convert_long(data.get('ScenarioGroupId', 0), password)
    EventContentChangeScenarioExcel.Start(builder)
    EventContentChangeScenarioExcel.AddEventContentId(builder, EventContentId_val)
    EventContentChangeScenarioExcel.AddChangeType(builder, ChangeType_val)
    EventContentChangeScenarioExcel.AddChangeCount(builder, ChangeCount_val)
    EventContentChangeScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId_val)
    return EventContentChangeScenarioExcel.End(builder)

def pack_EventContentCharacterBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCharacterBonus") if encrypt else None
    EventContentItemType_vec = 0
    if 'EventContentItemType' in data:
        EventContentItemType_items = data['EventContentItemType']
        EventContentCharacterBonusExcel.StartEventContentItemTypeVector(builder, len(EventContentItemType_items))
        for item in reversed(EventContentItemType_items):
            builder.PrependInt32(convert_int(getattr(EventContentItemType, item), password))
        EventContentItemType_vec = builder.EndVector(len(EventContentItemType_items))
    BonusPercentage_vec = 0
    if 'BonusPercentage' in data:
        BonusPercentage_items = data['BonusPercentage']
        EventContentCharacterBonusExcel.StartBonusPercentageVector(builder, len(BonusPercentage_items))
        for item in reversed(BonusPercentage_items):
            builder.PrependInt64(convert_long(item, password))
        BonusPercentage_vec = builder.EndVector(len(BonusPercentage_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    EventContentCharacterBonusExcel.Start(builder)
    EventContentCharacterBonusExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCharacterBonusExcel.AddCharacterId(builder, CharacterId_val)
    EventContentCharacterBonusExcel.AddEventContentItemType(builder, EventContentItemType_vec)
    EventContentCharacterBonusExcel.AddBonusPercentage(builder, BonusPercentage_vec)
    return EventContentCharacterBonusExcel.End(builder)

def pack_EventContentCollectionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCollection") if encrypt else None
    EmblemResource_off = builder.CreateString(encrypt_string(data.get('EmblemResource', ''), password))
    ThumbResource_off = builder.CreateString(encrypt_string(data.get('ThumbResource', ''), password))
    FullResource_off = builder.CreateString(encrypt_string(data.get('FullResource', ''), password))
    Decoration_off = builder.CreateString(encrypt_string(data.get('Decoration', ''), password))
    SubNameLocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('SubNameLocalizeCodeId', ''), password))
    UnlockConditionParameter_vec = 0
    if 'UnlockConditionParameter' in data:
        UnlockConditionParameter_items = data['UnlockConditionParameter']
        EventContentCollectionExcel.StartUnlockConditionParameterVector(builder, len(UnlockConditionParameter_items))
        for item in reversed(UnlockConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        UnlockConditionParameter_vec = builder.EndVector(len(UnlockConditionParameter_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    UnlockConditionType_val = convert_int(getattr(CollectionUnlockType, data.get('UnlockConditionType', 0)), password)
    MultipleConditionCheckType_val = convert_int(getattr(MultipleConditionCheckType, data.get('MultipleConditionCheckType', 0)), password)
    UnlockConditionCount_val = convert_long(data.get('UnlockConditionCount', 0), password)
    IsObject_val = data.get('IsObject', 0)
    IsObjectOnFullResource_val = data.get('IsObjectOnFullResource', 0)
    IsHorizon_val = data.get('IsHorizon', 0)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    EventContentCollectionExcel.Start(builder)
    EventContentCollectionExcel.AddId(builder, Id_val)
    EventContentCollectionExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCollectionExcel.AddGroupId(builder, GroupId_val)
    EventContentCollectionExcel.AddUnlockConditionType(builder, UnlockConditionType_val)
    EventContentCollectionExcel.AddUnlockConditionParameter(builder, UnlockConditionParameter_vec)
    EventContentCollectionExcel.AddMultipleConditionCheckType(builder, MultipleConditionCheckType_val)
    EventContentCollectionExcel.AddUnlockConditionCount(builder, UnlockConditionCount_val)
    EventContentCollectionExcel.AddIsObject(builder, IsObject_val)
    EventContentCollectionExcel.AddIsObjectOnFullResource(builder, IsObjectOnFullResource_val)
    EventContentCollectionExcel.AddIsHorizon(builder, IsHorizon_val)
    EventContentCollectionExcel.AddEmblemResource(builder, EmblemResource_off)
    EventContentCollectionExcel.AddThumbResource(builder, ThumbResource_off)
    EventContentCollectionExcel.AddFullResource(builder, FullResource_off)
    EventContentCollectionExcel.AddDecoration(builder, Decoration_off)
    EventContentCollectionExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentCollectionExcel.AddSubNameLocalizeCodeId(builder, SubNameLocalizeCodeId_off)
    return EventContentCollectionExcel.End(builder)

def pack_EventContentConcentrationCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentConcentrationCard") if encrypt else None
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    BackImagePath_off = builder.CreateString(encrypt_string(data.get('BackImagePath', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CardId_val = convert_long(data.get('CardId', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    EventContentConcentrationCardExcel.Start(builder)
    EventContentConcentrationCardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentConcentrationCardExcel.AddCardId(builder, CardId_val)
    EventContentConcentrationCardExcel.AddRarity(builder, Rarity_val)
    EventContentConcentrationCardExcel.AddImagePath(builder, ImagePath_off)
    EventContentConcentrationCardExcel.AddBackImagePath(builder, BackImagePath_off)
    return EventContentConcentrationCardExcel.End(builder)

def pack_EventContentConcentrationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentConcentration") if encrypt else None
    CardBoardPrefabs_off = builder.CreateString(encrypt_string(data.get('CardBoardPrefabs', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CostGoodsId_val = convert_long(data.get('CostGoodsId', 0), password)
    MaxCardPairCount_val = convert_int(data.get('MaxCardPairCount', 0), password)
    MaxCardOpenCount_val = convert_int(data.get('MaxCardOpenCount', 0), password)
    InstantClearRound_val = convert_int(data.get('InstantClearRound', 0), password)
    EventContentConcentrationExcel.Start(builder)
    EventContentConcentrationExcel.AddEventContentId(builder, EventContentId_val)
    EventContentConcentrationExcel.AddCostGoodsId(builder, CostGoodsId_val)
    EventContentConcentrationExcel.AddMaxCardPairCount(builder, MaxCardPairCount_val)
    EventContentConcentrationExcel.AddMaxCardOpenCount(builder, MaxCardOpenCount_val)
    EventContentConcentrationExcel.AddInstantClearRound(builder, InstantClearRound_val)
    EventContentConcentrationExcel.AddCardBoardPrefabs(builder, CardBoardPrefabs_off)
    return EventContentConcentrationExcel.End(builder)

def pack_EventContentConcentrationRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentConcentrationReward") if encrypt else None
    LocalizePrefabId_off = builder.CreateString(encrypt_string(data.get('LocalizePrefabId', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentConcentrationRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentConcentrationRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentConcentrationRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt32(convert_int(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ConcentrationRewardType_val = convert_int(getattr(ConcentrationRewardType, data.get('ConcentrationRewardType', 0)), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    Round_val = convert_int(data.get('Round', 0), password)
    IsLoop_val = data.get('IsLoop', 0)
    EventContentConcentrationRewardExcel.Start(builder)
    EventContentConcentrationRewardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentConcentrationRewardExcel.AddUniqueId(builder, UniqueId_val)
    EventContentConcentrationRewardExcel.AddConcentrationRewardType(builder, ConcentrationRewardType_val)
    EventContentConcentrationRewardExcel.AddLocalizePrefabId(builder, LocalizePrefabId_off)
    EventContentConcentrationRewardExcel.AddRarity(builder, Rarity_val)
    EventContentConcentrationRewardExcel.AddRound(builder, Round_val)
    EventContentConcentrationRewardExcel.AddIsLoop(builder, IsLoop_val)
    EventContentConcentrationRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentConcentrationRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentConcentrationRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentConcentrationRewardExcel.End(builder)

def pack_EventContentConcentrationVoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentConcentrationVoice") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    VoiceCondition_val = convert_int(getattr(ConcentrationVoiceCondition, data.get('VoiceCondition', 0)), password)
    VoiceClip_val = convert_uint(data.get('VoiceClip', 0), password)
    EventContentConcentrationVoiceExcel.Start(builder)
    EventContentConcentrationVoiceExcel.AddEventContentId(builder, EventContentId_val)
    EventContentConcentrationVoiceExcel.AddUniqueId(builder, UniqueId_val)
    EventContentConcentrationVoiceExcel.AddVoiceCondition(builder, VoiceCondition_val)
    EventContentConcentrationVoiceExcel.AddVoiceClip(builder, VoiceClip_val)
    return EventContentConcentrationVoiceExcel.End(builder)

def pack_EventContentCurrencyItemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentCurrencyItem") if encrypt else None
    UseShortCutContentType_off = builder.CreateString(encrypt_string(data.get('UseShortCutContentType', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentItemType_val = convert_int(getattr(EventContentItemType, data.get('EventContentItemType', 0)), password)
    ItemUniqueId_val = convert_long(data.get('ItemUniqueId', 0), password)
    EventContentCurrencyItemExcel.Start(builder)
    EventContentCurrencyItemExcel.AddEventContentId(builder, EventContentId_val)
    EventContentCurrencyItemExcel.AddEventContentItemType(builder, EventContentItemType_val)
    EventContentCurrencyItemExcel.AddItemUniqueId(builder, ItemUniqueId_val)
    EventContentCurrencyItemExcel.AddUseShortCutContentType(builder, UseShortCutContentType_off)
    return EventContentCurrencyItemExcel.End(builder)

def pack_EventContentDebuffRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDebuffReward") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventStageId_val = convert_long(data.get('EventStageId', 0), password)
    EventContentItemType_val = convert_int(getattr(EventContentItemType, data.get('EventContentItemType', 0)), password)
    RewardPercentage_val = convert_long(data.get('RewardPercentage', 0), password)
    EventContentDebuffRewardExcel.Start(builder)
    EventContentDebuffRewardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDebuffRewardExcel.AddEventStageId(builder, EventStageId_val)
    EventContentDebuffRewardExcel.AddEventContentItemType(builder, EventContentItemType_val)
    EventContentDebuffRewardExcel.AddRewardPercentage(builder, RewardPercentage_val)
    return EventContentDebuffRewardExcel.End(builder)

def pack_EventContentDiceRaceEffectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDiceRaceEffect") if encrypt else None
    AniClip_off = builder.CreateString(encrypt_string(data.get('AniClip', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        EventContentDiceRaceEffectExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentDiceRaceResultType_val = convert_int(getattr(EventContentDiceRaceResultType, data.get('EventContentDiceRaceResultType', 0)), password)
    IsDiceResult_val = data.get('IsDiceResult', 0)
    EventContentDiceRaceEffectExcel.Start(builder)
    EventContentDiceRaceEffectExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDiceRaceEffectExcel.AddEventContentDiceRaceResultType(builder, EventContentDiceRaceResultType_val)
    EventContentDiceRaceEffectExcel.AddIsDiceResult(builder, IsDiceResult_val)
    EventContentDiceRaceEffectExcel.AddAniClip(builder, AniClip_off)
    EventContentDiceRaceEffectExcel.AddVoiceId(builder, VoiceId_vec)
    return EventContentDiceRaceEffectExcel.End(builder)

def pack_EventContentDiceRaceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDiceRace") if encrypt else None
    DiceRacePawnPrefab_off = builder.CreateString(encrypt_string(data.get('DiceRacePawnPrefab', ''), password))
    FixedDiceIcon_vec = 0
    if 'FixedDiceIcon' in data:
        FixedDiceIcon_items = data['FixedDiceIcon']
        FixedDiceIcon_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in FixedDiceIcon_items]
        EventContentDiceRaceExcel.StartFixedDiceIconVector(builder, len(FixedDiceIcon_str_offsets))
        for offset in reversed(FixedDiceIcon_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        FixedDiceIcon_vec = builder.EndVector(len(FixedDiceIcon_items))
    DiceRaceEventType_vec = 0
    if 'DiceRaceEventType' in data:
        DiceRaceEventType_items = data['DiceRaceEventType']
        DiceRaceEventType_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in DiceRaceEventType_items]
        EventContentDiceRaceExcel.StartDiceRaceEventTypeVector(builder, len(DiceRaceEventType_str_offsets))
        for offset in reversed(DiceRaceEventType_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        DiceRaceEventType_vec = builder.EndVector(len(DiceRaceEventType_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DiceCostGoodsId_val = convert_long(data.get('DiceCostGoodsId', 0), password)
    SkipableLap_val = convert_int(data.get('SkipableLap', 0), password)
    IsUsingFixedDice_val = data.get('IsUsingFixedDice', 0)
    EventContentDiceRaceExcel.Start(builder)
    EventContentDiceRaceExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDiceRaceExcel.AddDiceCostGoodsId(builder, DiceCostGoodsId_val)
    EventContentDiceRaceExcel.AddSkipableLap(builder, SkipableLap_val)
    EventContentDiceRaceExcel.AddDiceRacePawnPrefab(builder, DiceRacePawnPrefab_off)
    EventContentDiceRaceExcel.AddIsUsingFixedDice(builder, IsUsingFixedDice_val)
    EventContentDiceRaceExcel.AddFixedDiceIcon(builder, FixedDiceIcon_vec)
    EventContentDiceRaceExcel.AddDiceRaceEventType(builder, DiceRaceEventType_vec)
    return EventContentDiceRaceExcel.End(builder)

def pack_EventContentDiceRaceNodeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDiceRaceNode") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentDiceRaceNodeExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentDiceRaceNodeExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        EventContentDiceRaceNodeExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    NodeId_val = convert_long(data.get('NodeId', 0), password)
    EventContentDiceRaceNodeType_val = convert_int(getattr(EventContentDiceRaceNodeType, data.get('EventContentDiceRaceNodeType', 0)), password)
    MoveForwardTypeArg_val = convert_int(data.get('MoveForwardTypeArg', 0), password)
    EventContentDiceRaceNodeExcel.Start(builder)
    EventContentDiceRaceNodeExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDiceRaceNodeExcel.AddNodeId(builder, NodeId_val)
    EventContentDiceRaceNodeExcel.AddEventContentDiceRaceNodeType(builder, EventContentDiceRaceNodeType_val)
    EventContentDiceRaceNodeExcel.AddMoveForwardTypeArg(builder, MoveForwardTypeArg_val)
    EventContentDiceRaceNodeExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentDiceRaceNodeExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentDiceRaceNodeExcel.AddRewardAmount(builder, RewardAmount_vec)
    return EventContentDiceRaceNodeExcel.End(builder)

def pack_EventContentDiceRaceProbExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDiceRaceProb") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentDiceRaceResultType_val = convert_int(getattr(EventContentDiceRaceResultType, data.get('EventContentDiceRaceResultType', 0)), password)
    CostItemId_val = convert_long(data.get('CostItemId', 0), password)
    CostItemAmount_val = convert_int(data.get('CostItemAmount', 0), password)
    DiceResult_val = convert_int(data.get('DiceResult', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    EventContentDiceRaceProbExcel.Start(builder)
    EventContentDiceRaceProbExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDiceRaceProbExcel.AddEventContentDiceRaceResultType(builder, EventContentDiceRaceResultType_val)
    EventContentDiceRaceProbExcel.AddCostItemId(builder, CostItemId_val)
    EventContentDiceRaceProbExcel.AddCostItemAmount(builder, CostItemAmount_val)
    EventContentDiceRaceProbExcel.AddDiceResult(builder, DiceResult_val)
    EventContentDiceRaceProbExcel.AddProb(builder, Prob_val)
    return EventContentDiceRaceProbExcel.End(builder)

def pack_EventContentDiceRaceTotalRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentDiceRaceTotalReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentDiceRaceTotalRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentDiceRaceTotalRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentDiceRaceTotalRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    RewardID_val = convert_long(data.get('RewardID', 0), password)
    RequiredLapFinishCount_val = convert_int(data.get('RequiredLapFinishCount', 0), password)
    DisplayLapFinishCount_val = convert_int(data.get('DisplayLapFinishCount', 0), password)
    EventContentDiceRaceTotalRewardExcel.Start(builder)
    EventContentDiceRaceTotalRewardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentDiceRaceTotalRewardExcel.AddRewardID(builder, RewardID_val)
    EventContentDiceRaceTotalRewardExcel.AddRequiredLapFinishCount(builder, RequiredLapFinishCount_val)
    EventContentDiceRaceTotalRewardExcel.AddDisplayLapFinishCount(builder, DisplayLapFinishCount_val)
    EventContentDiceRaceTotalRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentDiceRaceTotalRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentDiceRaceTotalRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentDiceRaceTotalRewardExcel.End(builder)

def pack_EventContentFortuneGachaExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentFortuneGacha") if encrypt else None
    NameImagePath_off = builder.CreateString(encrypt_string(data.get('NameImagePath', ''), password))
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    FortuneGachaGroupId_val = convert_int(data.get('FortuneGachaGroupId', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    EventContentFortuneGachaExcel.Start(builder)
    EventContentFortuneGachaExcel.AddFortuneGachaGroupId(builder, FortuneGachaGroupId_val)
    EventContentFortuneGachaExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentFortuneGachaExcel.AddNameImagePath(builder, NameImagePath_off)
    EventContentFortuneGachaExcel.AddIconPath(builder, IconPath_off)
    return EventContentFortuneGachaExcel.End(builder)

def pack_EventContentFortuneGachaModifyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentFortuneGachaModify") if encrypt else None
    UsePrefabName_off = builder.CreateString(encrypt_string(data.get('UsePrefabName', ''), password))
    BucketImagePath_off = builder.CreateString(encrypt_string(data.get('BucketImagePath', ''), password))
    ShopBgImagePath_off = builder.CreateString(encrypt_string(data.get('ShopBgImagePath', ''), password))
    TitleLocalizeKey_off = builder.CreateString(encrypt_string(data.get('TitleLocalizeKey', ''), password))
    EventContentId_val = convert_int(data.get('EventContentId', 0), password)
    TargetGrade_val = convert_int(data.get('TargetGrade', 0), password)
    ProbModifyStartCount_val = convert_int(data.get('ProbModifyStartCount', 0), password)
    EventContentFortuneGachaModifyExcel.Start(builder)
    EventContentFortuneGachaModifyExcel.AddEventContentId(builder, EventContentId_val)
    EventContentFortuneGachaModifyExcel.AddTargetGrade(builder, TargetGrade_val)
    EventContentFortuneGachaModifyExcel.AddProbModifyStartCount(builder, ProbModifyStartCount_val)
    EventContentFortuneGachaModifyExcel.AddUsePrefabName(builder, UsePrefabName_off)
    EventContentFortuneGachaModifyExcel.AddBucketImagePath(builder, BucketImagePath_off)
    EventContentFortuneGachaModifyExcel.AddShopBgImagePath(builder, ShopBgImagePath_off)
    EventContentFortuneGachaModifyExcel.AddTitleLocalizeKey(builder, TitleLocalizeKey_off)
    return EventContentFortuneGachaModifyExcel.End(builder)

def pack_EventContentFortuneGachaShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentFortuneGachaShop") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentFortuneGachaShopExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentFortuneGachaShopExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentFortuneGachaShopExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    Grade_val = convert_int(data.get('Grade', 0), password)
    CostGoodsId_val = convert_long(data.get('CostGoodsId', 0), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    FortuneGachaGroupId_val = convert_int(data.get('FortuneGachaGroupId', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    ProbModifyValue_val = convert_int(data.get('ProbModifyValue', 0), password)
    ProbModifyLimit_val = convert_int(data.get('ProbModifyLimit', 0), password)
    EventContentFortuneGachaShopExcel.Start(builder)
    EventContentFortuneGachaShopExcel.AddEventContentId(builder, EventContentId_val)
    EventContentFortuneGachaShopExcel.AddId(builder, Id_val)
    EventContentFortuneGachaShopExcel.AddGrade(builder, Grade_val)
    EventContentFortuneGachaShopExcel.AddCostGoodsId(builder, CostGoodsId_val)
    EventContentFortuneGachaShopExcel.AddIsLegacy(builder, IsLegacy_val)
    EventContentFortuneGachaShopExcel.AddFortuneGachaGroupId(builder, FortuneGachaGroupId_val)
    EventContentFortuneGachaShopExcel.AddProb(builder, Prob_val)
    EventContentFortuneGachaShopExcel.AddProbModifyValue(builder, ProbModifyValue_val)
    EventContentFortuneGachaShopExcel.AddProbModifyLimit(builder, ProbModifyLimit_val)
    EventContentFortuneGachaShopExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentFortuneGachaShopExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentFortuneGachaShopExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentFortuneGachaShopExcel.End(builder)

def pack_EventContentLobbyMenuExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentLobbyMenu") if encrypt else None
    IconSpriteName_off = builder.CreateString(encrypt_string(data.get('IconSpriteName', ''), password))
    ButtonText_off = builder.CreateString(encrypt_string(data.get('ButtonText', ''), password))
    ReddotSpriteName_off = builder.CreateString(encrypt_string(data.get('ReddotSpriteName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentType_val = convert_int(getattr(EventContentType, data.get('EventContentType', 0)), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    IconOffsetX_val = encrypt_float(data.get('IconOffsetX', 0), password)
    IconOffsetY_val = encrypt_float(data.get('IconOffsetY', 0), password)
    EventContentLobbyMenuExcel.Start(builder)
    EventContentLobbyMenuExcel.AddEventContentId(builder, EventContentId_val)
    EventContentLobbyMenuExcel.AddEventContentType(builder, EventContentType_val)
    EventContentLobbyMenuExcel.AddIconSpriteName(builder, IconSpriteName_off)
    EventContentLobbyMenuExcel.AddButtonText(builder, ButtonText_off)
    EventContentLobbyMenuExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EventContentLobbyMenuExcel.AddIconOffsetX(builder, IconOffsetX_val)
    EventContentLobbyMenuExcel.AddIconOffsetY(builder, IconOffsetY_val)
    EventContentLobbyMenuExcel.AddReddotSpriteName(builder, ReddotSpriteName_off)
    return EventContentLobbyMenuExcel.End(builder)

def pack_EventContentLocationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentLocation") if encrypt else None
    PrefabPath_off = builder.CreateString(encrypt_string(data.get('PrefabPath', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    LocationResetScheduleCount_val = convert_int(data.get('LocationResetScheduleCount', 0), password)
    ScheduleEventPointCostParcelType_val = convert_int(getattr(ParcelType, data.get('ScheduleEventPointCostParcelType', 0)), password)
    ScheduleEventPointCostParcelId_val = convert_long(data.get('ScheduleEventPointCostParcelId', 0), password)
    ScheduleEventPointCostParcelAmount_val = convert_long(data.get('ScheduleEventPointCostParcelAmount', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    InformationGroupId_val = convert_long(data.get('InformationGroupId', 0), password)
    EventContentLocationExcel.Start(builder)
    EventContentLocationExcel.AddEventContentId(builder, EventContentId_val)
    EventContentLocationExcel.AddId(builder, Id_val)
    EventContentLocationExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentLocationExcel.AddPrefabPath(builder, PrefabPath_off)
    EventContentLocationExcel.AddLocationResetScheduleCount(builder, LocationResetScheduleCount_val)
    EventContentLocationExcel.AddScheduleEventPointCostParcelType(builder, ScheduleEventPointCostParcelType_val)
    EventContentLocationExcel.AddScheduleEventPointCostParcelId(builder, ScheduleEventPointCostParcelId_val)
    EventContentLocationExcel.AddScheduleEventPointCostParcelAmount(builder, ScheduleEventPointCostParcelAmount_val)
    EventContentLocationExcel.AddRewardParcelType(builder, RewardParcelType_val)
    EventContentLocationExcel.AddRewardParcelId(builder, RewardParcelId_val)
    EventContentLocationExcel.AddInformationGroupId(builder, InformationGroupId_val)
    return EventContentLocationExcel.End(builder)

def pack_EventContentLocationRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentLocationReward") if encrypt else None
    Location_off = builder.CreateString(encrypt_string(data.get('Location', ''), password))
    ProgressTexture_off = builder.CreateString(encrypt_string(data.get('ProgressTexture', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        EventContentLocationRewardExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    ExtraRewardParcelType_vec = 0
    if 'ExtraRewardParcelType' in data:
        ExtraRewardParcelType_items = data['ExtraRewardParcelType']
        EventContentLocationRewardExcel.StartExtraRewardParcelTypeVector(builder, len(ExtraRewardParcelType_items))
        for item in reversed(ExtraRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ExtraRewardParcelType_vec = builder.EndVector(len(ExtraRewardParcelType_items))
    ExtraRewardParcelId_vec = 0
    if 'ExtraRewardParcelId' in data:
        ExtraRewardParcelId_items = data['ExtraRewardParcelId']
        EventContentLocationRewardExcel.StartExtraRewardParcelIdVector(builder, len(ExtraRewardParcelId_items))
        for item in reversed(ExtraRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardParcelId_vec = builder.EndVector(len(ExtraRewardParcelId_items))
    ExtraRewardAmount_vec = 0
    if 'ExtraRewardAmount' in data:
        ExtraRewardAmount_items = data['ExtraRewardAmount']
        EventContentLocationRewardExcel.StartExtraRewardAmountVector(builder, len(ExtraRewardAmount_items))
        for item in reversed(ExtraRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardAmount_vec = builder.EndVector(len(ExtraRewardAmount_items))
    ExtraRewardProb_vec = 0
    if 'ExtraRewardProb' in data:
        ExtraRewardProb_items = data['ExtraRewardProb']
        EventContentLocationRewardExcel.StartExtraRewardProbVector(builder, len(ExtraRewardProb_items))
        for item in reversed(ExtraRewardProb_items):
            builder.PrependInt64(convert_long(item, password))
        ExtraRewardProb_vec = builder.EndVector(len(ExtraRewardProb_items))
    IsExtraRewardDisplayed_vec = 0
    if 'IsExtraRewardDisplayed' in data:
        IsExtraRewardDisplayed_items = data['IsExtraRewardDisplayed']
        EventContentLocationRewardExcel.StartIsExtraRewardDisplayedVector(builder, len(IsExtraRewardDisplayed_items))
        for item in reversed(IsExtraRewardDisplayed_items):
            builder.PrependBool(item)
        IsExtraRewardDisplayed_vec = builder.EndVector(len(IsExtraRewardDisplayed_items))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentLocationRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentLocationRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        EventContentLocationRewardExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    ScheduleGroupId_val = convert_long(data.get('ScheduleGroupId', 0), password)
    OrderInGroup_val = convert_long(data.get('OrderInGroup', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    LocationRank_val = convert_long(data.get('LocationRank', 0), password)
    FavorExp_val = convert_long(data.get('FavorExp', 0), password)
    SecretStoneAmount_val = convert_long(data.get('SecretStoneAmount', 0), password)
    SecretStoneProb_val = convert_long(data.get('SecretStoneProb', 0), password)
    ExtraFavorExp_val = convert_long(data.get('ExtraFavorExp', 0), password)
    ExtraFavorExpProb_val = convert_long(data.get('ExtraFavorExpProb', 0), password)
    EventContentLocationRewardExcel.Start(builder)
    EventContentLocationRewardExcel.AddLocation(builder, Location_off)
    EventContentLocationRewardExcel.AddScheduleGroupId(builder, ScheduleGroupId_val)
    EventContentLocationRewardExcel.AddOrderInGroup(builder, OrderInGroup_val)
    EventContentLocationRewardExcel.AddId(builder, Id_val)
    EventContentLocationRewardExcel.AddProgressTexture(builder, ProgressTexture_off)
    EventContentLocationRewardExcel.AddVoiceId(builder, VoiceId_vec)
    EventContentLocationRewardExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentLocationRewardExcel.AddLocationRank(builder, LocationRank_val)
    EventContentLocationRewardExcel.AddFavorExp(builder, FavorExp_val)
    EventContentLocationRewardExcel.AddSecretStoneAmount(builder, SecretStoneAmount_val)
    EventContentLocationRewardExcel.AddSecretStoneProb(builder, SecretStoneProb_val)
    EventContentLocationRewardExcel.AddExtraFavorExp(builder, ExtraFavorExp_val)
    EventContentLocationRewardExcel.AddExtraFavorExpProb(builder, ExtraFavorExpProb_val)
    EventContentLocationRewardExcel.AddExtraRewardParcelType(builder, ExtraRewardParcelType_vec)
    EventContentLocationRewardExcel.AddExtraRewardParcelId(builder, ExtraRewardParcelId_vec)
    EventContentLocationRewardExcel.AddExtraRewardAmount(builder, ExtraRewardAmount_vec)
    EventContentLocationRewardExcel.AddExtraRewardProb(builder, ExtraRewardProb_vec)
    EventContentLocationRewardExcel.AddIsExtraRewardDisplayed(builder, IsExtraRewardDisplayed_vec)
    EventContentLocationRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentLocationRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentLocationRewardExcel.AddRewardAmount(builder, RewardAmount_vec)
    return EventContentLocationRewardExcel.End(builder)

def pack_EventContentMeetupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentMeetup") if encrypt else None
    ConditionParameter_vec = 0
    if 'ConditionParameter' in data:
        ConditionParameter_items = data['ConditionParameter']
        EventContentMeetupExcel.StartConditionParameterVector(builder, len(ConditionParameter_items))
        for item in reversed(ConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionParameter_vec = builder.EndVector(len(ConditionParameter_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    ConditionScenarioGroupId_val = convert_long(data.get('ConditionScenarioGroupId', 0), password)
    ConditionType_val = convert_int(getattr(MeetupConditionType, data.get('ConditionType', 0)), password)
    ConditionPrintType_val = convert_int(getattr(MeetupConditionPrintType, data.get('ConditionPrintType', 0)), password)
    EventContentMeetupExcel.Start(builder)
    EventContentMeetupExcel.AddId(builder, Id_val)
    EventContentMeetupExcel.AddEventContentId(builder, EventContentId_val)
    EventContentMeetupExcel.AddCharacterId(builder, CharacterId_val)
    EventContentMeetupExcel.AddConditionScenarioGroupId(builder, ConditionScenarioGroupId_val)
    EventContentMeetupExcel.AddConditionType(builder, ConditionType_val)
    EventContentMeetupExcel.AddConditionParameter(builder, ConditionParameter_vec)
    EventContentMeetupExcel.AddConditionPrintType(builder, ConditionPrintType_val)
    return EventContentMeetupExcel.End(builder)

def pack_EventContentMeetupInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentMeetupInfo") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CostParcelType_val = convert_int(getattr(ParcelType, data.get('CostParcelType', 0)), password)
    CostId_val = convert_long(data.get('CostId', 0), password)
    CostAmount_val = convert_int(data.get('CostAmount', 0), password)
    EventContentMeetupInfoExcel.Start(builder)
    EventContentMeetupInfoExcel.AddEventContentId(builder, EventContentId_val)
    EventContentMeetupInfoExcel.AddCostParcelType(builder, CostParcelType_val)
    EventContentMeetupInfoExcel.AddCostId(builder, CostId_val)
    EventContentMeetupInfoExcel.AddCostAmount(builder, CostAmount_val)
    return EventContentMeetupInfoExcel.End(builder)

def pack_EventContentMiniEventShortCutExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentMiniEventShortCut") if encrypt else None
    ShortcutUI_off = builder.CreateString(encrypt_string(data.get('ShortcutUI', ''), password))
    Id_val = convert_int(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    ShorcutContentType_val = convert_int(getattr(EventTargetType, data.get('ShorcutContentType', 0)), password)
    EventContentMiniEventShortCutExcel.Start(builder)
    EventContentMiniEventShortCutExcel.AddId(builder, Id_val)
    EventContentMiniEventShortCutExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentMiniEventShortCutExcel.AddShorcutContentType(builder, ShorcutContentType_val)
    EventContentMiniEventShortCutExcel.AddShortcutUI(builder, ShortcutUI_off)
    return EventContentMiniEventShortCutExcel.End(builder)

def pack_EventContentMiniEventTokenExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentMiniEventToken") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ItemUniqueId_val = convert_long(data.get('ItemUniqueId', 0), password)
    MaximumAmount_val = convert_long(data.get('MaximumAmount', 0), password)
    EventContentMiniEventTokenExcel.Start(builder)
    EventContentMiniEventTokenExcel.AddEventContentId(builder, EventContentId_val)
    EventContentMiniEventTokenExcel.AddItemUniqueId(builder, ItemUniqueId_val)
    EventContentMiniEventTokenExcel.AddMaximumAmount(builder, MaximumAmount_val)
    return EventContentMiniEventTokenExcel.End(builder)

def pack_EventContentMissionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentMission") if encrypt else None
    GroupName_off = builder.CreateString(encrypt_string(data.get('GroupName', ''), password))
    ToastImagePath_off = builder.CreateString(encrypt_string(data.get('ToastImagePath', ''), password))
    RewardIcon_off = builder.CreateString(encrypt_string(data.get('RewardIcon', ''), password))
    PreMissionId_vec = 0
    if 'PreMissionId' in data:
        PreMissionId_items = data['PreMissionId']
        EventContentMissionExcel.StartPreMissionIdVector(builder, len(PreMissionId_items))
        for item in reversed(PreMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        PreMissionId_vec = builder.EndVector(len(PreMissionId_items))
    ShortcutUI_vec = 0
    if 'ShortcutUI' in data:
        ShortcutUI_items = data['ShortcutUI']
        ShortcutUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUI_items]
        EventContentMissionExcel.StartShortcutUIVector(builder, len(ShortcutUI_str_offsets))
        for offset in reversed(ShortcutUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUI_vec = builder.EndVector(len(ShortcutUI_items))
    CompleteConditionParameter_vec = 0
    if 'CompleteConditionParameter' in data:
        CompleteConditionParameter_items = data['CompleteConditionParameter']
        EventContentMissionExcel.StartCompleteConditionParameterVector(builder, len(CompleteConditionParameter_items))
        for item in reversed(CompleteConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionParameter_vec = builder.EndVector(len(CompleteConditionParameter_items))
    CompleteConditionParameterTag_vec = 0
    if 'CompleteConditionParameterTag' in data:
        CompleteConditionParameterTag_items = data['CompleteConditionParameterTag']
        EventContentMissionExcel.StartCompleteConditionParameterTagVector(builder, len(CompleteConditionParameterTag_items))
        for item in reversed(CompleteConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CompleteConditionParameterTag_vec = builder.EndVector(len(CompleteConditionParameterTag_items))
    CompleteConditionMissionId_vec = 0
    if 'CompleteConditionMissionId' in data:
        CompleteConditionMissionId_items = data['CompleteConditionMissionId']
        EventContentMissionExcel.StartCompleteConditionMissionIdVector(builder, len(CompleteConditionMissionId_items))
        for item in reversed(CompleteConditionMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionMissionId_vec = builder.EndVector(len(CompleteConditionMissionId_items))
    MissionRewardParcelType_vec = 0
    if 'MissionRewardParcelType' in data:
        MissionRewardParcelType_items = data['MissionRewardParcelType']
        EventContentMissionExcel.StartMissionRewardParcelTypeVector(builder, len(MissionRewardParcelType_items))
        for item in reversed(MissionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        MissionRewardParcelType_vec = builder.EndVector(len(MissionRewardParcelType_items))
    MissionRewardParcelId_vec = 0
    if 'MissionRewardParcelId' in data:
        MissionRewardParcelId_items = data['MissionRewardParcelId']
        EventContentMissionExcel.StartMissionRewardParcelIdVector(builder, len(MissionRewardParcelId_items))
        for item in reversed(MissionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        MissionRewardParcelId_vec = builder.EndVector(len(MissionRewardParcelId_items))
    MissionRewardAmount_vec = 0
    if 'MissionRewardAmount' in data:
        MissionRewardAmount_items = data['MissionRewardAmount']
        EventContentMissionExcel.StartMissionRewardAmountVector(builder, len(MissionRewardAmount_items))
        for item in reversed(MissionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        MissionRewardAmount_vec = builder.EndVector(len(MissionRewardAmount_items))
    ConditionRewardParcelType_vec = 0
    if 'ConditionRewardParcelType' in data:
        ConditionRewardParcelType_items = data['ConditionRewardParcelType']
        EventContentMissionExcel.StartConditionRewardParcelTypeVector(builder, len(ConditionRewardParcelType_items))
        for item in reversed(ConditionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ConditionRewardParcelType_vec = builder.EndVector(len(ConditionRewardParcelType_items))
    ConditionRewardParcelId_vec = 0
    if 'ConditionRewardParcelId' in data:
        ConditionRewardParcelId_items = data['ConditionRewardParcelId']
        EventContentMissionExcel.StartConditionRewardParcelIdVector(builder, len(ConditionRewardParcelId_items))
        for item in reversed(ConditionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionRewardParcelId_vec = builder.EndVector(len(ConditionRewardParcelId_items))
    ConditionRewardAmount_vec = 0
    if 'ConditionRewardAmount' in data:
        ConditionRewardAmount_items = data['ConditionRewardAmount']
        EventContentMissionExcel.StartConditionRewardAmountVector(builder, len(ConditionRewardAmount_items))
        for item in reversed(ConditionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        ConditionRewardAmount_vec = builder.EndVector(len(ConditionRewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    Category_val = convert_int(getattr(MissionCategory, data.get('Category', 0)), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    ResetType_val = convert_int(getattr(MissionResetType, data.get('ResetType', 0)), password)
    ToastDisplayType_val = convert_int(getattr(MissionToastDisplayConditionType, data.get('ToastDisplayType', 0)), password)
    ViewFlag_val = data.get('ViewFlag', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    AccountType_val = convert_int(getattr(AccountState, data.get('AccountType', 0)), password)
    AccountLevel_val = convert_long(data.get('AccountLevel', 0), password)
    ChallengeStageShortcut_val = convert_long(data.get('ChallengeStageShortcut', 0), password)
    CompleteConditionType_val = convert_int(getattr(MissionCompleteConditionType, data.get('CompleteConditionType', 0)), password)
    IsCompleteExtensionTime_val = data.get('IsCompleteExtensionTime', 0)
    CompleteConditionCount_val = convert_long(data.get('CompleteConditionCount', 0), password)
    CompleteConditionMissionCount_val = convert_long(data.get('CompleteConditionMissionCount', 0), password)
    EventContentMissionExcel.Start(builder)
    EventContentMissionExcel.AddId(builder, Id_val)
    EventContentMissionExcel.AddEventContentId(builder, EventContentId_val)
    EventContentMissionExcel.AddGroupId(builder, GroupId_val)
    EventContentMissionExcel.AddGroupName(builder, GroupName_off)
    EventContentMissionExcel.AddCategory(builder, Category_val)
    EventContentMissionExcel.AddDescription(builder, Description_val)
    EventContentMissionExcel.AddResetType(builder, ResetType_val)
    EventContentMissionExcel.AddToastDisplayType(builder, ToastDisplayType_val)
    EventContentMissionExcel.AddToastImagePath(builder, ToastImagePath_off)
    EventContentMissionExcel.AddViewFlag(builder, ViewFlag_val)
    EventContentMissionExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EventContentMissionExcel.AddPreMissionId(builder, PreMissionId_vec)
    EventContentMissionExcel.AddAccountType(builder, AccountType_val)
    EventContentMissionExcel.AddAccountLevel(builder, AccountLevel_val)
    EventContentMissionExcel.AddShortcutUI(builder, ShortcutUI_vec)
    EventContentMissionExcel.AddChallengeStageShortcut(builder, ChallengeStageShortcut_val)
    EventContentMissionExcel.AddCompleteConditionType(builder, CompleteConditionType_val)
    EventContentMissionExcel.AddIsCompleteExtensionTime(builder, IsCompleteExtensionTime_val)
    EventContentMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount_val)
    EventContentMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameter_vec)
    EventContentMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTag_vec)
    EventContentMissionExcel.AddRewardIcon(builder, RewardIcon_off)
    EventContentMissionExcel.AddCompleteConditionMissionId(builder, CompleteConditionMissionId_vec)
    EventContentMissionExcel.AddCompleteConditionMissionCount(builder, CompleteConditionMissionCount_val)
    EventContentMissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelType_vec)
    EventContentMissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelId_vec)
    EventContentMissionExcel.AddMissionRewardAmount(builder, MissionRewardAmount_vec)
    EventContentMissionExcel.AddConditionRewardParcelType(builder, ConditionRewardParcelType_vec)
    EventContentMissionExcel.AddConditionRewardParcelId(builder, ConditionRewardParcelId_vec)
    EventContentMissionExcel.AddConditionRewardAmount(builder, ConditionRewardAmount_vec)
    return EventContentMissionExcel.End(builder)

def pack_EventContentNotifyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentNotify") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    Id_val = convert_int(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    EventNotifyType_val = convert_int(getattr(EventNotifyType, data.get('EventNotifyType', 0)), password)
    EventTargetType_val = convert_int(getattr(EventTargetType, data.get('EventTargetType', 0)), password)
    ShortcutEventTargetType_val = convert_int(getattr(EventTargetType, data.get('ShortcutEventTargetType', 0)), password)
    IsShortcutEnable_val = data.get('IsShortcutEnable', 0)
    EventContentNotifyExcel.Start(builder)
    EventContentNotifyExcel.AddId(builder, Id_val)
    EventContentNotifyExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentNotifyExcel.AddIconPath(builder, IconPath_off)
    EventContentNotifyExcel.AddEventNotifyType(builder, EventNotifyType_val)
    EventContentNotifyExcel.AddEventTargetType(builder, EventTargetType_val)
    EventContentNotifyExcel.AddShortcutEventTargetType(builder, ShortcutEventTargetType_val)
    EventContentNotifyExcel.AddIsShortcutEnable(builder, IsShortcutEnable_val)
    return EventContentNotifyExcel.End(builder)

def pack_EventContentPlayGuideExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentPlayGuide") if encrypt else None
    GuideTitle_off = builder.CreateString(encrypt_string(data.get('GuideTitle', ''), password))
    GuideImagePath_off = builder.CreateString(encrypt_string(data.get('GuideImagePath', ''), password))
    GuideText_off = builder.CreateString(encrypt_string(data.get('GuideText', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    EventContentPlayGuideExcel.Start(builder)
    EventContentPlayGuideExcel.AddId(builder, Id_val)
    EventContentPlayGuideExcel.AddEventContentId(builder, EventContentId_val)
    EventContentPlayGuideExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EventContentPlayGuideExcel.AddGuideTitle(builder, GuideTitle_off)
    EventContentPlayGuideExcel.AddGuideImagePath(builder, GuideImagePath_off)
    EventContentPlayGuideExcel.AddGuideText(builder, GuideText_off)
    return EventContentPlayGuideExcel.End(builder)

def pack_EventContentScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentScenario") if encrypt else None
    RecollectionResource_off = builder.CreateString(encrypt_string(data.get('RecollectionResource', ''), password))
    ScenarioGroupId_vec = 0
    if 'ScenarioGroupId' in data:
        ScenarioGroupId_items = data['ScenarioGroupId']
        EventContentScenarioExcel.StartScenarioGroupIdVector(builder, len(ScenarioGroupId_items))
        for item in reversed(ScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ScenarioGroupId_vec = builder.EndVector(len(ScenarioGroupId_items))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentScenarioExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardId_vec = 0
    if 'RewardId' in data:
        RewardId_items = data['RewardId']
        EventContentScenarioExcel.StartRewardIdVector(builder, len(RewardId_items))
        for item in reversed(RewardId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardId_vec = builder.EndVector(len(RewardId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        EventContentScenarioExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ReplayDisplayGroup_val = convert_int(data.get('ReplayDisplayGroup', 0), password)
    Order_val = convert_long(data.get('Order', 0), password)
    RecollectionNumber_val = convert_long(data.get('RecollectionNumber', 0), password)
    IsRecollection_val = data.get('IsRecollection', 0)
    IsMeetup_val = data.get('IsMeetup', 0)
    IsOmnibus_val = data.get('IsOmnibus', 0)
    ScenarioConditionType_val = convert_int(getattr(EventContentScenarioConditionType, data.get('ScenarioConditionType', 0)), password)
    ConditionAmount_val = convert_long(data.get('ConditionAmount', 0), password)
    ConditionEventContentId_val = convert_long(data.get('ConditionEventContentId', 0), password)
    ClearedScenarioGroupId_val = convert_long(data.get('ClearedScenarioGroupId', 0), password)
    RecollectionSummaryLocalizeScenarioId_val = convert_uint(data.get('RecollectionSummaryLocalizeScenarioId', 0), password)
    IsRecollectionHorizon_val = data.get('IsRecollectionHorizon', 0)
    EventContentScenarioExcel.Start(builder)
    EventContentScenarioExcel.AddId(builder, Id_val)
    EventContentScenarioExcel.AddEventContentId(builder, EventContentId_val)
    EventContentScenarioExcel.AddReplayDisplayGroup(builder, ReplayDisplayGroup_val)
    EventContentScenarioExcel.AddOrder(builder, Order_val)
    EventContentScenarioExcel.AddRecollectionNumber(builder, RecollectionNumber_val)
    EventContentScenarioExcel.AddIsRecollection(builder, IsRecollection_val)
    EventContentScenarioExcel.AddIsMeetup(builder, IsMeetup_val)
    EventContentScenarioExcel.AddIsOmnibus(builder, IsOmnibus_val)
    EventContentScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId_vec)
    EventContentScenarioExcel.AddScenarioConditionType(builder, ScenarioConditionType_val)
    EventContentScenarioExcel.AddConditionAmount(builder, ConditionAmount_val)
    EventContentScenarioExcel.AddConditionEventContentId(builder, ConditionEventContentId_val)
    EventContentScenarioExcel.AddClearedScenarioGroupId(builder, ClearedScenarioGroupId_val)
    EventContentScenarioExcel.AddRecollectionSummaryLocalizeScenarioId(builder, RecollectionSummaryLocalizeScenarioId_val)
    EventContentScenarioExcel.AddRecollectionResource(builder, RecollectionResource_off)
    EventContentScenarioExcel.AddIsRecollectionHorizon(builder, IsRecollectionHorizon_val)
    EventContentScenarioExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentScenarioExcel.AddRewardId(builder, RewardId_vec)
    EventContentScenarioExcel.AddRewardAmount(builder, RewardAmount_vec)
    return EventContentScenarioExcel.End(builder)

def pack_EventContentSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentSeason") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    BeforehandExposedTime_off = builder.CreateString(encrypt_string(data.get('BeforehandExposedTime', ''), password))
    EventContentOpenTime_off = builder.CreateString(encrypt_string(data.get('EventContentOpenTime', ''), password))
    EventContentCloseNoteTime_off = builder.CreateString(encrypt_string(data.get('EventContentCloseNoteTime', ''), password))
    EventContentCloseTime_off = builder.CreateString(encrypt_string(data.get('EventContentCloseTime', ''), password))
    ExtensionTime_off = builder.CreateString(encrypt_string(data.get('ExtensionTime', ''), password))
    MainIconParcelPath_off = builder.CreateString(encrypt_string(data.get('MainIconParcelPath', ''), password))
    SubIconParcelPath_off = builder.CreateString(encrypt_string(data.get('SubIconParcelPath', ''), password))
    BeforehandBgImagePath_off = builder.CreateString(encrypt_string(data.get('BeforehandBgImagePath', ''), password))
    MainBannerImagePath_off = builder.CreateString(encrypt_string(data.get('MainBannerImagePath', ''), password))
    MainBgImagePath_off = builder.CreateString(encrypt_string(data.get('MainBgImagePath', ''), password))
    ShiftMainBgImagePath_off = builder.CreateString(encrypt_string(data.get('ShiftMainBgImagePath', ''), password))
    MinigameLobbyPrefabName_off = builder.CreateString(encrypt_string(data.get('MinigameLobbyPrefabName', ''), password))
    MinigameVictoryPrefabName_off = builder.CreateString(encrypt_string(data.get('MinigameVictoryPrefabName', ''), password))
    MinigameMissionBgPrefabName_off = builder.CreateString(encrypt_string(data.get('MinigameMissionBgPrefabName', ''), password))
    MinigameMissionBgImagePath_off = builder.CreateString(encrypt_string(data.get('MinigameMissionBgImagePath', ''), password))
    CardBgImagePath_off = builder.CreateString(encrypt_string(data.get('CardBgImagePath', ''), password))
    BeforehandScenarioGroupId_vec = 0
    if 'BeforehandScenarioGroupId' in data:
        BeforehandScenarioGroupId_items = data['BeforehandScenarioGroupId']
        EventContentSeasonExcel.StartBeforehandScenarioGroupIdVector(builder, len(BeforehandScenarioGroupId_items))
        for item in reversed(BeforehandScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        BeforehandScenarioGroupId_vec = builder.EndVector(len(BeforehandScenarioGroupId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    OriginalEventContentId_val = convert_long(data.get('OriginalEventContentId', 0), password)
    IsReturn_val = data.get('IsReturn', 0)
    EventContentType_val = convert_int(getattr(EventContentType, data.get('EventContentType', 0)), password)
    OpenConditionContent_val = convert_int(getattr(OpenConditionContent, data.get('OpenConditionContent', 0)), password)
    EventDisplay_val = data.get('EventDisplay', 0)
    IconOrder_val = convert_int(data.get('IconOrder', 0), password)
    SubEventType_val = convert_int(getattr(SubEventType, data.get('SubEventType', 0)), password)
    SubEvent_val = data.get('SubEvent', 0)
    EventItemId_val = convert_long(data.get('EventItemId', 0), password)
    MainEventId_val = convert_long(data.get('MainEventId', 0), password)
    EventChangeOpenCondition_val = convert_long(data.get('EventChangeOpenCondition', 0), password)
    MinigamePrologScenarioGroupId_val = convert_long(data.get('MinigamePrologScenarioGroupId', 0), password)
    ShiftTriggerStageId_val = convert_long(data.get('ShiftTriggerStageId', 0), password)
    EventAssist_val = data.get('EventAssist', 0)
    EventContentReleaseType_val = convert_int(getattr(EventContentReleaseType, data.get('EventContentReleaseType', 0)), password)
    EventContentStageRewardIdPermanent_val = convert_long(data.get('EventContentStageRewardIdPermanent', 0), password)
    RewardTagPermanent_val = convert_int(getattr(RewardTag, data.get('RewardTagPermanent', 0)), password)
    MiniEventShortCutScenarioModeId_val = convert_long(data.get('MiniEventShortCutScenarioModeId', 0), password)
    ScenarioContentCollectionGroupId_val = convert_long(data.get('ScenarioContentCollectionGroupId', 0), password)
    EventContentSeasonExcel.Start(builder)
    EventContentSeasonExcel.AddEventContentId(builder, EventContentId_val)
    EventContentSeasonExcel.AddOriginalEventContentId(builder, OriginalEventContentId_val)
    EventContentSeasonExcel.AddIsReturn(builder, IsReturn_val)
    EventContentSeasonExcel.AddName(builder, Name_off)
    EventContentSeasonExcel.AddEventContentType(builder, EventContentType_val)
    EventContentSeasonExcel.AddOpenConditionContent(builder, OpenConditionContent_val)
    EventContentSeasonExcel.AddEventDisplay(builder, EventDisplay_val)
    EventContentSeasonExcel.AddIconOrder(builder, IconOrder_val)
    EventContentSeasonExcel.AddSubEventType(builder, SubEventType_val)
    EventContentSeasonExcel.AddSubEvent(builder, SubEvent_val)
    EventContentSeasonExcel.AddEventItemId(builder, EventItemId_val)
    EventContentSeasonExcel.AddMainEventId(builder, MainEventId_val)
    EventContentSeasonExcel.AddEventChangeOpenCondition(builder, EventChangeOpenCondition_val)
    EventContentSeasonExcel.AddBeforehandExposedTime(builder, BeforehandExposedTime_off)
    EventContentSeasonExcel.AddEventContentOpenTime(builder, EventContentOpenTime_off)
    EventContentSeasonExcel.AddEventContentCloseNoteTime(builder, EventContentCloseNoteTime_off)
    EventContentSeasonExcel.AddEventContentCloseTime(builder, EventContentCloseTime_off)
    EventContentSeasonExcel.AddExtensionTime(builder, ExtensionTime_off)
    EventContentSeasonExcel.AddMainIconParcelPath(builder, MainIconParcelPath_off)
    EventContentSeasonExcel.AddSubIconParcelPath(builder, SubIconParcelPath_off)
    EventContentSeasonExcel.AddBeforehandBgImagePath(builder, BeforehandBgImagePath_off)
    EventContentSeasonExcel.AddMinigamePrologScenarioGroupId(builder, MinigamePrologScenarioGroupId_val)
    EventContentSeasonExcel.AddBeforehandScenarioGroupId(builder, BeforehandScenarioGroupId_vec)
    EventContentSeasonExcel.AddMainBannerImagePath(builder, MainBannerImagePath_off)
    EventContentSeasonExcel.AddMainBgImagePath(builder, MainBgImagePath_off)
    EventContentSeasonExcel.AddShiftTriggerStageId(builder, ShiftTriggerStageId_val)
    EventContentSeasonExcel.AddShiftMainBgImagePath(builder, ShiftMainBgImagePath_off)
    EventContentSeasonExcel.AddMinigameLobbyPrefabName(builder, MinigameLobbyPrefabName_off)
    EventContentSeasonExcel.AddMinigameVictoryPrefabName(builder, MinigameVictoryPrefabName_off)
    EventContentSeasonExcel.AddMinigameMissionBgPrefabName(builder, MinigameMissionBgPrefabName_off)
    EventContentSeasonExcel.AddMinigameMissionBgImagePath(builder, MinigameMissionBgImagePath_off)
    EventContentSeasonExcel.AddCardBgImagePath(builder, CardBgImagePath_off)
    EventContentSeasonExcel.AddEventAssist(builder, EventAssist_val)
    EventContentSeasonExcel.AddEventContentReleaseType(builder, EventContentReleaseType_val)
    EventContentSeasonExcel.AddEventContentStageRewardIdPermanent(builder, EventContentStageRewardIdPermanent_val)
    EventContentSeasonExcel.AddRewardTagPermanent(builder, RewardTagPermanent_val)
    EventContentSeasonExcel.AddMiniEventShortCutScenarioModeId(builder, MiniEventShortCutScenarioModeId_val)
    EventContentSeasonExcel.AddScenarioContentCollectionGroupId(builder, ScenarioContentCollectionGroupId_val)
    return EventContentSeasonExcel.End(builder)

def pack_EventContentShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentShop") if encrypt else None
    SalePeriodFrom_off = builder.CreateString(encrypt_string(data.get('SalePeriodFrom', ''), password))
    SalePeriodTo_off = builder.CreateString(encrypt_string(data.get('SalePeriodTo', ''), password))
    BuyReportEventName_off = builder.CreateString(encrypt_string(data.get('BuyReportEventName', ''), password))
    GoodsId_vec = 0
    if 'GoodsId' in data:
        GoodsId_items = data['GoodsId']
        EventContentShopExcel.StartGoodsIdVector(builder, len(GoodsId_items))
        for item in reversed(GoodsId_items):
            builder.PrependInt64(convert_long(item, password))
        GoodsId_vec = builder.EndVector(len(GoodsId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    PurchaseCooltimeMin_val = convert_long(data.get('PurchaseCooltimeMin', 0), password)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    PurchaseCountResetType_val = convert_int(getattr(PurchaseCountResetType, data.get('PurchaseCountResetType', 0)), password)
    RestrictBuyWhenInventoryFull_val = data.get('RestrictBuyWhenInventoryFull', 0)
    EventContentShopExcel.Start(builder)
    EventContentShopExcel.AddEventContentId(builder, EventContentId_val)
    EventContentShopExcel.AddId(builder, Id_val)
    EventContentShopExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentShopExcel.AddCategoryType(builder, CategoryType_val)
    EventContentShopExcel.AddIsLegacy(builder, IsLegacy_val)
    EventContentShopExcel.AddGoodsId(builder, GoodsId_vec)
    EventContentShopExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EventContentShopExcel.AddSalePeriodFrom(builder, SalePeriodFrom_off)
    EventContentShopExcel.AddSalePeriodTo(builder, SalePeriodTo_off)
    EventContentShopExcel.AddPurchaseCooltimeMin(builder, PurchaseCooltimeMin_val)
    EventContentShopExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    EventContentShopExcel.AddPurchaseCountResetType(builder, PurchaseCountResetType_val)
    EventContentShopExcel.AddBuyReportEventName(builder, BuyReportEventName_off)
    EventContentShopExcel.AddRestrictBuyWhenInventoryFull(builder, RestrictBuyWhenInventoryFull_val)
    return EventContentShopExcel.End(builder)

def pack_EventContentShopInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentShopInfo") if encrypt else None
    OpenPeriodFrom_off = builder.CreateString(encrypt_string(data.get('OpenPeriodFrom', ''), password))
    OpenPeriodTo_off = builder.CreateString(encrypt_string(data.get('OpenPeriodTo', ''), password))
    ShopProductUpdateDate_off = builder.CreateString(encrypt_string(data.get('ShopProductUpdateDate', ''), password))
    CostParcelType_vec = 0
    if 'CostParcelType' in data:
        CostParcelType_items = data['CostParcelType']
        EventContentShopInfoExcel.StartCostParcelTypeVector(builder, len(CostParcelType_items))
        for item in reversed(CostParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        CostParcelType_vec = builder.EndVector(len(CostParcelType_items))
    CostParcelId_vec = 0
    if 'CostParcelId' in data:
        CostParcelId_items = data['CostParcelId']
        EventContentShopInfoExcel.StartCostParcelIdVector(builder, len(CostParcelId_items))
        for item in reversed(CostParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        CostParcelId_vec = builder.EndVector(len(CostParcelId_items))
    GoodsId_vec = 0
    if 'GoodsId' in data:
        GoodsId_items = data['GoodsId']
        EventContentShopInfoExcel.StartGoodsIdVector(builder, len(GoodsId_items))
        for item in reversed(GoodsId_items):
            builder.PrependInt64(convert_long(item, password))
        GoodsId_vec = builder.EndVector(len(GoodsId_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    LocalizeCode_val = convert_uint(data.get('LocalizeCode', 0), password)
    IsRefresh_val = data.get('IsRefresh', 0)
    IsSoldOutDimmed_val = data.get('IsSoldOutDimmed', 0)
    AutoRefreshCoolTime_val = convert_long(data.get('AutoRefreshCoolTime', 0), password)
    RefreshAbleCount_val = convert_long(data.get('RefreshAbleCount', 0), password)
    EventContentShopInfoExcel.Start(builder)
    EventContentShopInfoExcel.AddEventContentId(builder, EventContentId_val)
    EventContentShopInfoExcel.AddCategoryType(builder, CategoryType_val)
    EventContentShopInfoExcel.AddLocalizeCode(builder, LocalizeCode_val)
    EventContentShopInfoExcel.AddCostParcelType(builder, CostParcelType_vec)
    EventContentShopInfoExcel.AddCostParcelId(builder, CostParcelId_vec)
    EventContentShopInfoExcel.AddIsRefresh(builder, IsRefresh_val)
    EventContentShopInfoExcel.AddIsSoldOutDimmed(builder, IsSoldOutDimmed_val)
    EventContentShopInfoExcel.AddAutoRefreshCoolTime(builder, AutoRefreshCoolTime_val)
    EventContentShopInfoExcel.AddRefreshAbleCount(builder, RefreshAbleCount_val)
    EventContentShopInfoExcel.AddGoodsId(builder, GoodsId_vec)
    EventContentShopInfoExcel.AddOpenPeriodFrom(builder, OpenPeriodFrom_off)
    EventContentShopInfoExcel.AddOpenPeriodTo(builder, OpenPeriodTo_off)
    EventContentShopInfoExcel.AddShopProductUpdateDate(builder, ShopProductUpdateDate_off)
    return EventContentShopInfoExcel.End(builder)

def pack_EventContentShopRefreshExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentShopRefresh") if encrypt else None
    BuyReportEventName_off = builder.CreateString(encrypt_string(data.get('BuyReportEventName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    GoodsId_val = convert_long(data.get('GoodsId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    RefreshGroup_val = convert_int(data.get('RefreshGroup', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    EventContentShopRefreshExcel.Start(builder)
    EventContentShopRefreshExcel.AddEventContentId(builder, EventContentId_val)
    EventContentShopRefreshExcel.AddId(builder, Id_val)
    EventContentShopRefreshExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentShopRefreshExcel.AddIsLegacy(builder, IsLegacy_val)
    EventContentShopRefreshExcel.AddGoodsId(builder, GoodsId_val)
    EventContentShopRefreshExcel.AddDisplayOrder(builder, DisplayOrder_val)
    EventContentShopRefreshExcel.AddCategoryType(builder, CategoryType_val)
    EventContentShopRefreshExcel.AddRefreshGroup(builder, RefreshGroup_val)
    EventContentShopRefreshExcel.AddProb(builder, Prob_val)
    EventContentShopRefreshExcel.AddBuyReportEventName(builder, BuyReportEventName_off)
    return EventContentShopRefreshExcel.End(builder)

def pack_EventContentSpecialOperationsExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentSpecialOperations") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    PointItemId_val = convert_long(data.get('PointItemId', 0), password)
    EventContentSpecialOperationsExcel.Start(builder)
    EventContentSpecialOperationsExcel.AddEventContentId(builder, EventContentId_val)
    EventContentSpecialOperationsExcel.AddPointItemId(builder, PointItemId_val)
    return EventContentSpecialOperationsExcel.End(builder)

def pack_EventContentSpineDialogOffsetExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentSpineDialogOffset") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentType_val = convert_int(getattr(EventContentType, data.get('EventContentType', 0)), password)
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    SpineOffsetX_val = encrypt_float(data.get('SpineOffsetX', 0), password)
    SpineOffsetY_val = encrypt_float(data.get('SpineOffsetY', 0), password)
    DialogOffsetX_val = encrypt_float(data.get('DialogOffsetX', 0), password)
    DialogOffsetY_val = encrypt_float(data.get('DialogOffsetY', 0), password)
    EventContentSpineDialogOffsetExcel.Start(builder)
    EventContentSpineDialogOffsetExcel.AddEventContentId(builder, EventContentId_val)
    EventContentSpineDialogOffsetExcel.AddEventContentType(builder, EventContentType_val)
    EventContentSpineDialogOffsetExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    EventContentSpineDialogOffsetExcel.AddSpineOffsetX(builder, SpineOffsetX_val)
    EventContentSpineDialogOffsetExcel.AddSpineOffsetY(builder, SpineOffsetY_val)
    EventContentSpineDialogOffsetExcel.AddDialogOffsetX(builder, DialogOffsetX_val)
    EventContentSpineDialogOffsetExcel.AddDialogOffsetY(builder, DialogOffsetY_val)
    return EventContentSpineDialogOffsetExcel.End(builder)

def pack_EventContentSpoilerPopupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentSpoilerPopup") if encrypt else None
    SpoilerPopupTitle_off = builder.CreateString(encrypt_string(data.get('SpoilerPopupTitle', ''), password))
    SpoilerPopupDescription_off = builder.CreateString(encrypt_string(data.get('SpoilerPopupDescription', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    IsWarningPopUp_val = data.get('IsWarningPopUp', 0)
    ConditionScenarioModeId_val = convert_long(data.get('ConditionScenarioModeId', 0), password)
    EventContentSpoilerPopupExcel.Start(builder)
    EventContentSpoilerPopupExcel.AddEventContentId(builder, EventContentId_val)
    EventContentSpoilerPopupExcel.AddSpoilerPopupTitle(builder, SpoilerPopupTitle_off)
    EventContentSpoilerPopupExcel.AddSpoilerPopupDescription(builder, SpoilerPopupDescription_off)
    EventContentSpoilerPopupExcel.AddIsWarningPopUp(builder, IsWarningPopUp_val)
    EventContentSpoilerPopupExcel.AddConditionScenarioModeId(builder, ConditionScenarioModeId_val)
    return EventContentSpoilerPopupExcel.End(builder)

def pack_EventContentStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StageNumber_off = builder.CreateString(encrypt_string(data.get('StageNumber', ''), password))
    StrategyMap_off = builder.CreateString(encrypt_string(data.get('StrategyMap', ''), password))
    StrategyMapBG_off = builder.CreateString(encrypt_string(data.get('StrategyMapBG', ''), password))
    BgmId_off = builder.CreateString(encrypt_string(data.get('BgmId', ''), password))
    EnterScenarioGroupId_vec = 0
    if 'EnterScenarioGroupId' in data:
        EnterScenarioGroupId_items = data['EnterScenarioGroupId']
        EventContentStageExcel.StartEnterScenarioGroupIdVector(builder, len(EnterScenarioGroupId_items))
        for item in reversed(EnterScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnterScenarioGroupId_vec = builder.EndVector(len(EnterScenarioGroupId_items))
    ClearScenarioGroupId_vec = 0
    if 'ClearScenarioGroupId' in data:
        ClearScenarioGroupId_items = data['ClearScenarioGroupId']
        EventContentStageExcel.StartClearScenarioGroupIdVector(builder, len(ClearScenarioGroupId_items))
        for item in reversed(ClearScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearScenarioGroupId_vec = builder.EndVector(len(ClearScenarioGroupId_items))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        EventContentStageExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        EventContentStageExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    StageDifficulty_val = convert_int(getattr(StageDifficulty, data.get('StageDifficulty', 0)), password)
    StageDisplay_val = convert_int(data.get('StageDisplay', 0), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    OpenDate_val = convert_long(data.get('OpenDate', 0), password)
    OpenEventPoint_val = convert_long(data.get('OpenEventPoint', 0), password)
    OpenConditionScenarioPermanentSubEventId_val = convert_long(data.get('OpenConditionScenarioPermanentSubEventId', 0), password)
    PrevStageSubEventId_val = convert_long(data.get('PrevStageSubEventId', 0), password)
    OpenConditionScenarioId_val = convert_long(data.get('OpenConditionScenarioId', 0), password)
    OpenConditionContentType_val = convert_int(getattr(EventContentType, data.get('OpenConditionContentType', 0)), password)
    OpenConditionContentId_val = convert_long(data.get('OpenConditionContentId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    StageEnterEchelonCount_val = convert_int(data.get('StageEnterEchelonCount', 0), password)
    StarConditionTacticRankSCount_val = convert_long(data.get('StarConditionTacticRankSCount', 0), password)
    StarConditionTurnCount_val = convert_long(data.get('StarConditionTurnCount', 0), password)
    EventContentStageRewardId_val = convert_long(data.get('EventContentStageRewardId', 0), password)
    MaxTurn_val = convert_int(data.get('MaxTurn', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    StrategyEnvironment_val = convert_int(getattr(StrategyEnvironment, data.get('StrategyEnvironment', 0)), password)
    GroundID_val = convert_long(data.get('GroundID', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    InstantClear_val = data.get('InstantClear', 0)
    BuffContentId_val = convert_long(data.get('BuffContentId', 0), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    ChallengeDisplay_val = data.get('ChallengeDisplay', 0)
    IsDefeatBattle_val = data.get('IsDefeatBattle', 0)
    StageHint_val = convert_uint(data.get('StageHint', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    EventContentStageExcel.Start(builder)
    EventContentStageExcel.AddId(builder, Id_val)
    EventContentStageExcel.AddName(builder, Name_off)
    EventContentStageExcel.AddEventContentId(builder, EventContentId_val)
    EventContentStageExcel.AddStageDifficulty(builder, StageDifficulty_val)
    EventContentStageExcel.AddStageNumber(builder, StageNumber_off)
    EventContentStageExcel.AddStageDisplay(builder, StageDisplay_val)
    EventContentStageExcel.AddPrevStageId(builder, PrevStageId_val)
    EventContentStageExcel.AddOpenDate(builder, OpenDate_val)
    EventContentStageExcel.AddOpenEventPoint(builder, OpenEventPoint_val)
    EventContentStageExcel.AddOpenConditionScenarioPermanentSubEventId(builder, OpenConditionScenarioPermanentSubEventId_val)
    EventContentStageExcel.AddPrevStageSubEventId(builder, PrevStageSubEventId_val)
    EventContentStageExcel.AddOpenConditionScenarioId(builder, OpenConditionScenarioId_val)
    EventContentStageExcel.AddOpenConditionContentType(builder, OpenConditionContentType_val)
    EventContentStageExcel.AddOpenConditionContentId(builder, OpenConditionContentId_val)
    EventContentStageExcel.AddBattleDuration(builder, BattleDuration_val)
    EventContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    EventContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    EventContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    EventContentStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount_val)
    EventContentStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount_val)
    EventContentStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount_val)
    EventContentStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_vec)
    EventContentStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_vec)
    EventContentStageExcel.AddStrategyMap(builder, StrategyMap_off)
    EventContentStageExcel.AddStrategyMapBG(builder, StrategyMapBG_off)
    EventContentStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId_val)
    EventContentStageExcel.AddMaxTurn(builder, MaxTurn_val)
    EventContentStageExcel.AddStageTopography(builder, StageTopography_val)
    EventContentStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    EventContentStageExcel.AddBgmId(builder, BgmId_off)
    EventContentStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment_val)
    EventContentStageExcel.AddGroundID(builder, GroundID_val)
    EventContentStageExcel.AddContentType(builder, ContentType_val)
    EventContentStageExcel.AddBGMId(builder, BGMId_val)
    EventContentStageExcel.AddInstantClear(builder, InstantClear_val)
    EventContentStageExcel.AddBuffContentId(builder, BuffContentId_val)
    EventContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    EventContentStageExcel.AddChallengeDisplay(builder, ChallengeDisplay_val)
    EventContentStageExcel.AddStarGoal(builder, StarGoal_vec)
    EventContentStageExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    EventContentStageExcel.AddIsDefeatBattle(builder, IsDefeatBattle_val)
    EventContentStageExcel.AddStageHint(builder, StageHint_val)
    EventContentStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return EventContentStageExcel.End(builder)

def pack_EventContentStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    RewardAmount_val = convert_int(data.get('RewardAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    EventContentStageRewardExcel.Start(builder)
    EventContentStageRewardExcel.AddGroupId(builder, GroupId_val)
    EventContentStageRewardExcel.AddRewardTag(builder, RewardTag_val)
    EventContentStageRewardExcel.AddRewardProb(builder, RewardProb_val)
    EventContentStageRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    EventContentStageRewardExcel.AddRewardId(builder, RewardId_val)
    EventContentStageRewardExcel.AddRewardAmount(builder, RewardAmount_val)
    EventContentStageRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return EventContentStageRewardExcel.End(builder)

def pack_EventContentStageTotalRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentStageTotalReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentStageTotalRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentStageTotalRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentStageTotalRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    RequiredEventItemAmount_val = convert_long(data.get('RequiredEventItemAmount', 0), password)
    EventContentStageTotalRewardExcel.Start(builder)
    EventContentStageTotalRewardExcel.AddId(builder, Id_val)
    EventContentStageTotalRewardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentStageTotalRewardExcel.AddRequiredEventItemAmount(builder, RequiredEventItemAmount_val)
    EventContentStageTotalRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentStageTotalRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentStageTotalRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentStageTotalRewardExcel.End(builder)

def pack_EventContentTreasureCellRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentTreasureCellReward") if encrypt else None
    LocalizeCodeID_off = builder.CreateString(encrypt_string(data.get('LocalizeCodeID', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentTreasureCellRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentTreasureCellRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentTreasureCellRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentTreasureCellRewardExcel.Start(builder)
    EventContentTreasureCellRewardExcel.AddId(builder, Id_val)
    EventContentTreasureCellRewardExcel.AddLocalizeCodeID(builder, LocalizeCodeID_off)
    EventContentTreasureCellRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentTreasureCellRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentTreasureCellRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return EventContentTreasureCellRewardExcel.End(builder)

def pack_EventContentTreasureExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentTreasure") if encrypt else None
    TitleLocalize_off = builder.CreateString(encrypt_string(data.get('TitleLocalize', ''), password))
    UsePrefabName_off = builder.CreateString(encrypt_string(data.get('UsePrefabName', ''), password))
    TreasureBGImagePath_off = builder.CreateString(encrypt_string(data.get('TreasureBGImagePath', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    LoopRound_val = convert_int(data.get('LoopRound', 0), password)
    EventContentTreasureExcel.Start(builder)
    EventContentTreasureExcel.AddEventContentId(builder, EventContentId_val)
    EventContentTreasureExcel.AddTitleLocalize(builder, TitleLocalize_off)
    EventContentTreasureExcel.AddLoopRound(builder, LoopRound_val)
    EventContentTreasureExcel.AddUsePrefabName(builder, UsePrefabName_off)
    EventContentTreasureExcel.AddTreasureBGImagePath(builder, TreasureBGImagePath_off)
    return EventContentTreasureExcel.End(builder)

def pack_EventContentTreasureRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentTreasureReward") if encrypt else None
    LocalizeCodeID_off = builder.CreateString(encrypt_string(data.get('LocalizeCodeID', ''), password))
    CellUnderImagePath_off = builder.CreateString(encrypt_string(data.get('CellUnderImagePath', ''), password))
    TreasureSmallImagePath_off = builder.CreateString(encrypt_string(data.get('TreasureSmallImagePath', ''), password))
    TreasureSizeIconPath_off = builder.CreateString(encrypt_string(data.get('TreasureSizeIconPath', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        EventContentTreasureRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        EventContentTreasureRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        EventContentTreasureRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CellUnderImageWidth_val = convert_int(data.get('CellUnderImageWidth', 0), password)
    CellUnderImageHeight_val = convert_int(data.get('CellUnderImageHeight', 0), password)
    HiddenImage_val = data.get('HiddenImage', 0)
    EventContentTreasureRewardExcel.Start(builder)
    EventContentTreasureRewardExcel.AddId(builder, Id_val)
    EventContentTreasureRewardExcel.AddLocalizeCodeID(builder, LocalizeCodeID_off)
    EventContentTreasureRewardExcel.AddCellUnderImageWidth(builder, CellUnderImageWidth_val)
    EventContentTreasureRewardExcel.AddCellUnderImageHeight(builder, CellUnderImageHeight_val)
    EventContentTreasureRewardExcel.AddHiddenImage(builder, HiddenImage_val)
    EventContentTreasureRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    EventContentTreasureRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    EventContentTreasureRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    EventContentTreasureRewardExcel.AddCellUnderImagePath(builder, CellUnderImagePath_off)
    EventContentTreasureRewardExcel.AddTreasureSmallImagePath(builder, TreasureSmallImagePath_off)
    EventContentTreasureRewardExcel.AddTreasureSizeIconPath(builder, TreasureSizeIconPath_off)
    return EventContentTreasureRewardExcel.End(builder)

def pack_EventContentTreasureRoundExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentTreasureRound") if encrypt else None
    TreasureCellImagePath_off = builder.CreateString(encrypt_string(data.get('TreasureCellImagePath', ''), password))
    TreasureRoundSize_vec = 0
    if 'TreasureRoundSize' in data:
        TreasureRoundSize_items = data['TreasureRoundSize']
        EventContentTreasureRoundExcel.StartTreasureRoundSizeVector(builder, len(TreasureRoundSize_items))
        for item in reversed(TreasureRoundSize_items):
            builder.PrependInt32(convert_int(item, password))
        TreasureRoundSize_vec = builder.EndVector(len(TreasureRoundSize_items))
    RewardID_vec = 0
    if 'RewardID' in data:
        RewardID_items = data['RewardID']
        EventContentTreasureRoundExcel.StartRewardIDVector(builder, len(RewardID_items))
        for item in reversed(RewardID_items):
            builder.PrependInt64(convert_long(item, password))
        RewardID_vec = builder.EndVector(len(RewardID_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        EventContentTreasureRoundExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    TreasureRound_val = convert_int(data.get('TreasureRound', 0), password)
    CellVisualSortUnstructed_val = data.get('CellVisualSortUnstructed', 0)
    CellCheckGoodsId_val = convert_long(data.get('CellCheckGoodsId', 0), password)
    CellRewardId_val = convert_long(data.get('CellRewardId', 0), password)
    EventContentTreasureRoundExcel.Start(builder)
    EventContentTreasureRoundExcel.AddEventContentId(builder, EventContentId_val)
    EventContentTreasureRoundExcel.AddTreasureRound(builder, TreasureRound_val)
    EventContentTreasureRoundExcel.AddTreasureRoundSize(builder, TreasureRoundSize_vec)
    EventContentTreasureRoundExcel.AddCellVisualSortUnstructed(builder, CellVisualSortUnstructed_val)
    EventContentTreasureRoundExcel.AddCellCheckGoodsId(builder, CellCheckGoodsId_val)
    EventContentTreasureRoundExcel.AddCellRewardId(builder, CellRewardId_val)
    EventContentTreasureRoundExcel.AddRewardID(builder, RewardID_vec)
    EventContentTreasureRoundExcel.AddRewardAmount(builder, RewardAmount_vec)
    EventContentTreasureRoundExcel.AddTreasureCellImagePath(builder, TreasureCellImagePath_off)
    return EventContentTreasureRoundExcel.End(builder)

def pack_EventContentZoneExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentZone") if encrypt else None
    StudentVisitProb_vec = 0
    if 'StudentVisitProb' in data:
        StudentVisitProb_items = data['StudentVisitProb']
        EventContentZoneExcel.StartStudentVisitProbVector(builder, len(StudentVisitProb_items))
        for item in reversed(StudentVisitProb_items):
            builder.PrependInt64(convert_long(item, password))
        StudentVisitProb_vec = builder.EndVector(len(StudentVisitProb_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        EventContentZoneExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    WhiteListTags_vec = 0
    if 'WhiteListTags' in data:
        WhiteListTags_items = data['WhiteListTags']
        EventContentZoneExcel.StartWhiteListTagsVector(builder, len(WhiteListTags_items))
        for item in reversed(WhiteListTags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        WhiteListTags_vec = builder.EndVector(len(WhiteListTags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    OriginalZoneId_val = convert_long(data.get('OriginalZoneId', 0), password)
    LocationId_val = convert_long(data.get('LocationId', 0), password)
    LocationRank_val = convert_long(data.get('LocationRank', 0), password)
    EventPointForLocationRank_val = convert_long(data.get('EventPointForLocationRank', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    RewardGroupId_val = convert_long(data.get('RewardGroupId', 0), password)
    EventContentZoneExcel.Start(builder)
    EventContentZoneExcel.AddId(builder, Id_val)
    EventContentZoneExcel.AddOriginalZoneId(builder, OriginalZoneId_val)
    EventContentZoneExcel.AddLocationId(builder, LocationId_val)
    EventContentZoneExcel.AddLocationRank(builder, LocationRank_val)
    EventContentZoneExcel.AddEventPointForLocationRank(builder, EventPointForLocationRank_val)
    EventContentZoneExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    EventContentZoneExcel.AddStudentVisitProb(builder, StudentVisitProb_vec)
    EventContentZoneExcel.AddRewardGroupId(builder, RewardGroupId_val)
    EventContentZoneExcel.AddTags(builder, Tags_vec)
    EventContentZoneExcel.AddWhiteListTags(builder, WhiteListTags_vec)
    return EventContentZoneExcel.End(builder)

def pack_EventContentZoneVisitRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("EventContentZoneVisitReward") if encrypt else None
    DevName_off = builder.CreateString(encrypt_string(data.get('DevName', ''), password))
    CharacterDevName_off = builder.CreateString(encrypt_string(data.get('CharacterDevName', ''), password))
    VisitRewardParcelType_vec = 0
    if 'VisitRewardParcelType' in data:
        VisitRewardParcelType_items = data['VisitRewardParcelType']
        EventContentZoneVisitRewardExcel.StartVisitRewardParcelTypeVector(builder, len(VisitRewardParcelType_items))
        for item in reversed(VisitRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        VisitRewardParcelType_vec = builder.EndVector(len(VisitRewardParcelType_items))
    VisitRewardParcelId_vec = 0
    if 'VisitRewardParcelId' in data:
        VisitRewardParcelId_items = data['VisitRewardParcelId']
        EventContentZoneVisitRewardExcel.StartVisitRewardParcelIdVector(builder, len(VisitRewardParcelId_items))
        for item in reversed(VisitRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        VisitRewardParcelId_vec = builder.EndVector(len(VisitRewardParcelId_items))
    VisitRewardAmount_vec = 0
    if 'VisitRewardAmount' in data:
        VisitRewardAmount_items = data['VisitRewardAmount']
        EventContentZoneVisitRewardExcel.StartVisitRewardAmountVector(builder, len(VisitRewardAmount_items))
        for item in reversed(VisitRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        VisitRewardAmount_vec = builder.EndVector(len(VisitRewardAmount_items))
    VisitRewardProb_vec = 0
    if 'VisitRewardProb' in data:
        VisitRewardProb_items = data['VisitRewardProb']
        EventContentZoneVisitRewardExcel.StartVisitRewardProbVector(builder, len(VisitRewardProb_items))
        for item in reversed(VisitRewardProb_items):
            builder.PrependInt64(convert_long(item, password))
        VisitRewardProb_vec = builder.EndVector(len(VisitRewardProb_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentLocationId_val = convert_long(data.get('EventContentLocationId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    EventContentZoneVisitRewardExcel.Start(builder)
    EventContentZoneVisitRewardExcel.AddEventContentId(builder, EventContentId_val)
    EventContentZoneVisitRewardExcel.AddEventContentLocationId(builder, EventContentLocationId_val)
    EventContentZoneVisitRewardExcel.AddDevName(builder, DevName_off)
    EventContentZoneVisitRewardExcel.AddCharacterId(builder, CharacterId_val)
    EventContentZoneVisitRewardExcel.AddCharacterDevName(builder, CharacterDevName_off)
    EventContentZoneVisitRewardExcel.AddVisitRewardParcelType(builder, VisitRewardParcelType_vec)
    EventContentZoneVisitRewardExcel.AddVisitRewardParcelId(builder, VisitRewardParcelId_vec)
    EventContentZoneVisitRewardExcel.AddVisitRewardAmount(builder, VisitRewardAmount_vec)
    EventContentZoneVisitRewardExcel.AddVisitRewardProb(builder, VisitRewardProb_vec)
    return EventContentZoneVisitRewardExcel.End(builder)

def pack_FarmingDungeonLocationManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FarmingDungeonLocationManage") if encrypt else None
    OpenStartDateTime_off = builder.CreateString(encrypt_string(data.get('OpenStartDateTime', ''), password))
    OpenEndDateTime_off = builder.CreateString(encrypt_string(data.get('OpenEndDateTime', ''), password))
    LocationButtonImagePath_off = builder.CreateString(encrypt_string(data.get('LocationButtonImagePath', ''), password))
    FarmingDungeonLocationId_val = convert_long(data.get('FarmingDungeonLocationId', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    WeekDungeonType_val = convert_int(getattr(WeekDungeonType, data.get('WeekDungeonType', 0)), password)
    SchoolDungeonType_val = convert_int(getattr(SchoolDungeonType, data.get('SchoolDungeonType', 0)), password)
    Order_val = convert_long(data.get('Order', 0), password)
    LocalizeCodeTitle_val = convert_uint(data.get('LocalizeCodeTitle', 0), password)
    LocalizeCodeInfo_val = convert_uint(data.get('LocalizeCodeInfo', 0), password)
    FarmingDungeonLocationManageExcel.Start(builder)
    FarmingDungeonLocationManageExcel.AddFarmingDungeonLocationId(builder, FarmingDungeonLocationId_val)
    FarmingDungeonLocationManageExcel.AddContentType(builder, ContentType_val)
    FarmingDungeonLocationManageExcel.AddWeekDungeonType(builder, WeekDungeonType_val)
    FarmingDungeonLocationManageExcel.AddSchoolDungeonType(builder, SchoolDungeonType_val)
    FarmingDungeonLocationManageExcel.AddOrder(builder, Order_val)
    FarmingDungeonLocationManageExcel.AddOpenStartDateTime(builder, OpenStartDateTime_off)
    FarmingDungeonLocationManageExcel.AddOpenEndDateTime(builder, OpenEndDateTime_off)
    FarmingDungeonLocationManageExcel.AddLocationButtonImagePath(builder, LocationButtonImagePath_off)
    FarmingDungeonLocationManageExcel.AddLocalizeCodeTitle(builder, LocalizeCodeTitle_val)
    FarmingDungeonLocationManageExcel.AddLocalizeCodeInfo(builder, LocalizeCodeInfo_val)
    return FarmingDungeonLocationManageExcel.End(builder)

def pack_FavorLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FavorLevel") if encrypt else None
    ExpType_vec = 0
    if 'ExpType' in data:
        ExpType_items = data['ExpType']
        FavorLevelExcel.StartExpTypeVector(builder, len(ExpType_items))
        for item in reversed(ExpType_items):
            builder.PrependInt64(convert_long(item, password))
        ExpType_vec = builder.EndVector(len(ExpType_items))
    Level_val = convert_long(data.get('Level', 0), password)
    FavorLevelExcel.Start(builder)
    FavorLevelExcel.AddLevel(builder, Level_val)
    FavorLevelExcel.AddExpType(builder, ExpType_vec)
    return FavorLevelExcel.End(builder)

def pack_FavorLevelRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FavorLevelReward") if encrypt else None
    StatType_vec = 0
    if 'StatType' in data:
        StatType_items = data['StatType']
        FavorLevelRewardExcel.StartStatTypeVector(builder, len(StatType_items))
        for item in reversed(StatType_items):
            builder.PrependInt32(convert_int(getattr(EquipmentOptionType, item), password))
        StatType_vec = builder.EndVector(len(StatType_items))
    StatValue_vec = 0
    if 'StatValue' in data:
        StatValue_items = data['StatValue']
        FavorLevelRewardExcel.StartStatValueVector(builder, len(StatValue_items))
        for item in reversed(StatValue_items):
            builder.PrependInt64(convert_long(item, password))
        StatValue_vec = builder.EndVector(len(StatValue_items))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        FavorLevelRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        FavorLevelRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardAmount_vec = 0
    if 'RewardAmount' in data:
        RewardAmount_items = data['RewardAmount']
        FavorLevelRewardExcel.StartRewardAmountVector(builder, len(RewardAmount_items))
        for item in reversed(RewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardAmount_vec = builder.EndVector(len(RewardAmount_items))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    FavorLevel_val = convert_long(data.get('FavorLevel', 0), password)
    FavorLevelRewardExcel.Start(builder)
    FavorLevelRewardExcel.AddCharacterId(builder, CharacterId_val)
    FavorLevelRewardExcel.AddFavorLevel(builder, FavorLevel_val)
    FavorLevelRewardExcel.AddStatType(builder, StatType_vec)
    FavorLevelRewardExcel.AddStatValue(builder, StatValue_vec)
    FavorLevelRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    FavorLevelRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    FavorLevelRewardExcel.AddRewardAmount(builder, RewardAmount_vec)
    return FavorLevelRewardExcel.End(builder)

def pack_FixedEchelonSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FixedEchelonSetting") if encrypt else None
    MainCharacterID_vec = 0
    if 'MainCharacterID' in data:
        MainCharacterID_items = data['MainCharacterID']
        FixedEchelonSettingExcel.StartMainCharacterIDVector(builder, len(MainCharacterID_items))
        for item in reversed(MainCharacterID_items):
            builder.PrependInt64(convert_long(item, password))
        MainCharacterID_vec = builder.EndVector(len(MainCharacterID_items))
    MainLevel_vec = 0
    if 'MainLevel' in data:
        MainLevel_items = data['MainLevel']
        FixedEchelonSettingExcel.StartMainLevelVector(builder, len(MainLevel_items))
        for item in reversed(MainLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MainLevel_vec = builder.EndVector(len(MainLevel_items))
    MainGrade_vec = 0
    if 'MainGrade' in data:
        MainGrade_items = data['MainGrade']
        FixedEchelonSettingExcel.StartMainGradeVector(builder, len(MainGrade_items))
        for item in reversed(MainGrade_items):
            builder.PrependInt32(convert_int(item, password))
        MainGrade_vec = builder.EndVector(len(MainGrade_items))
    MainExSkillLevel_vec = 0
    if 'MainExSkillLevel' in data:
        MainExSkillLevel_items = data['MainExSkillLevel']
        FixedEchelonSettingExcel.StartMainExSkillLevelVector(builder, len(MainExSkillLevel_items))
        for item in reversed(MainExSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MainExSkillLevel_vec = builder.EndVector(len(MainExSkillLevel_items))
    MainNoneExSkillLevel_vec = 0
    if 'MainNoneExSkillLevel' in data:
        MainNoneExSkillLevel_items = data['MainNoneExSkillLevel']
        FixedEchelonSettingExcel.StartMainNoneExSkillLevelVector(builder, len(MainNoneExSkillLevel_items))
        for item in reversed(MainNoneExSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MainNoneExSkillLevel_vec = builder.EndVector(len(MainNoneExSkillLevel_items))
    MainEquipment1Tier_vec = 0
    if 'MainEquipment1Tier' in data:
        MainEquipment1Tier_items = data['MainEquipment1Tier']
        FixedEchelonSettingExcel.StartMainEquipment1TierVector(builder, len(MainEquipment1Tier_items))
        for item in reversed(MainEquipment1Tier_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment1Tier_vec = builder.EndVector(len(MainEquipment1Tier_items))
    MainEquipment1Level_vec = 0
    if 'MainEquipment1Level' in data:
        MainEquipment1Level_items = data['MainEquipment1Level']
        FixedEchelonSettingExcel.StartMainEquipment1LevelVector(builder, len(MainEquipment1Level_items))
        for item in reversed(MainEquipment1Level_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment1Level_vec = builder.EndVector(len(MainEquipment1Level_items))
    MainEquipment2Tier_vec = 0
    if 'MainEquipment2Tier' in data:
        MainEquipment2Tier_items = data['MainEquipment2Tier']
        FixedEchelonSettingExcel.StartMainEquipment2TierVector(builder, len(MainEquipment2Tier_items))
        for item in reversed(MainEquipment2Tier_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment2Tier_vec = builder.EndVector(len(MainEquipment2Tier_items))
    MainEquipment2Level_vec = 0
    if 'MainEquipment2Level' in data:
        MainEquipment2Level_items = data['MainEquipment2Level']
        FixedEchelonSettingExcel.StartMainEquipment2LevelVector(builder, len(MainEquipment2Level_items))
        for item in reversed(MainEquipment2Level_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment2Level_vec = builder.EndVector(len(MainEquipment2Level_items))
    MainEquipment3Tier_vec = 0
    if 'MainEquipment3Tier' in data:
        MainEquipment3Tier_items = data['MainEquipment3Tier']
        FixedEchelonSettingExcel.StartMainEquipment3TierVector(builder, len(MainEquipment3Tier_items))
        for item in reversed(MainEquipment3Tier_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment3Tier_vec = builder.EndVector(len(MainEquipment3Tier_items))
    MainEquipment3Level_vec = 0
    if 'MainEquipment3Level' in data:
        MainEquipment3Level_items = data['MainEquipment3Level']
        FixedEchelonSettingExcel.StartMainEquipment3LevelVector(builder, len(MainEquipment3Level_items))
        for item in reversed(MainEquipment3Level_items):
            builder.PrependInt32(convert_int(item, password))
        MainEquipment3Level_vec = builder.EndVector(len(MainEquipment3Level_items))
    MainCharacterWeaponGrade_vec = 0
    if 'MainCharacterWeaponGrade' in data:
        MainCharacterWeaponGrade_items = data['MainCharacterWeaponGrade']
        FixedEchelonSettingExcel.StartMainCharacterWeaponGradeVector(builder, len(MainCharacterWeaponGrade_items))
        for item in reversed(MainCharacterWeaponGrade_items):
            builder.PrependInt32(convert_int(item, password))
        MainCharacterWeaponGrade_vec = builder.EndVector(len(MainCharacterWeaponGrade_items))
    MainCharacterWeaponLevel_vec = 0
    if 'MainCharacterWeaponLevel' in data:
        MainCharacterWeaponLevel_items = data['MainCharacterWeaponLevel']
        FixedEchelonSettingExcel.StartMainCharacterWeaponLevelVector(builder, len(MainCharacterWeaponLevel_items))
        for item in reversed(MainCharacterWeaponLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MainCharacterWeaponLevel_vec = builder.EndVector(len(MainCharacterWeaponLevel_items))
    MainCharacterGearTier_vec = 0
    if 'MainCharacterGearTier' in data:
        MainCharacterGearTier_items = data['MainCharacterGearTier']
        FixedEchelonSettingExcel.StartMainCharacterGearTierVector(builder, len(MainCharacterGearTier_items))
        for item in reversed(MainCharacterGearTier_items):
            builder.PrependInt32(convert_int(item, password))
        MainCharacterGearTier_vec = builder.EndVector(len(MainCharacterGearTier_items))
    MainCharacterGearLevel_vec = 0
    if 'MainCharacterGearLevel' in data:
        MainCharacterGearLevel_items = data['MainCharacterGearLevel']
        FixedEchelonSettingExcel.StartMainCharacterGearLevelVector(builder, len(MainCharacterGearLevel_items))
        for item in reversed(MainCharacterGearLevel_items):
            builder.PrependInt32(convert_int(item, password))
        MainCharacterGearLevel_vec = builder.EndVector(len(MainCharacterGearLevel_items))
    SupportCharacterID_vec = 0
    if 'SupportCharacterID' in data:
        SupportCharacterID_items = data['SupportCharacterID']
        FixedEchelonSettingExcel.StartSupportCharacterIDVector(builder, len(SupportCharacterID_items))
        for item in reversed(SupportCharacterID_items):
            builder.PrependInt64(convert_long(item, password))
        SupportCharacterID_vec = builder.EndVector(len(SupportCharacterID_items))
    SupportLevel_vec = 0
    if 'SupportLevel' in data:
        SupportLevel_items = data['SupportLevel']
        FixedEchelonSettingExcel.StartSupportLevelVector(builder, len(SupportLevel_items))
        for item in reversed(SupportLevel_items):
            builder.PrependInt32(convert_int(item, password))
        SupportLevel_vec = builder.EndVector(len(SupportLevel_items))
    SupportGrade_vec = 0
    if 'SupportGrade' in data:
        SupportGrade_items = data['SupportGrade']
        FixedEchelonSettingExcel.StartSupportGradeVector(builder, len(SupportGrade_items))
        for item in reversed(SupportGrade_items):
            builder.PrependInt32(convert_int(item, password))
        SupportGrade_vec = builder.EndVector(len(SupportGrade_items))
    SupportExSkillLevel_vec = 0
    if 'SupportExSkillLevel' in data:
        SupportExSkillLevel_items = data['SupportExSkillLevel']
        FixedEchelonSettingExcel.StartSupportExSkillLevelVector(builder, len(SupportExSkillLevel_items))
        for item in reversed(SupportExSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        SupportExSkillLevel_vec = builder.EndVector(len(SupportExSkillLevel_items))
    SupportNoneExSkillLevel_vec = 0
    if 'SupportNoneExSkillLevel' in data:
        SupportNoneExSkillLevel_items = data['SupportNoneExSkillLevel']
        FixedEchelonSettingExcel.StartSupportNoneExSkillLevelVector(builder, len(SupportNoneExSkillLevel_items))
        for item in reversed(SupportNoneExSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        SupportNoneExSkillLevel_vec = builder.EndVector(len(SupportNoneExSkillLevel_items))
    SupportEquipment1Tier_vec = 0
    if 'SupportEquipment1Tier' in data:
        SupportEquipment1Tier_items = data['SupportEquipment1Tier']
        FixedEchelonSettingExcel.StartSupportEquipment1TierVector(builder, len(SupportEquipment1Tier_items))
        for item in reversed(SupportEquipment1Tier_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment1Tier_vec = builder.EndVector(len(SupportEquipment1Tier_items))
    SupportEquipment1Level_vec = 0
    if 'SupportEquipment1Level' in data:
        SupportEquipment1Level_items = data['SupportEquipment1Level']
        FixedEchelonSettingExcel.StartSupportEquipment1LevelVector(builder, len(SupportEquipment1Level_items))
        for item in reversed(SupportEquipment1Level_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment1Level_vec = builder.EndVector(len(SupportEquipment1Level_items))
    SupportEquipment2Tier_vec = 0
    if 'SupportEquipment2Tier' in data:
        SupportEquipment2Tier_items = data['SupportEquipment2Tier']
        FixedEchelonSettingExcel.StartSupportEquipment2TierVector(builder, len(SupportEquipment2Tier_items))
        for item in reversed(SupportEquipment2Tier_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment2Tier_vec = builder.EndVector(len(SupportEquipment2Tier_items))
    SupportEquipment2Level_vec = 0
    if 'SupportEquipment2Level' in data:
        SupportEquipment2Level_items = data['SupportEquipment2Level']
        FixedEchelonSettingExcel.StartSupportEquipment2LevelVector(builder, len(SupportEquipment2Level_items))
        for item in reversed(SupportEquipment2Level_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment2Level_vec = builder.EndVector(len(SupportEquipment2Level_items))
    SupportEquipment3Tier_vec = 0
    if 'SupportEquipment3Tier' in data:
        SupportEquipment3Tier_items = data['SupportEquipment3Tier']
        FixedEchelonSettingExcel.StartSupportEquipment3TierVector(builder, len(SupportEquipment3Tier_items))
        for item in reversed(SupportEquipment3Tier_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment3Tier_vec = builder.EndVector(len(SupportEquipment3Tier_items))
    SupportEquipment3Level_vec = 0
    if 'SupportEquipment3Level' in data:
        SupportEquipment3Level_items = data['SupportEquipment3Level']
        FixedEchelonSettingExcel.StartSupportEquipment3LevelVector(builder, len(SupportEquipment3Level_items))
        for item in reversed(SupportEquipment3Level_items):
            builder.PrependInt32(convert_int(item, password))
        SupportEquipment3Level_vec = builder.EndVector(len(SupportEquipment3Level_items))
    SupportCharacterWeaponGrade_vec = 0
    if 'SupportCharacterWeaponGrade' in data:
        SupportCharacterWeaponGrade_items = data['SupportCharacterWeaponGrade']
        FixedEchelonSettingExcel.StartSupportCharacterWeaponGradeVector(builder, len(SupportCharacterWeaponGrade_items))
        for item in reversed(SupportCharacterWeaponGrade_items):
            builder.PrependInt32(convert_int(item, password))
        SupportCharacterWeaponGrade_vec = builder.EndVector(len(SupportCharacterWeaponGrade_items))
    SupportCharacterWeaponLevel_vec = 0
    if 'SupportCharacterWeaponLevel' in data:
        SupportCharacterWeaponLevel_items = data['SupportCharacterWeaponLevel']
        FixedEchelonSettingExcel.StartSupportCharacterWeaponLevelVector(builder, len(SupportCharacterWeaponLevel_items))
        for item in reversed(SupportCharacterWeaponLevel_items):
            builder.PrependInt32(convert_int(item, password))
        SupportCharacterWeaponLevel_vec = builder.EndVector(len(SupportCharacterWeaponLevel_items))
    SupportCharacterGearTier_vec = 0
    if 'SupportCharacterGearTier' in data:
        SupportCharacterGearTier_items = data['SupportCharacterGearTier']
        FixedEchelonSettingExcel.StartSupportCharacterGearTierVector(builder, len(SupportCharacterGearTier_items))
        for item in reversed(SupportCharacterGearTier_items):
            builder.PrependInt32(convert_int(item, password))
        SupportCharacterGearTier_vec = builder.EndVector(len(SupportCharacterGearTier_items))
    SupportCharacterGearLevel_vec = 0
    if 'SupportCharacterGearLevel' in data:
        SupportCharacterGearLevel_items = data['SupportCharacterGearLevel']
        FixedEchelonSettingExcel.StartSupportCharacterGearLevelVector(builder, len(SupportCharacterGearLevel_items))
        for item in reversed(SupportCharacterGearLevel_items):
            builder.PrependInt32(convert_int(item, password))
        SupportCharacterGearLevel_vec = builder.EndVector(len(SupportCharacterGearLevel_items))
    FixedEchelonID_val = convert_long(data.get('FixedEchelonID', 0), password)
    EchelonSceneSkip_val = data.get('EchelonSceneSkip', 0)
    MainLeaderSlot_val = convert_int(data.get('MainLeaderSlot', 0), password)
    InteractionTSCharacterId_val = convert_long(data.get('InteractionTSCharacterId', 0), password)
    FixedEchelonSettingExcel.Start(builder)
    FixedEchelonSettingExcel.AddFixedEchelonID(builder, FixedEchelonID_val)
    FixedEchelonSettingExcel.AddEchelonSceneSkip(builder, EchelonSceneSkip_val)
    FixedEchelonSettingExcel.AddMainLeaderSlot(builder, MainLeaderSlot_val)
    FixedEchelonSettingExcel.AddMainCharacterID(builder, MainCharacterID_vec)
    FixedEchelonSettingExcel.AddMainLevel(builder, MainLevel_vec)
    FixedEchelonSettingExcel.AddMainGrade(builder, MainGrade_vec)
    FixedEchelonSettingExcel.AddMainExSkillLevel(builder, MainExSkillLevel_vec)
    FixedEchelonSettingExcel.AddMainNoneExSkillLevel(builder, MainNoneExSkillLevel_vec)
    FixedEchelonSettingExcel.AddMainEquipment1Tier(builder, MainEquipment1Tier_vec)
    FixedEchelonSettingExcel.AddMainEquipment1Level(builder, MainEquipment1Level_vec)
    FixedEchelonSettingExcel.AddMainEquipment2Tier(builder, MainEquipment2Tier_vec)
    FixedEchelonSettingExcel.AddMainEquipment2Level(builder, MainEquipment2Level_vec)
    FixedEchelonSettingExcel.AddMainEquipment3Tier(builder, MainEquipment3Tier_vec)
    FixedEchelonSettingExcel.AddMainEquipment3Level(builder, MainEquipment3Level_vec)
    FixedEchelonSettingExcel.AddMainCharacterWeaponGrade(builder, MainCharacterWeaponGrade_vec)
    FixedEchelonSettingExcel.AddMainCharacterWeaponLevel(builder, MainCharacterWeaponLevel_vec)
    FixedEchelonSettingExcel.AddMainCharacterGearTier(builder, MainCharacterGearTier_vec)
    FixedEchelonSettingExcel.AddMainCharacterGearLevel(builder, MainCharacterGearLevel_vec)
    FixedEchelonSettingExcel.AddSupportCharacterID(builder, SupportCharacterID_vec)
    FixedEchelonSettingExcel.AddSupportLevel(builder, SupportLevel_vec)
    FixedEchelonSettingExcel.AddSupportGrade(builder, SupportGrade_vec)
    FixedEchelonSettingExcel.AddSupportExSkillLevel(builder, SupportExSkillLevel_vec)
    FixedEchelonSettingExcel.AddSupportNoneExSkillLevel(builder, SupportNoneExSkillLevel_vec)
    FixedEchelonSettingExcel.AddSupportEquipment1Tier(builder, SupportEquipment1Tier_vec)
    FixedEchelonSettingExcel.AddSupportEquipment1Level(builder, SupportEquipment1Level_vec)
    FixedEchelonSettingExcel.AddSupportEquipment2Tier(builder, SupportEquipment2Tier_vec)
    FixedEchelonSettingExcel.AddSupportEquipment2Level(builder, SupportEquipment2Level_vec)
    FixedEchelonSettingExcel.AddSupportEquipment3Tier(builder, SupportEquipment3Tier_vec)
    FixedEchelonSettingExcel.AddSupportEquipment3Level(builder, SupportEquipment3Level_vec)
    FixedEchelonSettingExcel.AddSupportCharacterWeaponGrade(builder, SupportCharacterWeaponGrade_vec)
    FixedEchelonSettingExcel.AddSupportCharacterWeaponLevel(builder, SupportCharacterWeaponLevel_vec)
    FixedEchelonSettingExcel.AddSupportCharacterGearTier(builder, SupportCharacterGearTier_vec)
    FixedEchelonSettingExcel.AddSupportCharacterGearLevel(builder, SupportCharacterGearLevel_vec)
    FixedEchelonSettingExcel.AddInteractionTSCharacterId(builder, InteractionTSCharacterId_val)
    return FixedEchelonSettingExcel.End(builder)

def pack_FixedStrategyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FixedStrategy") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    StageEnterEchelon01FixedEchelonId_val = convert_long(data.get('StageEnterEchelon01FixedEchelonId', 0), password)
    StageEnterEchelon01Starttile_val = convert_long(data.get('StageEnterEchelon01Starttile', 0), password)
    StageEnterEchelon02FixedEchelonId_val = convert_long(data.get('StageEnterEchelon02FixedEchelonId', 0), password)
    StageEnterEchelon02Starttile_val = convert_long(data.get('StageEnterEchelon02Starttile', 0), password)
    StageEnterEchelon03FixedEchelonId_val = convert_long(data.get('StageEnterEchelon03FixedEchelonId', 0), password)
    StageEnterEchelon03Starttile_val = convert_long(data.get('StageEnterEchelon03Starttile', 0), password)
    StageEnterEchelon04FixedEchelonId_val = convert_long(data.get('StageEnterEchelon04FixedEchelonId', 0), password)
    StageEnterEchelon04Starttile_val = convert_long(data.get('StageEnterEchelon04Starttile', 0), password)
    FixedStrategyExcel.Start(builder)
    FixedStrategyExcel.AddId(builder, Id_val)
    FixedStrategyExcel.AddStageEnterEchelon01FixedEchelonId(builder, StageEnterEchelon01FixedEchelonId_val)
    FixedStrategyExcel.AddStageEnterEchelon01Starttile(builder, StageEnterEchelon01Starttile_val)
    FixedStrategyExcel.AddStageEnterEchelon02FixedEchelonId(builder, StageEnterEchelon02FixedEchelonId_val)
    FixedStrategyExcel.AddStageEnterEchelon02Starttile(builder, StageEnterEchelon02Starttile_val)
    FixedStrategyExcel.AddStageEnterEchelon03FixedEchelonId(builder, StageEnterEchelon03FixedEchelonId_val)
    FixedStrategyExcel.AddStageEnterEchelon03Starttile(builder, StageEnterEchelon03Starttile_val)
    FixedStrategyExcel.AddStageEnterEchelon04FixedEchelonId(builder, StageEnterEchelon04FixedEchelonId_val)
    FixedStrategyExcel.AddStageEnterEchelon04Starttile(builder, StageEnterEchelon04Starttile_val)
    return FixedStrategyExcel.End(builder)

def pack_FloaterCommonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FloaterCommon") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    TacticEntityType_val = convert_int(getattr(TacticEntityType, data.get('TacticEntityType', 0)), password)
    FloaterOffsetPosX_val = convert_int(data.get('FloaterOffsetPosX', 0), password)
    FloaterOffsetPosY_val = convert_int(data.get('FloaterOffsetPosY', 0), password)
    FloaterRandomPosRangeX_val = convert_int(data.get('FloaterRandomPosRangeX', 0), password)
    FloaterRandomPosRangeY_val = convert_int(data.get('FloaterRandomPosRangeY', 0), password)
    FloaterCommonExcel.Start(builder)
    FloaterCommonExcel.AddId(builder, Id_val)
    FloaterCommonExcel.AddTacticEntityType(builder, TacticEntityType_val)
    FloaterCommonExcel.AddFloaterOffsetPosX(builder, FloaterOffsetPosX_val)
    FloaterCommonExcel.AddFloaterOffsetPosY(builder, FloaterOffsetPosY_val)
    FloaterCommonExcel.AddFloaterRandomPosRangeX(builder, FloaterRandomPosRangeX_val)
    FloaterCommonExcel.AddFloaterRandomPosRangeY(builder, FloaterRandomPosRangeY_val)
    return FloaterCommonExcel.End(builder)

def pack_FormationLocationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FormationLocation") if encrypt else None
    SlotZ_vec = 0
    if 'SlotZ' in data:
        SlotZ_items = data['SlotZ']
        FormationLocationExcel.StartSlotZVector(builder, len(SlotZ_items))
        for item in reversed(SlotZ_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SlotZ_vec = builder.EndVector(len(SlotZ_items))
    SlotX_vec = 0
    if 'SlotX' in data:
        SlotX_items = data['SlotX']
        FormationLocationExcel.StartSlotXVector(builder, len(SlotX_items))
        for item in reversed(SlotX_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SlotX_vec = builder.EndVector(len(SlotX_items))
    Id_val = convert_long(data.get('Id', 0), password)
    GroupID_val = convert_long(data.get('GroupID', 0), password)
    FormationLocationExcel.Start(builder)
    FormationLocationExcel.AddId(builder, Id_val)
    FormationLocationExcel.AddGroupID(builder, GroupID_val)
    FormationLocationExcel.AddSlotZ(builder, SlotZ_vec)
    FormationLocationExcel.AddSlotX(builder, SlotX_vec)
    return FormationLocationExcel.End(builder)

def pack_FurnitureExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Furniture") if encrypt else None
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    Prefab_off = builder.CreateString(encrypt_string(data.get('Prefab', ''), password))
    PrefabExpand_off = builder.CreateString(encrypt_string(data.get('PrefabExpand', ''), password))
    SubPrefab_off = builder.CreateString(encrypt_string(data.get('SubPrefab', ''), password))
    SubExpandPrefab_off = builder.CreateString(encrypt_string(data.get('SubExpandPrefab', ''), password))
    CornerPrefab_off = builder.CreateString(encrypt_string(data.get('CornerPrefab', ''), password))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        FurnitureExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    FurnitureFunctionParameter_vec = 0
    if 'FurnitureFunctionParameter' in data:
        FurnitureFunctionParameter_items = data['FurnitureFunctionParameter']
        FurnitureExcel.StartFurnitureFunctionParameterVector(builder, len(FurnitureFunctionParameter_items))
        for item in reversed(FurnitureFunctionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        FurnitureFunctionParameter_vec = builder.EndVector(len(FurnitureFunctionParameter_items))
    CafeCharacterStateReq_vec = 0
    if 'CafeCharacterStateReq' in data:
        CafeCharacterStateReq_items = data['CafeCharacterStateReq']
        CafeCharacterStateReq_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CafeCharacterStateReq_items]
        FurnitureExcel.StartCafeCharacterStateReqVector(builder, len(CafeCharacterStateReq_str_offsets))
        for offset in reversed(CafeCharacterStateReq_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CafeCharacterStateReq_vec = builder.EndVector(len(CafeCharacterStateReq_items))
    CafeCharacterStateAdd_vec = 0
    if 'CafeCharacterStateAdd' in data:
        CafeCharacterStateAdd_items = data['CafeCharacterStateAdd']
        CafeCharacterStateAdd_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CafeCharacterStateAdd_items]
        FurnitureExcel.StartCafeCharacterStateAddVector(builder, len(CafeCharacterStateAdd_str_offsets))
        for offset in reversed(CafeCharacterStateAdd_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CafeCharacterStateAdd_vec = builder.EndVector(len(CafeCharacterStateAdd_items))
    CafeCharacterStateMake_vec = 0
    if 'CafeCharacterStateMake' in data:
        CafeCharacterStateMake_items = data['CafeCharacterStateMake']
        CafeCharacterStateMake_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CafeCharacterStateMake_items]
        FurnitureExcel.StartCafeCharacterStateMakeVector(builder, len(CafeCharacterStateMake_str_offsets))
        for offset in reversed(CafeCharacterStateMake_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CafeCharacterStateMake_vec = builder.EndVector(len(CafeCharacterStateMake_items))
    CafeCharacterStateOnly_vec = 0
    if 'CafeCharacterStateOnly' in data:
        CafeCharacterStateOnly_items = data['CafeCharacterStateOnly']
        CafeCharacterStateOnly_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in CafeCharacterStateOnly_items]
        FurnitureExcel.StartCafeCharacterStateOnlyVector(builder, len(CafeCharacterStateOnly_str_offsets))
        for offset in reversed(CafeCharacterStateOnly_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        CafeCharacterStateOnly_vec = builder.EndVector(len(CafeCharacterStateOnly_items))
    Id_val = convert_long(data.get('Id', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    Category_val = convert_int(getattr(FurnitureCategory, data.get('Category', 0)), password)
    SubCategory_val = convert_int(getattr(FurnitureSubCategory, data.get('SubCategory', 0)), password)
    CheckFloorDecoration_val = data.get('CheckFloorDecoration', 0)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    StarGradeInit_val = convert_int(data.get('StarGradeInit', 0), password)
    Tier_val = convert_long(data.get('Tier', 0), password)
    SizeWidth_val = convert_int(data.get('SizeWidth', 0), password)
    SizeHeight_val = convert_int(data.get('SizeHeight', 0), password)
    OtherSize_val = convert_int(data.get('OtherSize', 0), password)
    ExpandWidth_val = convert_int(data.get('ExpandWidth', 0), password)
    Enable_val = data.get('Enable', 0)
    ReverseRotation_val = data.get('ReverseRotation', 0)
    StackableMax_val = convert_long(data.get('StackableMax', 0), password)
    RecipeCraftId_val = convert_long(data.get('RecipeCraftId', 0), password)
    SetGroudpId_val = convert_long(data.get('SetGroudpId', 0), password)
    ComfortBonus_val = convert_long(data.get('ComfortBonus', 0), password)
    VisitOperationType_val = convert_long(data.get('VisitOperationType', 0), password)
    VisitBonusOperationType_val = convert_long(data.get('VisitBonusOperationType', 0), password)
    CraftQualityTier0_val = convert_long(data.get('CraftQualityTier0', 0), password)
    CraftQualityTier1_val = convert_long(data.get('CraftQualityTier1', 0), password)
    CraftQualityTier2_val = convert_long(data.get('CraftQualityTier2', 0), password)
    ShiftingCraftQuality_val = convert_long(data.get('ShiftingCraftQuality', 0), password)
    FurnitureFunctionType_val = convert_int(getattr(FurnitureFunctionType, data.get('FurnitureFunctionType', 0)), password)
    VideoId_val = convert_long(data.get('VideoId', 0), password)
    EventCollectionId_val = convert_long(data.get('EventCollectionId', 0), password)
    FurnitureBubbleOffsetX_val = convert_long(data.get('FurnitureBubbleOffsetX', 0), password)
    FurnitureBubbleOffsetY_val = convert_long(data.get('FurnitureBubbleOffsetY', 0), password)
    HideCraftShortcut_val = data.get('HideCraftShortcut', 0)
    FurnitureExcel.Start(builder)
    FurnitureExcel.AddId(builder, Id_val)
    FurnitureExcel.AddProductionStep(builder, ProductionStep_val)
    FurnitureExcel.AddRarity(builder, Rarity_val)
    FurnitureExcel.AddCategory(builder, Category_val)
    FurnitureExcel.AddSubCategory(builder, SubCategory_val)
    FurnitureExcel.AddCheckFloorDecoration(builder, CheckFloorDecoration_val)
    FurnitureExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    FurnitureExcel.AddStarGradeInit(builder, StarGradeInit_val)
    FurnitureExcel.AddTier(builder, Tier_val)
    FurnitureExcel.AddIcon(builder, Icon_off)
    FurnitureExcel.AddSizeWidth(builder, SizeWidth_val)
    FurnitureExcel.AddSizeHeight(builder, SizeHeight_val)
    FurnitureExcel.AddOtherSize(builder, OtherSize_val)
    FurnitureExcel.AddExpandWidth(builder, ExpandWidth_val)
    FurnitureExcel.AddEnable(builder, Enable_val)
    FurnitureExcel.AddReverseRotation(builder, ReverseRotation_val)
    FurnitureExcel.AddPrefab(builder, Prefab_off)
    FurnitureExcel.AddPrefabExpand(builder, PrefabExpand_off)
    FurnitureExcel.AddSubPrefab(builder, SubPrefab_off)
    FurnitureExcel.AddSubExpandPrefab(builder, SubExpandPrefab_off)
    FurnitureExcel.AddCornerPrefab(builder, CornerPrefab_off)
    FurnitureExcel.AddStackableMax(builder, StackableMax_val)
    FurnitureExcel.AddRecipeCraftId(builder, RecipeCraftId_val)
    FurnitureExcel.AddSetGroudpId(builder, SetGroudpId_val)
    FurnitureExcel.AddComfortBonus(builder, ComfortBonus_val)
    FurnitureExcel.AddVisitOperationType(builder, VisitOperationType_val)
    FurnitureExcel.AddVisitBonusOperationType(builder, VisitBonusOperationType_val)
    FurnitureExcel.AddTags(builder, Tags_vec)
    FurnitureExcel.AddCraftQualityTier0(builder, CraftQualityTier0_val)
    FurnitureExcel.AddCraftQualityTier1(builder, CraftQualityTier1_val)
    FurnitureExcel.AddCraftQualityTier2(builder, CraftQualityTier2_val)
    FurnitureExcel.AddShiftingCraftQuality(builder, ShiftingCraftQuality_val)
    FurnitureExcel.AddFurnitureFunctionType(builder, FurnitureFunctionType_val)
    FurnitureExcel.AddFurnitureFunctionParameter(builder, FurnitureFunctionParameter_vec)
    FurnitureExcel.AddVideoId(builder, VideoId_val)
    FurnitureExcel.AddEventCollectionId(builder, EventCollectionId_val)
    FurnitureExcel.AddFurnitureBubbleOffsetX(builder, FurnitureBubbleOffsetX_val)
    FurnitureExcel.AddFurnitureBubbleOffsetY(builder, FurnitureBubbleOffsetY_val)
    FurnitureExcel.AddCafeCharacterStateReq(builder, CafeCharacterStateReq_vec)
    FurnitureExcel.AddCafeCharacterStateAdd(builder, CafeCharacterStateAdd_vec)
    FurnitureExcel.AddCafeCharacterStateMake(builder, CafeCharacterStateMake_vec)
    FurnitureExcel.AddCafeCharacterStateOnly(builder, CafeCharacterStateOnly_vec)
    FurnitureExcel.AddHideCraftShortcut(builder, HideCraftShortcut_val)
    return FurnitureExcel.End(builder)

def pack_FurnitureGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FurnitureGroup") if encrypt else None
    RequiredFurnitureCount_vec = 0
    if 'RequiredFurnitureCount' in data:
        RequiredFurnitureCount_items = data['RequiredFurnitureCount']
        FurnitureGroupExcel.StartRequiredFurnitureCountVector(builder, len(RequiredFurnitureCount_items))
        for item in reversed(RequiredFurnitureCount_items):
            builder.PrependInt32(convert_int(item, password))
        RequiredFurnitureCount_vec = builder.EndVector(len(RequiredFurnitureCount_items))
    ComfortBonus_vec = 0
    if 'ComfortBonus' in data:
        ComfortBonus_items = data['ComfortBonus']
        FurnitureGroupExcel.StartComfortBonusVector(builder, len(ComfortBonus_items))
        for item in reversed(ComfortBonus_items):
            builder.PrependInt64(convert_long(item, password))
        ComfortBonus_vec = builder.EndVector(len(ComfortBonus_items))
    Id_val = convert_long(data.get('Id', 0), password)
    GroupNameLocalize_val = convert_uint(data.get('GroupNameLocalize', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    FurnitureGroupExcel.Start(builder)
    FurnitureGroupExcel.AddId(builder, Id_val)
    FurnitureGroupExcel.AddGroupNameLocalize(builder, GroupNameLocalize_val)
    FurnitureGroupExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    FurnitureGroupExcel.AddRequiredFurnitureCount(builder, RequiredFurnitureCount_vec)
    FurnitureGroupExcel.AddComfortBonus(builder, ComfortBonus_vec)
    return FurnitureGroupExcel.End(builder)

def pack_FurnitureTemplateElementExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FurnitureTemplateElement") if encrypt else None
    FurnitureTemplateId_val = convert_long(data.get('FurnitureTemplateId', 0), password)
    FurnitureId_val = convert_long(data.get('FurnitureId', 0), password)
    Location_val = convert_int(getattr(FurnitureLocation, data.get('Location', 0)), password)
    PositionX_val = encrypt_float(data.get('PositionX', 0), password)
    PositionY_val = encrypt_float(data.get('PositionY', 0), password)
    Rotation_val = encrypt_float(data.get('Rotation', 0), password)
    Order_val = convert_long(data.get('Order', 0), password)
    FurnitureTemplateElementExcel.Start(builder)
    FurnitureTemplateElementExcel.AddFurnitureTemplateId(builder, FurnitureTemplateId_val)
    FurnitureTemplateElementExcel.AddFurnitureId(builder, FurnitureId_val)
    FurnitureTemplateElementExcel.AddLocation(builder, Location_val)
    FurnitureTemplateElementExcel.AddPositionX(builder, PositionX_val)
    FurnitureTemplateElementExcel.AddPositionY(builder, PositionY_val)
    FurnitureTemplateElementExcel.AddRotation(builder, Rotation_val)
    FurnitureTemplateElementExcel.AddOrder(builder, Order_val)
    return FurnitureTemplateElementExcel.End(builder)

def pack_FurnitureTemplateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("FurnitureTemplate") if encrypt else None
    ThumbnailImagePath_off = builder.CreateString(encrypt_string(data.get('ThumbnailImagePath', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    FurnitureTemplateId_val = convert_long(data.get('FurnitureTemplateId', 0), password)
    FunitureTemplateTitle_val = convert_uint(data.get('FunitureTemplateTitle', 0), password)
    FurnitureTemplateExcel.Start(builder)
    FurnitureTemplateExcel.AddFurnitureTemplateId(builder, FurnitureTemplateId_val)
    FurnitureTemplateExcel.AddFunitureTemplateTitle(builder, FunitureTemplateTitle_val)
    FurnitureTemplateExcel.AddThumbnailImagePath(builder, ThumbnailImagePath_off)
    FurnitureTemplateExcel.AddImagePath(builder, ImagePath_off)
    return FurnitureTemplateExcel.End(builder)

def pack_GachaCraftNodeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaCraftNode") if encrypt else None
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    ID_val = convert_long(data.get('ID', 0), password)
    Tier_val = convert_long(data.get('Tier', 0), password)
    QuickCraftNodeDisplayOrder_val = convert_int(data.get('QuickCraftNodeDisplayOrder', 0), password)
    NodeQuality_val = convert_long(data.get('NodeQuality', 0), password)
    LocalizeKey_val = convert_uint(data.get('LocalizeKey', 0), password)
    Property_val = convert_long(data.get('Property', 0), password)
    GachaCraftNodeExcel.Start(builder)
    GachaCraftNodeExcel.AddID(builder, ID_val)
    GachaCraftNodeExcel.AddTier(builder, Tier_val)
    GachaCraftNodeExcel.AddQuickCraftNodeDisplayOrder(builder, QuickCraftNodeDisplayOrder_val)
    GachaCraftNodeExcel.AddNodeQuality(builder, NodeQuality_val)
    GachaCraftNodeExcel.AddIcon(builder, Icon_off)
    GachaCraftNodeExcel.AddLocalizeKey(builder, LocalizeKey_val)
    GachaCraftNodeExcel.AddProperty(builder, Property_val)
    return GachaCraftNodeExcel.End(builder)

def pack_GachaCraftNodeGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaCraftNodeGroup") if encrypt else None
    NodeId_val = convert_long(data.get('NodeId', 0), password)
    GachaGroupId_val = convert_long(data.get('GachaGroupId', 0), password)
    ProbWeight_val = convert_long(data.get('ProbWeight', 0), password)
    GachaCraftNodeGroupExcel.Start(builder)
    GachaCraftNodeGroupExcel.AddNodeId(builder, NodeId_val)
    GachaCraftNodeGroupExcel.AddGachaGroupId(builder, GachaGroupId_val)
    GachaCraftNodeGroupExcel.AddProbWeight(builder, ProbWeight_val)
    return GachaCraftNodeGroupExcel.End(builder)

def pack_GachaCraftOpenTagExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaCraftOpenTag") if encrypt else None
    Tag_vec = 0
    if 'Tag' in data:
        Tag_items = data['Tag']
        GachaCraftOpenTagExcel.StartTagVector(builder, len(Tag_items))
        for item in reversed(Tag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tag_vec = builder.EndVector(len(Tag_items))
    NodeTier_val = convert_int(getattr(CraftNodeTier, data.get('NodeTier', 0)), password)
    GachaCraftOpenTagExcel.Start(builder)
    GachaCraftOpenTagExcel.AddNodeTier(builder, NodeTier_val)
    GachaCraftOpenTagExcel.AddTag(builder, Tag_vec)
    return GachaCraftOpenTagExcel.End(builder)

def pack_GachaElementExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaElement") if encrypt else None
    ID_val = convert_long(data.get('ID', 0), password)
    GachaGroupID_val = convert_long(data.get('GachaGroupID', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelID_val = convert_long(data.get('ParcelID', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    ParcelAmountMin_val = convert_int(data.get('ParcelAmountMin', 0), password)
    ParcelAmountMax_val = convert_int(data.get('ParcelAmountMax', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    State_val = convert_int(data.get('State', 0), password)
    GachaElementExcel.Start(builder)
    GachaElementExcel.AddID(builder, ID_val)
    GachaElementExcel.AddGachaGroupID(builder, GachaGroupID_val)
    GachaElementExcel.AddParcelType(builder, ParcelType_val)
    GachaElementExcel.AddParcelID(builder, ParcelID_val)
    GachaElementExcel.AddRarity(builder, Rarity_val)
    GachaElementExcel.AddParcelAmountMin(builder, ParcelAmountMin_val)
    GachaElementExcel.AddParcelAmountMax(builder, ParcelAmountMax_val)
    GachaElementExcel.AddProb(builder, Prob_val)
    GachaElementExcel.AddState(builder, State_val)
    return GachaElementExcel.End(builder)

def pack_GachaElementRecursiveExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaElementRecursive") if encrypt else None
    ID_val = convert_long(data.get('ID', 0), password)
    GachaGroupID_val = convert_long(data.get('GachaGroupID', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelID_val = convert_long(data.get('ParcelID', 0), password)
    ParcelAmountMin_val = convert_int(data.get('ParcelAmountMin', 0), password)
    ParcelAmountMax_val = convert_int(data.get('ParcelAmountMax', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    State_val = convert_int(data.get('State', 0), password)
    GachaElementRecursiveExcel.Start(builder)
    GachaElementRecursiveExcel.AddID(builder, ID_val)
    GachaElementRecursiveExcel.AddGachaGroupID(builder, GachaGroupID_val)
    GachaElementRecursiveExcel.AddParcelType(builder, ParcelType_val)
    GachaElementRecursiveExcel.AddParcelID(builder, ParcelID_val)
    GachaElementRecursiveExcel.AddParcelAmountMin(builder, ParcelAmountMin_val)
    GachaElementRecursiveExcel.AddParcelAmountMax(builder, ParcelAmountMax_val)
    GachaElementRecursiveExcel.AddProb(builder, Prob_val)
    GachaElementRecursiveExcel.AddState(builder, State_val)
    return GachaElementRecursiveExcel.End(builder)

def pack_GachaGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaGroup") if encrypt else None
    NameKr_off = builder.CreateString(encrypt_string(data.get('NameKr', ''), password))
    ID_val = convert_long(data.get('ID', 0), password)
    IsRecursive_val = data.get('IsRecursive', 0)
    GroupType_val = convert_int(getattr(GachaGroupType, data.get('GroupType', 0)), password)
    GachaGroupExcel.Start(builder)
    GachaGroupExcel.AddID(builder, ID_val)
    GachaGroupExcel.AddNameKr(builder, NameKr_off)
    GachaGroupExcel.AddIsRecursive(builder, IsRecursive_val)
    GachaGroupExcel.AddGroupType(builder, GroupType_val)
    return GachaGroupExcel.End(builder)

def pack_GachaSelectPickupGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GachaSelectPickupGroup") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    GachaGroupId_val = convert_long(data.get('GachaGroupId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    GachaSelectPickupGroupExcel.Start(builder)
    GachaSelectPickupGroupExcel.AddId(builder, Id_val)
    GachaSelectPickupGroupExcel.AddGachaGroupId(builder, GachaGroupId_val)
    GachaSelectPickupGroupExcel.AddCharacterId(builder, CharacterId_val)
    return GachaSelectPickupGroupExcel.End(builder)

def pack_GoodsExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Goods") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    ConsumeParcelType_vec = 0
    if 'ConsumeParcelType' in data:
        ConsumeParcelType_items = data['ConsumeParcelType']
        GoodsExcel.StartConsumeParcelTypeVector(builder, len(ConsumeParcelType_items))
        for item in reversed(ConsumeParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ConsumeParcelType_vec = builder.EndVector(len(ConsumeParcelType_items))
    ConsumeParcelId_vec = 0
    if 'ConsumeParcelId' in data:
        ConsumeParcelId_items = data['ConsumeParcelId']
        GoodsExcel.StartConsumeParcelIdVector(builder, len(ConsumeParcelId_items))
        for item in reversed(ConsumeParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ConsumeParcelId_vec = builder.EndVector(len(ConsumeParcelId_items))
    ConsumeParcelAmount_vec = 0
    if 'ConsumeParcelAmount' in data:
        ConsumeParcelAmount_items = data['ConsumeParcelAmount']
        GoodsExcel.StartConsumeParcelAmountVector(builder, len(ConsumeParcelAmount_items))
        for item in reversed(ConsumeParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ConsumeParcelAmount_vec = builder.EndVector(len(ConsumeParcelAmount_items))
    ConsumeCondition_vec = 0
    if 'ConsumeCondition' in data:
        ConsumeCondition_items = data['ConsumeCondition']
        GoodsExcel.StartConsumeConditionVector(builder, len(ConsumeCondition_items))
        for item in reversed(ConsumeCondition_items):
            builder.PrependInt32(convert_int(getattr(ConsumeCondition, item), password))
        ConsumeCondition_vec = builder.EndVector(len(ConsumeCondition_items))
    ConsumeGachaTicketType_vec = 0
    if 'ConsumeGachaTicketType' in data:
        ConsumeGachaTicketType_items = data['ConsumeGachaTicketType']
        GoodsExcel.StartConsumeGachaTicketTypeVector(builder, len(ConsumeGachaTicketType_items))
        for item in reversed(ConsumeGachaTicketType_items):
            builder.PrependInt32(convert_int(getattr(GachaTicketType, item), password))
        ConsumeGachaTicketType_vec = builder.EndVector(len(ConsumeGachaTicketType_items))
    ConsumeGachaTicketTypeAmount_vec = 0
    if 'ConsumeGachaTicketTypeAmount' in data:
        ConsumeGachaTicketTypeAmount_items = data['ConsumeGachaTicketTypeAmount']
        GoodsExcel.StartConsumeGachaTicketTypeAmountVector(builder, len(ConsumeGachaTicketTypeAmount_items))
        for item in reversed(ConsumeGachaTicketTypeAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ConsumeGachaTicketTypeAmount_vec = builder.EndVector(len(ConsumeGachaTicketTypeAmount_items))
    ConsumeExtraStep_vec = 0
    if 'ConsumeExtraStep' in data:
        ConsumeExtraStep_items = data['ConsumeExtraStep']
        GoodsExcel.StartConsumeExtraStepVector(builder, len(ConsumeExtraStep_items))
        for item in reversed(ConsumeExtraStep_items):
            builder.PrependInt64(convert_long(item, password))
        ConsumeExtraStep_vec = builder.EndVector(len(ConsumeExtraStep_items))
    ConsumeExtraAmount_vec = 0
    if 'ConsumeExtraAmount' in data:
        ConsumeExtraAmount_items = data['ConsumeExtraAmount']
        GoodsExcel.StartConsumeExtraAmountVector(builder, len(ConsumeExtraAmount_items))
        for item in reversed(ConsumeExtraAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ConsumeExtraAmount_vec = builder.EndVector(len(ConsumeExtraAmount_items))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        GoodsExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        GoodsExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        GoodsExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Type_val = convert_int(data.get('Type', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    ProductIdAOS_val = convert_long(data.get('ProductIdAOS', 0), password)
    ProductIdiOS_val = convert_long(data.get('ProductIdiOS', 0), password)
    State_val = convert_int(data.get('State', 0), password)
    GoodsExcel.Start(builder)
    GoodsExcel.AddId(builder, Id_val)
    GoodsExcel.AddType(builder, Type_val)
    GoodsExcel.AddRarity(builder, Rarity_val)
    GoodsExcel.AddIconPath(builder, IconPath_off)
    GoodsExcel.AddConsumeParcelType(builder, ConsumeParcelType_vec)
    GoodsExcel.AddConsumeParcelId(builder, ConsumeParcelId_vec)
    GoodsExcel.AddConsumeParcelAmount(builder, ConsumeParcelAmount_vec)
    GoodsExcel.AddConsumeCondition(builder, ConsumeCondition_vec)
    GoodsExcel.AddConsumeGachaTicketType(builder, ConsumeGachaTicketType_vec)
    GoodsExcel.AddConsumeGachaTicketTypeAmount(builder, ConsumeGachaTicketTypeAmount_vec)
    GoodsExcel.AddProductIdAOS(builder, ProductIdAOS_val)
    GoodsExcel.AddProductIdiOS(builder, ProductIdiOS_val)
    GoodsExcel.AddConsumeExtraStep(builder, ConsumeExtraStep_vec)
    GoodsExcel.AddConsumeExtraAmount(builder, ConsumeExtraAmount_vec)
    GoodsExcel.AddState(builder, State_val)
    GoodsExcel.AddParcelType(builder, ParcelType_vec)
    GoodsExcel.AddParcelId(builder, ParcelId_vec)
    GoodsExcel.AddParcelAmount(builder, ParcelAmount_vec)
    return GoodsExcel.End(builder)

def pack_GroundExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Ground") if encrypt else None
    GroundSceneName_off = builder.CreateString(encrypt_string(data.get('GroundSceneName', ''), password))
    BattleReadyTimelinePath_off = builder.CreateString(encrypt_string(data.get('BattleReadyTimelinePath', ''), password))
    BeforeVictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('BeforeVictoryTimelinePath', ''), password))
    StageFileName_vec = 0
    if 'StageFileName' in data:
        StageFileName_items = data['StageFileName']
        StageFileName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in StageFileName_items]
        GroundExcel.StartStageFileNameVector(builder, len(StageFileName_str_offsets))
        for offset in reversed(StageFileName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        StageFileName_vec = builder.EndVector(len(StageFileName_items))
    AllyPassiveSkillId_vec = 0
    if 'AllyPassiveSkillId' in data:
        AllyPassiveSkillId_items = data['AllyPassiveSkillId']
        AllyPassiveSkillId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in AllyPassiveSkillId_items]
        GroundExcel.StartAllyPassiveSkillIdVector(builder, len(AllyPassiveSkillId_str_offsets))
        for offset in reversed(AllyPassiveSkillId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        AllyPassiveSkillId_vec = builder.EndVector(len(AllyPassiveSkillId_items))
    AllyPassiveSkillLevel_vec = 0
    if 'AllyPassiveSkillLevel' in data:
        AllyPassiveSkillLevel_items = data['AllyPassiveSkillLevel']
        GroundExcel.StartAllyPassiveSkillLevelVector(builder, len(AllyPassiveSkillLevel_items))
        for item in reversed(AllyPassiveSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        AllyPassiveSkillLevel_vec = builder.EndVector(len(AllyPassiveSkillLevel_items))
    EnemyPassiveSkillId_vec = 0
    if 'EnemyPassiveSkillId' in data:
        EnemyPassiveSkillId_items = data['EnemyPassiveSkillId']
        EnemyPassiveSkillId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in EnemyPassiveSkillId_items]
        GroundExcel.StartEnemyPassiveSkillIdVector(builder, len(EnemyPassiveSkillId_str_offsets))
        for offset in reversed(EnemyPassiveSkillId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        EnemyPassiveSkillId_vec = builder.EndVector(len(EnemyPassiveSkillId_items))
    EnemyPassiveSkillLevel_vec = 0
    if 'EnemyPassiveSkillLevel' in data:
        EnemyPassiveSkillLevel_items = data['EnemyPassiveSkillLevel']
        GroundExcel.StartEnemyPassiveSkillLevelVector(builder, len(EnemyPassiveSkillLevel_items))
        for item in reversed(EnemyPassiveSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        EnemyPassiveSkillLevel_vec = builder.EndVector(len(EnemyPassiveSkillLevel_items))
    Id_val = convert_long(data.get('Id', 0), password)
    FormationGroupId_val = convert_long(data.get('FormationGroupId', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    EnemyBulletType_val = convert_int(getattr(BulletType, data.get('EnemyBulletType', 0)), password)
    EnemyArmorType_val = convert_int(getattr(ArmorType, data.get('EnemyArmorType', 0)), password)
    LevelNPC_val = convert_long(data.get('LevelNPC', 0), password)
    LevelMinion_val = convert_long(data.get('LevelMinion', 0), password)
    LevelElite_val = convert_long(data.get('LevelElite', 0), password)
    LevelChampion_val = convert_long(data.get('LevelChampion', 0), password)
    LevelBoss_val = convert_long(data.get('LevelBoss', 0), password)
    ObstacleLevel_val = convert_long(data.get('ObstacleLevel', 0), password)
    GradeNPC_val = convert_long(data.get('GradeNPC', 0), password)
    GradeMinion_val = convert_long(data.get('GradeMinion', 0), password)
    GradeElite_val = convert_long(data.get('GradeElite', 0), password)
    GradeChampion_val = convert_long(data.get('GradeChampion', 0), password)
    GradeBoss_val = convert_long(data.get('GradeBoss', 0), password)
    PlayerSightPointAdd_val = convert_long(data.get('PlayerSightPointAdd', 0), password)
    PlayerSightPointRate_val = convert_long(data.get('PlayerSightPointRate', 0), password)
    PlayerAttackRangeAdd_val = convert_long(data.get('PlayerAttackRangeAdd', 0), password)
    PlayerAttackRangeRate_val = convert_long(data.get('PlayerAttackRangeRate', 0), password)
    EnemySightPointAdd_val = convert_long(data.get('EnemySightPointAdd', 0), password)
    EnemySightPointRate_val = convert_long(data.get('EnemySightPointRate', 0), password)
    EnemyAttackRangeAdd_val = convert_long(data.get('EnemyAttackRangeAdd', 0), password)
    EnemyAttackRangeRate_val = convert_long(data.get('EnemyAttackRangeRate', 0), password)
    PlayerSkillRangeAdd_val = convert_long(data.get('PlayerSkillRangeAdd', 0), password)
    PlayerSkillRangeRate_val = convert_long(data.get('PlayerSkillRangeRate', 0), password)
    EnemySkillRangeAdd_val = convert_long(data.get('EnemySkillRangeAdd', 0), password)
    EnemySkillRangeRate_val = convert_long(data.get('EnemySkillRangeRate', 0), password)
    PlayerMinimumPositionGapRate_val = convert_long(data.get('PlayerMinimumPositionGapRate', 0), password)
    EnemyMinimumPositionGapRate_val = convert_long(data.get('EnemyMinimumPositionGapRate', 0), password)
    PlayerSightRangeMax_val = data.get('PlayerSightRangeMax', 0)
    EnemySightRangeMax_val = data.get('EnemySightRangeMax', 0)
    TSSAirUnitHeight_val = convert_long(data.get('TSSAirUnitHeight', 0), password)
    IsPhaseBGM_val = data.get('IsPhaseBGM', 0)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    WarningUI_val = data.get('WarningUI', 0)
    TSSHatchOpen_val = data.get('TSSHatchOpen', 0)
    ForcedTacticSpeed_val = convert_int(getattr(TacticSpeed, data.get('ForcedTacticSpeed', 0)), password)
    ForcedSkillUse_val = convert_int(getattr(TacticSkillUse, data.get('ForcedSkillUse', 0)), password)
    ShowNPCSkillCutIn_val = convert_int(getattr(ShowSkillCutIn, data.get('ShowNPCSkillCutIn', 0)), password)
    ImmuneHitBeforeTimeOutEnd_val = data.get('ImmuneHitBeforeTimeOutEnd', 0)
    UIBattleHideFromScratch_val = data.get('UIBattleHideFromScratch', 0)
    UIEnemyCount_val = convert_int(getattr(UIEnemyCountType, data.get('UIEnemyCount', 0)), password)
    SkipBattleEnd_val = data.get('SkipBattleEnd', 0)
    HideNPCWhenBattleEnd_val = data.get('HideNPCWhenBattleEnd', 0)
    CoverPointOff_val = data.get('CoverPointOff', 0)
    UIHpScale_val = encrypt_float(data.get('UIHpScale', 0), password)
    UIEmojiScale_val = encrypt_float(data.get('UIEmojiScale', 0), password)
    UISkillMainLogScale_val = encrypt_float(data.get('UISkillMainLogScale', 0), password)
    EffectCountLimit_val = convert_int(data.get('EffectCountLimit', 0), password)
    GroundExcel.Start(builder)
    GroundExcel.AddId(builder, Id_val)
    GroundExcel.AddStageFileName(builder, StageFileName_vec)
    GroundExcel.AddGroundSceneName(builder, GroundSceneName_off)
    GroundExcel.AddFormationGroupId(builder, FormationGroupId_val)
    GroundExcel.AddStageTopography(builder, StageTopography_val)
    GroundExcel.AddEnemyBulletType(builder, EnemyBulletType_val)
    GroundExcel.AddEnemyArmorType(builder, EnemyArmorType_val)
    GroundExcel.AddLevelNPC(builder, LevelNPC_val)
    GroundExcel.AddLevelMinion(builder, LevelMinion_val)
    GroundExcel.AddLevelElite(builder, LevelElite_val)
    GroundExcel.AddLevelChampion(builder, LevelChampion_val)
    GroundExcel.AddLevelBoss(builder, LevelBoss_val)
    GroundExcel.AddObstacleLevel(builder, ObstacleLevel_val)
    GroundExcel.AddGradeNPC(builder, GradeNPC_val)
    GroundExcel.AddGradeMinion(builder, GradeMinion_val)
    GroundExcel.AddGradeElite(builder, GradeElite_val)
    GroundExcel.AddGradeChampion(builder, GradeChampion_val)
    GroundExcel.AddGradeBoss(builder, GradeBoss_val)
    GroundExcel.AddPlayerSightPointAdd(builder, PlayerSightPointAdd_val)
    GroundExcel.AddPlayerSightPointRate(builder, PlayerSightPointRate_val)
    GroundExcel.AddPlayerAttackRangeAdd(builder, PlayerAttackRangeAdd_val)
    GroundExcel.AddPlayerAttackRangeRate(builder, PlayerAttackRangeRate_val)
    GroundExcel.AddEnemySightPointAdd(builder, EnemySightPointAdd_val)
    GroundExcel.AddEnemySightPointRate(builder, EnemySightPointRate_val)
    GroundExcel.AddEnemyAttackRangeAdd(builder, EnemyAttackRangeAdd_val)
    GroundExcel.AddEnemyAttackRangeRate(builder, EnemyAttackRangeRate_val)
    GroundExcel.AddPlayerSkillRangeAdd(builder, PlayerSkillRangeAdd_val)
    GroundExcel.AddPlayerSkillRangeRate(builder, PlayerSkillRangeRate_val)
    GroundExcel.AddEnemySkillRangeAdd(builder, EnemySkillRangeAdd_val)
    GroundExcel.AddEnemySkillRangeRate(builder, EnemySkillRangeRate_val)
    GroundExcel.AddPlayerMinimumPositionGapRate(builder, PlayerMinimumPositionGapRate_val)
    GroundExcel.AddEnemyMinimumPositionGapRate(builder, EnemyMinimumPositionGapRate_val)
    GroundExcel.AddPlayerSightRangeMax(builder, PlayerSightRangeMax_val)
    GroundExcel.AddEnemySightRangeMax(builder, EnemySightRangeMax_val)
    GroundExcel.AddTSSAirUnitHeight(builder, TSSAirUnitHeight_val)
    GroundExcel.AddIsPhaseBGM(builder, IsPhaseBGM_val)
    GroundExcel.AddBGMId(builder, BGMId_val)
    GroundExcel.AddWarningUI(builder, WarningUI_val)
    GroundExcel.AddTSSHatchOpen(builder, TSSHatchOpen_val)
    GroundExcel.AddForcedTacticSpeed(builder, ForcedTacticSpeed_val)
    GroundExcel.AddForcedSkillUse(builder, ForcedSkillUse_val)
    GroundExcel.AddShowNPCSkillCutIn(builder, ShowNPCSkillCutIn_val)
    GroundExcel.AddImmuneHitBeforeTimeOutEnd(builder, ImmuneHitBeforeTimeOutEnd_val)
    GroundExcel.AddUIBattleHideFromScratch(builder, UIBattleHideFromScratch_val)
    GroundExcel.AddUIEnemyCount(builder, UIEnemyCount_val)
    GroundExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePath_off)
    GroundExcel.AddBeforeVictoryTimelinePath(builder, BeforeVictoryTimelinePath_off)
    GroundExcel.AddSkipBattleEnd(builder, SkipBattleEnd_val)
    GroundExcel.AddHideNPCWhenBattleEnd(builder, HideNPCWhenBattleEnd_val)
    GroundExcel.AddCoverPointOff(builder, CoverPointOff_val)
    GroundExcel.AddUIHpScale(builder, UIHpScale_val)
    GroundExcel.AddUIEmojiScale(builder, UIEmojiScale_val)
    GroundExcel.AddUISkillMainLogScale(builder, UISkillMainLogScale_val)
    GroundExcel.AddEffectCountLimit(builder, EffectCountLimit_val)
    GroundExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillId_vec)
    GroundExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevel_vec)
    GroundExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillId_vec)
    GroundExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevel_vec)
    return GroundExcel.End(builder)

def pack_GroundModuleRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GroundModuleReward") if encrypt else None
    DropItemModelPrefabPath_off = builder.CreateString(encrypt_string(data.get('DropItemModelPrefabPath', ''), password))
    GroupId_val = convert_uint(data.get('GroupId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    RewardParcelProbability_val = convert_long(data.get('RewardParcelProbability', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    GroundModuleRewardExcel.Start(builder)
    GroundModuleRewardExcel.AddGroupId(builder, GroupId_val)
    GroundModuleRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    GroundModuleRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    GroundModuleRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    GroundModuleRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability_val)
    GroundModuleRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    GroundModuleRewardExcel.AddDropItemModelPrefabPath(builder, DropItemModelPrefabPath_off)
    return GroundModuleRewardExcel.End(builder)

def pack_GrowthScoreCalculationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GrowthScoreCalculation") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    IncludeGrowthFactor_val = convert_int(getattr(GrowthFactor, data.get('IncludeGrowthFactor', 0)), password)
    ConversionCoefficient_val = convert_long(data.get('ConversionCoefficient', 0), password)
    GrowthScoreCalculationExcel.Start(builder)
    GrowthScoreCalculationExcel.AddId(builder, Id_val)
    GrowthScoreCalculationExcel.AddIncludeGrowthFactor(builder, IncludeGrowthFactor_val)
    GrowthScoreCalculationExcel.AddConversionCoefficient(builder, ConversionCoefficient_val)
    return GrowthScoreCalculationExcel.End(builder)

def pack_GuideMissionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GuideMission") if encrypt else None
    ToastImagePath_off = builder.CreateString(encrypt_string(data.get('ToastImagePath', ''), password))
    PreMissionId_vec = 0
    if 'PreMissionId' in data:
        PreMissionId_items = data['PreMissionId']
        GuideMissionExcel.StartPreMissionIdVector(builder, len(PreMissionId_items))
        for item in reversed(PreMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        PreMissionId_vec = builder.EndVector(len(PreMissionId_items))
    ShortcutUI_vec = 0
    if 'ShortcutUI' in data:
        ShortcutUI_items = data['ShortcutUI']
        ShortcutUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUI_items]
        GuideMissionExcel.StartShortcutUIVector(builder, len(ShortcutUI_str_offsets))
        for offset in reversed(ShortcutUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUI_vec = builder.EndVector(len(ShortcutUI_items))
    CompleteConditionParameter_vec = 0
    if 'CompleteConditionParameter' in data:
        CompleteConditionParameter_items = data['CompleteConditionParameter']
        GuideMissionExcel.StartCompleteConditionParameterVector(builder, len(CompleteConditionParameter_items))
        for item in reversed(CompleteConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionParameter_vec = builder.EndVector(len(CompleteConditionParameter_items))
    CompleteConditionParameterTag_vec = 0
    if 'CompleteConditionParameterTag' in data:
        CompleteConditionParameterTag_items = data['CompleteConditionParameterTag']
        GuideMissionExcel.StartCompleteConditionParameterTagVector(builder, len(CompleteConditionParameterTag_items))
        for item in reversed(CompleteConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CompleteConditionParameterTag_vec = builder.EndVector(len(CompleteConditionParameterTag_items))
    MissionRewardParcelType_vec = 0
    if 'MissionRewardParcelType' in data:
        MissionRewardParcelType_items = data['MissionRewardParcelType']
        GuideMissionExcel.StartMissionRewardParcelTypeVector(builder, len(MissionRewardParcelType_items))
        for item in reversed(MissionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        MissionRewardParcelType_vec = builder.EndVector(len(MissionRewardParcelType_items))
    MissionRewardParcelId_vec = 0
    if 'MissionRewardParcelId' in data:
        MissionRewardParcelId_items = data['MissionRewardParcelId']
        GuideMissionExcel.StartMissionRewardParcelIdVector(builder, len(MissionRewardParcelId_items))
        for item in reversed(MissionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        MissionRewardParcelId_vec = builder.EndVector(len(MissionRewardParcelId_items))
    MissionRewardAmount_vec = 0
    if 'MissionRewardAmount' in data:
        MissionRewardAmount_items = data['MissionRewardAmount']
        GuideMissionExcel.StartMissionRewardAmountVector(builder, len(MissionRewardAmount_items))
        for item in reversed(MissionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        MissionRewardAmount_vec = builder.EndVector(len(MissionRewardAmount_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    Category_val = convert_int(getattr(MissionCategory, data.get('Category', 0)), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    TabNumber_val = convert_long(data.get('TabNumber', 0), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    ToastDisplayType_val = convert_int(getattr(MissionToastDisplayConditionType, data.get('ToastDisplayType', 0)), password)
    CompleteConditionType_val = convert_int(getattr(MissionCompleteConditionType, data.get('CompleteConditionType', 0)), password)
    CompleteConditionCount_val = convert_long(data.get('CompleteConditionCount', 0), password)
    IsAutoClearForScenario_val = data.get('IsAutoClearForScenario', 0)
    GuideMissionExcel.Start(builder)
    GuideMissionExcel.AddSeasonId(builder, SeasonId_val)
    GuideMissionExcel.AddId(builder, Id_val)
    GuideMissionExcel.AddCategory(builder, Category_val)
    GuideMissionExcel.AddIsLegacy(builder, IsLegacy_val)
    GuideMissionExcel.AddTabNumber(builder, TabNumber_val)
    GuideMissionExcel.AddPreMissionId(builder, PreMissionId_vec)
    GuideMissionExcel.AddDescription(builder, Description_val)
    GuideMissionExcel.AddToastDisplayType(builder, ToastDisplayType_val)
    GuideMissionExcel.AddToastImagePath(builder, ToastImagePath_off)
    GuideMissionExcel.AddShortcutUI(builder, ShortcutUI_vec)
    GuideMissionExcel.AddCompleteConditionType(builder, CompleteConditionType_val)
    GuideMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount_val)
    GuideMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameter_vec)
    GuideMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTag_vec)
    GuideMissionExcel.AddIsAutoClearForScenario(builder, IsAutoClearForScenario_val)
    GuideMissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelType_vec)
    GuideMissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelId_vec)
    GuideMissionExcel.AddMissionRewardAmount(builder, MissionRewardAmount_vec)
    return GuideMissionExcel.End(builder)

def pack_GuideMissionOpenStageConditionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GuideMissionOpenStageCondition") if encrypt else None
    TabLocalizeCode_off = builder.CreateString(encrypt_string(data.get('TabLocalizeCode', ''), password))
    LockScenarioTextLocailzeCode_off = builder.CreateString(encrypt_string(data.get('LockScenarioTextLocailzeCode', ''), password))
    ShortcutScenarioUI_off = builder.CreateString(encrypt_string(data.get('ShortcutScenarioUI', ''), password))
    LockStageTextLocailzeCode_off = builder.CreateString(encrypt_string(data.get('LockStageTextLocailzeCode', ''), password))
    ShortcutStageUI_off = builder.CreateString(encrypt_string(data.get('ShortcutStageUI', ''), password))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    OrderNumber_val = convert_long(data.get('OrderNumber', 0), password)
    ClearScenarioModeId_val = convert_long(data.get('ClearScenarioModeId', 0), password)
    ClearStageId_val = convert_long(data.get('ClearStageId', 0), password)
    GuideMissionOpenStageConditionExcel.Start(builder)
    GuideMissionOpenStageConditionExcel.AddSeasonId(builder, SeasonId_val)
    GuideMissionOpenStageConditionExcel.AddOrderNumber(builder, OrderNumber_val)
    GuideMissionOpenStageConditionExcel.AddTabLocalizeCode(builder, TabLocalizeCode_off)
    GuideMissionOpenStageConditionExcel.AddClearScenarioModeId(builder, ClearScenarioModeId_val)
    GuideMissionOpenStageConditionExcel.AddLockScenarioTextLocailzeCode(builder, LockScenarioTextLocailzeCode_off)
    GuideMissionOpenStageConditionExcel.AddShortcutScenarioUI(builder, ShortcutScenarioUI_off)
    GuideMissionOpenStageConditionExcel.AddClearStageId(builder, ClearStageId_val)
    GuideMissionOpenStageConditionExcel.AddLockStageTextLocailzeCode(builder, LockStageTextLocailzeCode_off)
    GuideMissionOpenStageConditionExcel.AddShortcutStageUI(builder, ShortcutStageUI_off)
    return GuideMissionOpenStageConditionExcel.End(builder)

def pack_GuideMissionSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("GuideMissionSeason") if encrypt else None
    TitleLocalizeCode_off = builder.CreateString(encrypt_string(data.get('TitleLocalizeCode', ''), password))
    PermanentInfomationLocalizeCode_off = builder.CreateString(encrypt_string(data.get('PermanentInfomationLocalizeCode', ''), password))
    InfomationLocalizeCode_off = builder.CreateString(encrypt_string(data.get('InfomationLocalizeCode', ''), password))
    BannerOpenDate_off = builder.CreateString(encrypt_string(data.get('BannerOpenDate', ''), password))
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    StartableEndDate_off = builder.CreateString(encrypt_string(data.get('StartableEndDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    RequirementParcelImage_off = builder.CreateString(encrypt_string(data.get('RequirementParcelImage', ''), password))
    RewardImage_off = builder.CreateString(encrypt_string(data.get('RewardImage', ''), password))
    LobbyBannerImage_off = builder.CreateString(encrypt_string(data.get('LobbyBannerImage', ''), password))
    BackgroundImage_off = builder.CreateString(encrypt_string(data.get('BackgroundImage', ''), password))
    TitleImage_off = builder.CreateString(encrypt_string(data.get('TitleImage', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    AccountType_val = convert_int(getattr(AccountState, data.get('AccountType', 0)), password)
    Enabled_val = data.get('Enabled', 0)
    CloseBannerAfterCompletion_val = data.get('CloseBannerAfterCompletion', 0)
    MaximumLoginCount_val = convert_long(data.get('MaximumLoginCount', 0), password)
    ExpiryDate_val = convert_long(data.get('ExpiryDate', 0), password)
    IconOrder_val = convert_long(data.get('IconOrder', 0), password)
    SpineCharacterId_val = convert_long(data.get('SpineCharacterId', 0), password)
    RequirementParcelType_val = convert_int(getattr(ParcelType, data.get('RequirementParcelType', 0)), password)
    RequirementParcelId_val = convert_long(data.get('RequirementParcelId', 0), password)
    RequirementParcelAmount_val = convert_int(data.get('RequirementParcelAmount', 0), password)
    TabType_val = convert_int(getattr(GuideMissionTabType, data.get('TabType', 0)), password)
    IsPermanent_val = data.get('IsPermanent', 0)
    PreSeasonId_val = convert_long(data.get('PreSeasonId', 0), password)
    GuideMissionSeasonExcel.Start(builder)
    GuideMissionSeasonExcel.AddId(builder, Id_val)
    GuideMissionSeasonExcel.AddTitleLocalizeCode(builder, TitleLocalizeCode_off)
    GuideMissionSeasonExcel.AddPermanentInfomationLocalizeCode(builder, PermanentInfomationLocalizeCode_off)
    GuideMissionSeasonExcel.AddInfomationLocalizeCode(builder, InfomationLocalizeCode_off)
    GuideMissionSeasonExcel.AddAccountType(builder, AccountType_val)
    GuideMissionSeasonExcel.AddEnabled(builder, Enabled_val)
    GuideMissionSeasonExcel.AddBannerOpenDate(builder, BannerOpenDate_off)
    GuideMissionSeasonExcel.AddStartDate(builder, StartDate_off)
    GuideMissionSeasonExcel.AddStartableEndDate(builder, StartableEndDate_off)
    GuideMissionSeasonExcel.AddEndDate(builder, EndDate_off)
    GuideMissionSeasonExcel.AddCloseBannerAfterCompletion(builder, CloseBannerAfterCompletion_val)
    GuideMissionSeasonExcel.AddMaximumLoginCount(builder, MaximumLoginCount_val)
    GuideMissionSeasonExcel.AddExpiryDate(builder, ExpiryDate_val)
    GuideMissionSeasonExcel.AddIconOrder(builder, IconOrder_val)
    GuideMissionSeasonExcel.AddSpineCharacterId(builder, SpineCharacterId_val)
    GuideMissionSeasonExcel.AddRequirementParcelImage(builder, RequirementParcelImage_off)
    GuideMissionSeasonExcel.AddRewardImage(builder, RewardImage_off)
    GuideMissionSeasonExcel.AddLobbyBannerImage(builder, LobbyBannerImage_off)
    GuideMissionSeasonExcel.AddBackgroundImage(builder, BackgroundImage_off)
    GuideMissionSeasonExcel.AddTitleImage(builder, TitleImage_off)
    GuideMissionSeasonExcel.AddRequirementParcelType(builder, RequirementParcelType_val)
    GuideMissionSeasonExcel.AddRequirementParcelId(builder, RequirementParcelId_val)
    GuideMissionSeasonExcel.AddRequirementParcelAmount(builder, RequirementParcelAmount_val)
    GuideMissionSeasonExcel.AddTabType(builder, TabType_val)
    GuideMissionSeasonExcel.AddIsPermanent(builder, IsPermanent_val)
    GuideMissionSeasonExcel.AddPreSeasonId(builder, PreSeasonId_val)
    return GuideMissionSeasonExcel.End(builder)

def pack_HpBarAbbreviationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("HpBarAbbreviation") if encrypt else None
    MonsterLv_val = convert_int(data.get('MonsterLv', 0), password)
    StandardHpBar_val = convert_int(data.get('StandardHpBar', 0), password)
    RaidBossHpBar_val = convert_int(data.get('RaidBossHpBar', 0), password)
    HpBarAbbreviationExcel.Start(builder)
    HpBarAbbreviationExcel.AddMonsterLv(builder, MonsterLv_val)
    HpBarAbbreviationExcel.AddStandardHpBar(builder, StandardHpBar_val)
    HpBarAbbreviationExcel.AddRaidBossHpBar(builder, RaidBossHpBar_val)
    return HpBarAbbreviationExcel.End(builder)

def pack_IdCardBackgroundExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("IdCardBackground") if encrypt else None
    BgPath_off = builder.CreateString(encrypt_string(data.get('BgPath', ''), password))
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    CollectionVisible_val = data.get('CollectionVisible', 0)
    IsDefault_val = data.get('IsDefault', 0)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    IdCardBackgroundExcel.Start(builder)
    IdCardBackgroundExcel.AddId(builder, Id_val)
    IdCardBackgroundExcel.AddRarity(builder, Rarity_val)
    IdCardBackgroundExcel.AddDisplayOrder(builder, DisplayOrder_val)
    IdCardBackgroundExcel.AddCollectionVisible(builder, CollectionVisible_val)
    IdCardBackgroundExcel.AddIsDefault(builder, IsDefault_val)
    IdCardBackgroundExcel.AddBgPath(builder, BgPath_off)
    IdCardBackgroundExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    IdCardBackgroundExcel.AddIcon(builder, Icon_off)
    return IdCardBackgroundExcel.End(builder)

def pack_InformationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Information") if encrypt else None
    PageName_off = builder.CreateString(encrypt_string(data.get('PageName', ''), password))
    LocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('LocalizeCodeId', ''), password))
    TutorialParentName_vec = 0
    if 'TutorialParentName' in data:
        TutorialParentName_items = data['TutorialParentName']
        TutorialParentName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in TutorialParentName_items]
        InformationExcel.StartTutorialParentNameVector(builder, len(TutorialParentName_str_offsets))
        for offset in reversed(TutorialParentName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        TutorialParentName_vec = builder.EndVector(len(TutorialParentName_items))
    UIName_vec = 0
    if 'UIName' in data:
        UIName_items = data['UIName']
        UIName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in UIName_items]
        InformationExcel.StartUINameVector(builder, len(UIName_str_offsets))
        for offset in reversed(UIName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        UIName_vec = builder.EndVector(len(UIName_items))
    GroupID_val = convert_long(data.get('GroupID', 0), password)
    InformationExcel.Start(builder)
    InformationExcel.AddGroupID(builder, GroupID_val)
    InformationExcel.AddPageName(builder, PageName_off)
    InformationExcel.AddLocalizeCodeId(builder, LocalizeCodeId_off)
    InformationExcel.AddTutorialParentName(builder, TutorialParentName_vec)
    InformationExcel.AddUIName(builder, UIName_vec)
    return InformationExcel.End(builder)

def pack_InformationStrategyObjectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("InformationStrategyObject") if encrypt else None
    PageName_off = builder.CreateString(encrypt_string(data.get('PageName', ''), password))
    LocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('LocalizeCodeId', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    StageId_val = convert_long(data.get('StageId', 0), password)
    InformationStrategyObjectExcel.Start(builder)
    InformationStrategyObjectExcel.AddId(builder, Id_val)
    InformationStrategyObjectExcel.AddStageId(builder, StageId_val)
    InformationStrategyObjectExcel.AddPageName(builder, PageName_off)
    InformationStrategyObjectExcel.AddLocalizeCodeId(builder, LocalizeCodeId_off)
    return InformationStrategyObjectExcel.End(builder)

def pack_ItemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Item") if encrypt else None
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    SpriteName_off = builder.CreateString(encrypt_string(data.get('SpriteName', ''), password))
    ExpirationDateTime_off = builder.CreateString(encrypt_string(data.get('ExpirationDateTime', ''), password))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        ItemExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    ShopCategory_vec = 0
    if 'ShopCategory' in data:
        ShopCategory_items = data['ShopCategory']
        ItemExcel.StartShopCategoryVector(builder, len(ShopCategory_items))
        for item in reversed(ShopCategory_items):
            builder.PrependInt32(convert_int(getattr(ShopCategoryType, item), password))
        ShopCategory_vec = builder.EndVector(len(ShopCategory_items))
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    Rarity_val = convert_int(getattr(Rarity, data.get('Rarity', 0)), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    ItemCategory_val = convert_int(getattr(ItemCategory, data.get('ItemCategory', 0)), password)
    Quality_val = convert_long(data.get('Quality', 0), password)
    StackableMax_val = convert_int(data.get('StackableMax', 0), password)
    StackableFunction_val = convert_int(data.get('StackableFunction', 0), password)
    ImmediateUse_val = data.get('ImmediateUse', 0)
    UsingResultParcelType_val = convert_int(getattr(ParcelType, data.get('UsingResultParcelType', 0)), password)
    UsingResultId_val = convert_long(data.get('UsingResultId', 0), password)
    UsingResultAmount_val = convert_long(data.get('UsingResultAmount', 0), password)
    MailType_val = convert_int(getattr(MailType, data.get('MailType', 0)), password)
    ExpiryChangeParcelType_val = convert_int(getattr(ParcelType, data.get('ExpiryChangeParcelType', 0)), password)
    ExpiryChangeId_val = convert_long(data.get('ExpiryChangeId', 0), password)
    ExpiryChangeAmount_val = convert_long(data.get('ExpiryChangeAmount', 0), password)
    CanTierUpgrade_val = data.get('CanTierUpgrade', 0)
    TierUpgradeRecipeCraftId_val = convert_long(data.get('TierUpgradeRecipeCraftId', 0), password)
    CraftQualityTier0_val = convert_long(data.get('CraftQualityTier0', 0), password)
    CraftQualityTier1_val = convert_long(data.get('CraftQualityTier1', 0), password)
    CraftQualityTier2_val = convert_long(data.get('CraftQualityTier2', 0), password)
    ShiftingCraftQuality_val = convert_long(data.get('ShiftingCraftQuality', 0), password)
    MaxGiftTags_val = convert_int(data.get('MaxGiftTags', 0), password)
    ExpirationNotifyDateIn_val = convert_int(data.get('ExpirationNotifyDateIn', 0), password)
    ShortcutTypeId_val = convert_long(data.get('ShortcutTypeId', 0), password)
    GachaTicket_val = convert_int(getattr(GachaTicketType, data.get('GachaTicket', 0)), password)
    ItemExcel.Start(builder)
    ItemExcel.AddId(builder, Id_val)
    ItemExcel.AddGroupId(builder, GroupId_val)
    ItemExcel.AddRarity(builder, Rarity_val)
    ItemExcel.AddProductionStep(builder, ProductionStep_val)
    ItemExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    ItemExcel.AddItemCategory(builder, ItemCategory_val)
    ItemExcel.AddQuality(builder, Quality_val)
    ItemExcel.AddIcon(builder, Icon_off)
    ItemExcel.AddSpriteName(builder, SpriteName_off)
    ItemExcel.AddStackableMax(builder, StackableMax_val)
    ItemExcel.AddStackableFunction(builder, StackableFunction_val)
    ItemExcel.AddImmediateUse(builder, ImmediateUse_val)
    ItemExcel.AddUsingResultParcelType(builder, UsingResultParcelType_val)
    ItemExcel.AddUsingResultId(builder, UsingResultId_val)
    ItemExcel.AddUsingResultAmount(builder, UsingResultAmount_val)
    ItemExcel.AddMailType(builder, MailType_val)
    ItemExcel.AddExpiryChangeParcelType(builder, ExpiryChangeParcelType_val)
    ItemExcel.AddExpiryChangeId(builder, ExpiryChangeId_val)
    ItemExcel.AddExpiryChangeAmount(builder, ExpiryChangeAmount_val)
    ItemExcel.AddCanTierUpgrade(builder, CanTierUpgrade_val)
    ItemExcel.AddTierUpgradeRecipeCraftId(builder, TierUpgradeRecipeCraftId_val)
    ItemExcel.AddTags(builder, Tags_vec)
    ItemExcel.AddCraftQualityTier0(builder, CraftQualityTier0_val)
    ItemExcel.AddCraftQualityTier1(builder, CraftQualityTier1_val)
    ItemExcel.AddCraftQualityTier2(builder, CraftQualityTier2_val)
    ItemExcel.AddShiftingCraftQuality(builder, ShiftingCraftQuality_val)
    ItemExcel.AddMaxGiftTags(builder, MaxGiftTags_val)
    ItemExcel.AddShopCategory(builder, ShopCategory_vec)
    ItemExcel.AddExpirationDateTime(builder, ExpirationDateTime_off)
    ItemExcel.AddExpirationNotifyDateIn(builder, ExpirationNotifyDateIn_val)
    ItemExcel.AddShortcutTypeId(builder, ShortcutTypeId_val)
    ItemExcel.AddGachaTicket(builder, GachaTicket_val)
    return ItemExcel.End(builder)

def pack_LevelExpMasterCoinExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LevelExpMasterCoin") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    MinLevel_val = convert_int(data.get('MinLevel', 0), password)
    MaxLevel_val = convert_int(data.get('MaxLevel', 0), password)
    Ratio_val = convert_int(data.get('Ratio', 0), password)
    LevelExpMasterCoinExcel.Start(builder)
    LevelExpMasterCoinExcel.AddId(builder, Id_val)
    LevelExpMasterCoinExcel.AddMinLevel(builder, MinLevel_val)
    LevelExpMasterCoinExcel.AddMaxLevel(builder, MaxLevel_val)
    LevelExpMasterCoinExcel.AddRatio(builder, Ratio_val)
    return LevelExpMasterCoinExcel.End(builder)

def pack_LoadingImageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LoadingImage") if encrypt else None
    ImagePathKr_off = builder.CreateString(encrypt_string(data.get('ImagePathKr', ''), password))
    ImagePathJp_off = builder.CreateString(encrypt_string(data.get('ImagePathJp', ''), password))
    ID_val = convert_long(data.get('ID', 0), password)
    DisplayWeight_val = convert_int(data.get('DisplayWeight', 0), password)
    LoadingImageExcel.Start(builder)
    LoadingImageExcel.AddID(builder, ID_val)
    LoadingImageExcel.AddImagePathKr(builder, ImagePathKr_off)
    LoadingImageExcel.AddImagePathJp(builder, ImagePathJp_off)
    LoadingImageExcel.AddDisplayWeight(builder, DisplayWeight_val)
    return LoadingImageExcel.End(builder)

def pack_LocalizeCharProfileChangeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeCharProfileChange") if encrypt else None
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    ScenarioModeId_val = convert_long(data.get('ScenarioModeId', 0), password)
    ChangeCharacterID_val = convert_long(data.get('ChangeCharacterID', 0), password)
    LocalizeCharProfileChangeExcel.Start(builder)
    LocalizeCharProfileChangeExcel.AddCharacterId(builder, CharacterId_val)
    LocalizeCharProfileChangeExcel.AddScenarioModeId(builder, ScenarioModeId_val)
    LocalizeCharProfileChangeExcel.AddChangeCharacterID(builder, ChangeCharacterID_val)
    return LocalizeCharProfileChangeExcel.End(builder)

def pack_LocalizeCharProfileExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeCharProfile") if encrypt else None
    StatusMessageKr_off = builder.CreateString(encrypt_string(data.get('StatusMessageKr', ''), password))
    StatusMessageJp_off = builder.CreateString(encrypt_string(data.get('StatusMessageJp', ''), password))
    FullNameKr_off = builder.CreateString(encrypt_string(data.get('FullNameKr', ''), password))
    FullNameJp_off = builder.CreateString(encrypt_string(data.get('FullNameJp', ''), password))
    FamilyNameKr_off = builder.CreateString(encrypt_string(data.get('FamilyNameKr', ''), password))
    FamilyNameRubyKr_off = builder.CreateString(encrypt_string(data.get('FamilyNameRubyKr', ''), password))
    PersonalNameKr_off = builder.CreateString(encrypt_string(data.get('PersonalNameKr', ''), password))
    PersonalNameRubyKr_off = builder.CreateString(encrypt_string(data.get('PersonalNameRubyKr', ''), password))
    FamilyNameJp_off = builder.CreateString(encrypt_string(data.get('FamilyNameJp', ''), password))
    FamilyNameRubyJp_off = builder.CreateString(encrypt_string(data.get('FamilyNameRubyJp', ''), password))
    PersonalNameJp_off = builder.CreateString(encrypt_string(data.get('PersonalNameJp', ''), password))
    PersonalNameRubyJp_off = builder.CreateString(encrypt_string(data.get('PersonalNameRubyJp', ''), password))
    SchoolYearKr_off = builder.CreateString(encrypt_string(data.get('SchoolYearKr', ''), password))
    SchoolYearJp_off = builder.CreateString(encrypt_string(data.get('SchoolYearJp', ''), password))
    CharacterAgeKr_off = builder.CreateString(encrypt_string(data.get('CharacterAgeKr', ''), password))
    CharacterAgeJp_off = builder.CreateString(encrypt_string(data.get('CharacterAgeJp', ''), password))
    BirthDay_off = builder.CreateString(encrypt_string(data.get('BirthDay', ''), password))
    BirthdayKr_off = builder.CreateString(encrypt_string(data.get('BirthdayKr', ''), password))
    BirthdayJp_off = builder.CreateString(encrypt_string(data.get('BirthdayJp', ''), password))
    CharHeightKr_off = builder.CreateString(encrypt_string(data.get('CharHeightKr', ''), password))
    CharHeightJp_off = builder.CreateString(encrypt_string(data.get('CharHeightJp', ''), password))
    DesignerNameKr_off = builder.CreateString(encrypt_string(data.get('DesignerNameKr', ''), password))
    DesignerNameJp_off = builder.CreateString(encrypt_string(data.get('DesignerNameJp', ''), password))
    IllustratorNameKr_off = builder.CreateString(encrypt_string(data.get('IllustratorNameKr', ''), password))
    IllustratorNameJp_off = builder.CreateString(encrypt_string(data.get('IllustratorNameJp', ''), password))
    CharacterVoiceKr_off = builder.CreateString(encrypt_string(data.get('CharacterVoiceKr', ''), password))
    CharacterVoiceJp_off = builder.CreateString(encrypt_string(data.get('CharacterVoiceJp', ''), password))
    HobbyKr_off = builder.CreateString(encrypt_string(data.get('HobbyKr', ''), password))
    HobbyJp_off = builder.CreateString(encrypt_string(data.get('HobbyJp', ''), password))
    WeaponNameKr_off = builder.CreateString(encrypt_string(data.get('WeaponNameKr', ''), password))
    WeaponDescKr_off = builder.CreateString(encrypt_string(data.get('WeaponDescKr', ''), password))
    WeaponNameJp_off = builder.CreateString(encrypt_string(data.get('WeaponNameJp', ''), password))
    WeaponDescJp_off = builder.CreateString(encrypt_string(data.get('WeaponDescJp', ''), password))
    ProfileIntroductionKr_off = builder.CreateString(encrypt_string(data.get('ProfileIntroductionKr', ''), password))
    ProfileIntroductionJp_off = builder.CreateString(encrypt_string(data.get('ProfileIntroductionJp', ''), password))
    CharacterSSRNewKr_off = builder.CreateString(encrypt_string(data.get('CharacterSSRNewKr', ''), password))
    CharacterSSRNewJp_off = builder.CreateString(encrypt_string(data.get('CharacterSSRNewJp', ''), password))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    LocalizeCharProfileExcel.Start(builder)
    LocalizeCharProfileExcel.AddCharacterId(builder, CharacterId_val)
    LocalizeCharProfileExcel.AddStatusMessageKr(builder, StatusMessageKr_off)
    LocalizeCharProfileExcel.AddStatusMessageJp(builder, StatusMessageJp_off)
    LocalizeCharProfileExcel.AddFullNameKr(builder, FullNameKr_off)
    LocalizeCharProfileExcel.AddFullNameJp(builder, FullNameJp_off)
    LocalizeCharProfileExcel.AddFamilyNameKr(builder, FamilyNameKr_off)
    LocalizeCharProfileExcel.AddFamilyNameRubyKr(builder, FamilyNameRubyKr_off)
    LocalizeCharProfileExcel.AddPersonalNameKr(builder, PersonalNameKr_off)
    LocalizeCharProfileExcel.AddPersonalNameRubyKr(builder, PersonalNameRubyKr_off)
    LocalizeCharProfileExcel.AddFamilyNameJp(builder, FamilyNameJp_off)
    LocalizeCharProfileExcel.AddFamilyNameRubyJp(builder, FamilyNameRubyJp_off)
    LocalizeCharProfileExcel.AddPersonalNameJp(builder, PersonalNameJp_off)
    LocalizeCharProfileExcel.AddPersonalNameRubyJp(builder, PersonalNameRubyJp_off)
    LocalizeCharProfileExcel.AddSchoolYearKr(builder, SchoolYearKr_off)
    LocalizeCharProfileExcel.AddSchoolYearJp(builder, SchoolYearJp_off)
    LocalizeCharProfileExcel.AddCharacterAgeKr(builder, CharacterAgeKr_off)
    LocalizeCharProfileExcel.AddCharacterAgeJp(builder, CharacterAgeJp_off)
    LocalizeCharProfileExcel.AddBirthDay(builder, BirthDay_off)
    LocalizeCharProfileExcel.AddBirthdayKr(builder, BirthdayKr_off)
    LocalizeCharProfileExcel.AddBirthdayJp(builder, BirthdayJp_off)
    LocalizeCharProfileExcel.AddCharHeightKr(builder, CharHeightKr_off)
    LocalizeCharProfileExcel.AddCharHeightJp(builder, CharHeightJp_off)
    LocalizeCharProfileExcel.AddDesignerNameKr(builder, DesignerNameKr_off)
    LocalizeCharProfileExcel.AddDesignerNameJp(builder, DesignerNameJp_off)
    LocalizeCharProfileExcel.AddIllustratorNameKr(builder, IllustratorNameKr_off)
    LocalizeCharProfileExcel.AddIllustratorNameJp(builder, IllustratorNameJp_off)
    LocalizeCharProfileExcel.AddCharacterVoiceKr(builder, CharacterVoiceKr_off)
    LocalizeCharProfileExcel.AddCharacterVoiceJp(builder, CharacterVoiceJp_off)
    LocalizeCharProfileExcel.AddHobbyKr(builder, HobbyKr_off)
    LocalizeCharProfileExcel.AddHobbyJp(builder, HobbyJp_off)
    LocalizeCharProfileExcel.AddWeaponNameKr(builder, WeaponNameKr_off)
    LocalizeCharProfileExcel.AddWeaponDescKr(builder, WeaponDescKr_off)
    LocalizeCharProfileExcel.AddWeaponNameJp(builder, WeaponNameJp_off)
    LocalizeCharProfileExcel.AddWeaponDescJp(builder, WeaponDescJp_off)
    LocalizeCharProfileExcel.AddProfileIntroductionKr(builder, ProfileIntroductionKr_off)
    LocalizeCharProfileExcel.AddProfileIntroductionJp(builder, ProfileIntroductionJp_off)
    LocalizeCharProfileExcel.AddCharacterSSRNewKr(builder, CharacterSSRNewKr_off)
    LocalizeCharProfileExcel.AddCharacterSSRNewJp(builder, CharacterSSRNewJp_off)
    return LocalizeCharProfileExcel.End(builder)

def pack_LocalizeCodeInBuildExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeCodeInBuild") if encrypt else None
    Kr_off = builder.CreateString(encrypt_string(data.get('Kr', ''), password))
    Jp_off = builder.CreateString(encrypt_string(data.get('Jp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeCodeInBuildExcel.Start(builder)
    LocalizeCodeInBuildExcel.AddKey(builder, Key_val)
    LocalizeCodeInBuildExcel.AddKr(builder, Kr_off)
    LocalizeCodeInBuildExcel.AddJp(builder, Jp_off)
    return LocalizeCodeInBuildExcel.End(builder)

def pack_LocalizeErrorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeError") if encrypt else None
    Kr_off = builder.CreateString(encrypt_string(data.get('Kr', ''), password))
    Jp_off = builder.CreateString(encrypt_string(data.get('Jp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    ErrorLevel_val = convert_int(getattr(WebAPIErrorLevel, data.get('ErrorLevel', 0)), password)
    LocalizeErrorExcel.Start(builder)
    LocalizeErrorExcel.AddKey(builder, Key_val)
    LocalizeErrorExcel.AddErrorLevel(builder, ErrorLevel_val)
    LocalizeErrorExcel.AddKr(builder, Kr_off)
    LocalizeErrorExcel.AddJp(builder, Jp_off)
    return LocalizeErrorExcel.End(builder)

def pack_LocalizeEtcExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeEtc") if encrypt else None
    NameKr_off = builder.CreateString(encrypt_string(data.get('NameKr', ''), password))
    DescriptionKr_off = builder.CreateString(encrypt_string(data.get('DescriptionKr', ''), password))
    NameJp_off = builder.CreateString(encrypt_string(data.get('NameJp', ''), password))
    DescriptionJp_off = builder.CreateString(encrypt_string(data.get('DescriptionJp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeEtcExcel.Start(builder)
    LocalizeEtcExcel.AddKey(builder, Key_val)
    LocalizeEtcExcel.AddNameKr(builder, NameKr_off)
    LocalizeEtcExcel.AddDescriptionKr(builder, DescriptionKr_off)
    LocalizeEtcExcel.AddNameJp(builder, NameJp_off)
    LocalizeEtcExcel.AddDescriptionJp(builder, DescriptionJp_off)
    return LocalizeEtcExcel.End(builder)

def pack_LocalizeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Localize") if encrypt else None
    Kr_off = builder.CreateString(encrypt_string(data.get('Kr', ''), password))
    Jp_off = builder.CreateString(encrypt_string(data.get('Jp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeExcel.Start(builder)
    LocalizeExcel.AddKey(builder, Key_val)
    LocalizeExcel.AddKr(builder, Kr_off)
    LocalizeExcel.AddJp(builder, Jp_off)
    return LocalizeExcel.End(builder)

def pack_LocalizeGachaShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeGachaShop") if encrypt else None
    TabNameKr_off = builder.CreateString(encrypt_string(data.get('TabNameKr', ''), password))
    TabNameJp_off = builder.CreateString(encrypt_string(data.get('TabNameJp', ''), password))
    TitleNameKr_off = builder.CreateString(encrypt_string(data.get('TitleNameKr', ''), password))
    TitleNameJp_off = builder.CreateString(encrypt_string(data.get('TitleNameJp', ''), password))
    SubTitleKr_off = builder.CreateString(encrypt_string(data.get('SubTitleKr', ''), password))
    SubTitleJp_off = builder.CreateString(encrypt_string(data.get('SubTitleJp', ''), password))
    GachaDescriptionKr_off = builder.CreateString(encrypt_string(data.get('GachaDescriptionKr', ''), password))
    GachaDescriptionJp_off = builder.CreateString(encrypt_string(data.get('GachaDescriptionJp', ''), password))
    GachaShopId_val = convert_long(data.get('GachaShopId', 0), password)
    LocalizeGachaShopExcel.Start(builder)
    LocalizeGachaShopExcel.AddGachaShopId(builder, GachaShopId_val)
    LocalizeGachaShopExcel.AddTabNameKr(builder, TabNameKr_off)
    LocalizeGachaShopExcel.AddTabNameJp(builder, TabNameJp_off)
    LocalizeGachaShopExcel.AddTitleNameKr(builder, TitleNameKr_off)
    LocalizeGachaShopExcel.AddTitleNameJp(builder, TitleNameJp_off)
    LocalizeGachaShopExcel.AddSubTitleKr(builder, SubTitleKr_off)
    LocalizeGachaShopExcel.AddSubTitleJp(builder, SubTitleJp_off)
    LocalizeGachaShopExcel.AddGachaDescriptionKr(builder, GachaDescriptionKr_off)
    LocalizeGachaShopExcel.AddGachaDescriptionJp(builder, GachaDescriptionJp_off)
    return LocalizeGachaShopExcel.End(builder)

def pack_LocalizeSkillExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LocalizeSkill") if encrypt else None
    NameKr_off = builder.CreateString(encrypt_string(data.get('NameKr', ''), password))
    DescriptionKr_off = builder.CreateString(encrypt_string(data.get('DescriptionKr', ''), password))
    SkillInvokeLocalizeKr_off = builder.CreateString(encrypt_string(data.get('SkillInvokeLocalizeKr', ''), password))
    NameJp_off = builder.CreateString(encrypt_string(data.get('NameJp', ''), password))
    DescriptionJp_off = builder.CreateString(encrypt_string(data.get('DescriptionJp', ''), password))
    SkillInvokeLocalizeJp_off = builder.CreateString(encrypt_string(data.get('SkillInvokeLocalizeJp', ''), password))
    Key_val = convert_uint(data.get('Key', 0), password)
    LocalizeSkillExcel.Start(builder)
    LocalizeSkillExcel.AddKey(builder, Key_val)
    LocalizeSkillExcel.AddNameKr(builder, NameKr_off)
    LocalizeSkillExcel.AddDescriptionKr(builder, DescriptionKr_off)
    LocalizeSkillExcel.AddSkillInvokeLocalizeKr(builder, SkillInvokeLocalizeKr_off)
    LocalizeSkillExcel.AddNameJp(builder, NameJp_off)
    LocalizeSkillExcel.AddDescriptionJp(builder, DescriptionJp_off)
    LocalizeSkillExcel.AddSkillInvokeLocalizeJp(builder, SkillInvokeLocalizeJp_off)
    return LocalizeSkillExcel.End(builder)

def pack_LogicEffectCommonVisualExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("LogicEffectCommonVisual") if encrypt else None
    IconSpriteName_off = builder.CreateString(encrypt_string(data.get('IconSpriteName', ''), password))
    ParticleEnterPath_off = builder.CreateString(encrypt_string(data.get('ParticleEnterPath', ''), password))
    ParticleLoopPath_off = builder.CreateString(encrypt_string(data.get('ParticleLoopPath', ''), password))
    ParticleEndPath_off = builder.CreateString(encrypt_string(data.get('ParticleEndPath', ''), password))
    ParticleApplyPath_off = builder.CreateString(encrypt_string(data.get('ParticleApplyPath', ''), password))
    ParticleRemovedPath_off = builder.CreateString(encrypt_string(data.get('ParticleRemovedPath', ''), password))
    IconDispelColor_vec = 0
    if 'IconDispelColor' in data:
        IconDispelColor_items = data['IconDispelColor']
        LogicEffectCommonVisualExcel.StartIconDispelColorVector(builder, len(IconDispelColor_items))
        for item in reversed(IconDispelColor_items):
            builder.PrependFloat32(encrypt_float(item, password))
        IconDispelColor_vec = builder.EndVector(len(IconDispelColor_items))
    StringID_val = convert_uint(data.get('StringID', 0), password)
    ParticleEnterSocket_val = convert_int(getattr(EffectBone, data.get('ParticleEnterSocket', 0)), password)
    ParticleLoopSocket_val = convert_int(getattr(EffectBone, data.get('ParticleLoopSocket', 0)), password)
    ParticleEndSocket_val = convert_int(getattr(EffectBone, data.get('ParticleEndSocket', 0)), password)
    ParticleApplySocket_val = convert_int(getattr(EffectBone, data.get('ParticleApplySocket', 0)), password)
    ParticleRemovedSocket_val = convert_int(getattr(EffectBone, data.get('ParticleRemovedSocket', 0)), password)
    LogicEffectCommonVisualExcel.Start(builder)
    LogicEffectCommonVisualExcel.AddStringID(builder, StringID_val)
    LogicEffectCommonVisualExcel.AddIconSpriteName(builder, IconSpriteName_off)
    LogicEffectCommonVisualExcel.AddIconDispelColor(builder, IconDispelColor_vec)
    LogicEffectCommonVisualExcel.AddParticleEnterPath(builder, ParticleEnterPath_off)
    LogicEffectCommonVisualExcel.AddParticleEnterSocket(builder, ParticleEnterSocket_val)
    LogicEffectCommonVisualExcel.AddParticleLoopPath(builder, ParticleLoopPath_off)
    LogicEffectCommonVisualExcel.AddParticleLoopSocket(builder, ParticleLoopSocket_val)
    LogicEffectCommonVisualExcel.AddParticleEndPath(builder, ParticleEndPath_off)
    LogicEffectCommonVisualExcel.AddParticleEndSocket(builder, ParticleEndSocket_val)
    LogicEffectCommonVisualExcel.AddParticleApplyPath(builder, ParticleApplyPath_off)
    LogicEffectCommonVisualExcel.AddParticleApplySocket(builder, ParticleApplySocket_val)
    LogicEffectCommonVisualExcel.AddParticleRemovedPath(builder, ParticleRemovedPath_off)
    LogicEffectCommonVisualExcel.AddParticleRemovedSocket(builder, ParticleRemovedSocket_val)
    return LogicEffectCommonVisualExcel.End(builder)

def pack_MemoryLobbyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MemoryLobby") if encrypt else None
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    SlotTextureName_off = builder.CreateString(encrypt_string(data.get('SlotTextureName', ''), password))
    RewardTextureName_off = builder.CreateString(encrypt_string(data.get('RewardTextureName', ''), password))
    AudioClipJp_off = builder.CreateString(encrypt_string(data.get('AudioClipJp', ''), password))
    AudioClipKr_off = builder.CreateString(encrypt_string(data.get('AudioClipKr', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    MemoryLobbyCategory_val = convert_int(getattr(MemoryLobbyCategory, data.get('MemoryLobbyCategory', 0)), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    MemoryLobbyExcel.Start(builder)
    MemoryLobbyExcel.AddId(builder, Id_val)
    MemoryLobbyExcel.AddProductionStep(builder, ProductionStep_val)
    MemoryLobbyExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    MemoryLobbyExcel.AddCharacterId(builder, CharacterId_val)
    MemoryLobbyExcel.AddPrefabName(builder, PrefabName_off)
    MemoryLobbyExcel.AddMemoryLobbyCategory(builder, MemoryLobbyCategory_val)
    MemoryLobbyExcel.AddSlotTextureName(builder, SlotTextureName_off)
    MemoryLobbyExcel.AddRewardTextureName(builder, RewardTextureName_off)
    MemoryLobbyExcel.AddBGMId(builder, BGMId_val)
    MemoryLobbyExcel.AddAudioClipJp(builder, AudioClipJp_off)
    MemoryLobbyExcel.AddAudioClipKr(builder, AudioClipKr_off)
    return MemoryLobbyExcel.End(builder)

def pack_MessagePopupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MessagePopup") if encrypt else None
    Image_off = builder.CreateString(encrypt_string(data.get('Image', ''), password))
    ConditionText_vec = 0
    if 'ConditionText' in data:
        ConditionText_items = data['ConditionText']
        MessagePopupExcel.StartConditionTextVector(builder, len(ConditionText_items))
        for item in reversed(ConditionText_items):
            builder.PrependUint32(convert_uint(item, password))
        ConditionText_vec = builder.EndVector(len(ConditionText_items))
    Button_vec = 0
    if 'Button' in data:
        Button_items = data['Button']
        MessagePopupExcel.StartButtonVector(builder, len(Button_items))
        for item in reversed(Button_items):
            builder.PrependInt32(convert_int(getattr(MessagePopupButtonType, item), password))
        Button_vec = builder.EndVector(len(Button_items))
    ButtonText_vec = 0
    if 'ButtonText' in data:
        ButtonText_items = data['ButtonText']
        MessagePopupExcel.StartButtonTextVector(builder, len(ButtonText_items))
        for item in reversed(ButtonText_items):
            builder.PrependUint32(convert_uint(item, password))
        ButtonText_vec = builder.EndVector(len(ButtonText_items))
    ButtonCommand_vec = 0
    if 'ButtonCommand' in data:
        ButtonCommand_items = data['ButtonCommand']
        ButtonCommand_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ButtonCommand_items]
        MessagePopupExcel.StartButtonCommandVector(builder, len(ButtonCommand_str_offsets))
        for offset in reversed(ButtonCommand_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ButtonCommand_vec = builder.EndVector(len(ButtonCommand_items))
    ButtonParameter_vec = 0
    if 'ButtonParameter' in data:
        ButtonParameter_items = data['ButtonParameter']
        ButtonParameter_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ButtonParameter_items]
        MessagePopupExcel.StartButtonParameterVector(builder, len(ButtonParameter_str_offsets))
        for offset in reversed(ButtonParameter_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ButtonParameter_vec = builder.EndVector(len(ButtonParameter_items))
    StringId_val = convert_uint(data.get('StringId', 0), password)
    MessagePopupLayout_val = convert_int(getattr(MessagePopupLayout, data.get('MessagePopupLayout', 0)), password)
    OrderType_val = convert_int(getattr(MessagePopupImagePositionType, data.get('OrderType', 0)), password)
    TitleText_val = convert_uint(data.get('TitleText', 0), password)
    SubTitleText_val = convert_uint(data.get('SubTitleText', 0), password)
    MessageText_val = convert_uint(data.get('MessageText', 0), password)
    DisplayXButton_val = data.get('DisplayXButton', 0)
    MessagePopupExcel.Start(builder)
    MessagePopupExcel.AddStringId(builder, StringId_val)
    MessagePopupExcel.AddMessagePopupLayout(builder, MessagePopupLayout_val)
    MessagePopupExcel.AddOrderType(builder, OrderType_val)
    MessagePopupExcel.AddImage(builder, Image_off)
    MessagePopupExcel.AddTitleText(builder, TitleText_val)
    MessagePopupExcel.AddSubTitleText(builder, SubTitleText_val)
    MessagePopupExcel.AddMessageText(builder, MessageText_val)
    MessagePopupExcel.AddConditionText(builder, ConditionText_vec)
    MessagePopupExcel.AddDisplayXButton(builder, DisplayXButton_val)
    MessagePopupExcel.AddButton(builder, Button_vec)
    MessagePopupExcel.AddButtonText(builder, ButtonText_vec)
    MessagePopupExcel.AddButtonCommand(builder, ButtonCommand_vec)
    MessagePopupExcel.AddButtonParameter(builder, ButtonParameter_vec)
    return MessagePopupExcel.End(builder)

def pack_MiniGameAudioAnimatorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameAudioAnimator") if encrypt else None
    VoiceNamePrefix_off = builder.CreateString(encrypt_string(data.get('VoiceNamePrefix', ''), password))
    StateName_off = builder.CreateString(encrypt_string(data.get('StateName', ''), password))
    AudioClipPath_vec = 0
    if 'AudioClipPath' in data:
        AudioClipPath_items = data['AudioClipPath']
        AudioClipPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in AudioClipPath_items]
        MiniGameAudioAnimatorExcel.StartAudioClipPathVector(builder, len(AudioClipPath_str_offsets))
        for offset in reversed(AudioClipPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        AudioClipPath_vec = builder.EndVector(len(AudioClipPath_items))
    VoiceHash_vec = 0
    if 'VoiceHash' in data:
        VoiceHash_items = data['VoiceHash']
        MiniGameAudioAnimatorExcel.StartVoiceHashVector(builder, len(VoiceHash_items))
        for item in reversed(VoiceHash_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceHash_vec = builder.EndVector(len(VoiceHash_items))
    ControllerNameHash_val = convert_uint(data.get('ControllerNameHash', 0), password)
    StateNameHash_val = convert_uint(data.get('StateNameHash', 0), password)
    IgnoreInterruptDelay_val = data.get('IgnoreInterruptDelay', 0)
    IgnoreInterruptPlay_val = data.get('IgnoreInterruptPlay', 0)
    Volume_val = encrypt_float(data.get('Volume', 0), password)
    Delay_val = encrypt_float(data.get('Delay', 0), password)
    AudioPriority_val = convert_int(data.get('AudioPriority', 0), password)
    MiniGameAudioAnimatorExcel.Start(builder)
    MiniGameAudioAnimatorExcel.AddControllerNameHash(builder, ControllerNameHash_val)
    MiniGameAudioAnimatorExcel.AddVoiceNamePrefix(builder, VoiceNamePrefix_off)
    MiniGameAudioAnimatorExcel.AddStateNameHash(builder, StateNameHash_val)
    MiniGameAudioAnimatorExcel.AddStateName(builder, StateName_off)
    MiniGameAudioAnimatorExcel.AddIgnoreInterruptDelay(builder, IgnoreInterruptDelay_val)
    MiniGameAudioAnimatorExcel.AddIgnoreInterruptPlay(builder, IgnoreInterruptPlay_val)
    MiniGameAudioAnimatorExcel.AddVolume(builder, Volume_val)
    MiniGameAudioAnimatorExcel.AddDelay(builder, Delay_val)
    MiniGameAudioAnimatorExcel.AddAudioPriority(builder, AudioPriority_val)
    MiniGameAudioAnimatorExcel.AddAudioClipPath(builder, AudioClipPath_vec)
    MiniGameAudioAnimatorExcel.AddVoiceHash(builder, VoiceHash_vec)
    return MiniGameAudioAnimatorExcel.End(builder)

def pack_MinigameCCGCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGCard") if encrypt else None
    Description_off = builder.CreateString(encrypt_string(data.get('Description', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    UIImagePath_off = builder.CreateString(encrypt_string(data.get('UIImagePath', ''), password))
    PassiveSkillId_vec = 0
    if 'PassiveSkillId' in data:
        PassiveSkillId_items = data['PassiveSkillId']
        MinigameCCGCardExcel.StartPassiveSkillIdVector(builder, len(PassiveSkillId_items))
        for item in reversed(PassiveSkillId_items):
            builder.PrependInt32(convert_int(item, password))
        PassiveSkillId_vec = builder.EndVector(len(PassiveSkillId_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        MinigameCCGCardExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(CCGTagType, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Type_val = convert_int(getattr(CCGCardType, data.get('Type', 0)), password)
    IsDisposal_val = data.get('IsDisposal', 0)
    ActiveSkillId_val = convert_int(data.get('ActiveSkillId', 0), password)
    ActiveSkillCost_val = convert_int(data.get('ActiveSkillCost', 0), password)
    ActiveSkilleCostVisible_val = data.get('ActiveSkilleCostVisible', 0)
    PassiveActivateCount_val = convert_int(data.get('PassiveActivateCount', 0), password)
    Name_val = convert_uint(data.get('Name', 0), password)
    MinigameCCGCardExcel.Start(builder)
    MinigameCCGCardExcel.AddId(builder, Id_val)
    MinigameCCGCardExcel.AddType(builder, Type_val)
    MinigameCCGCardExcel.AddIsDisposal(builder, IsDisposal_val)
    MinigameCCGCardExcel.AddActiveSkillId(builder, ActiveSkillId_val)
    MinigameCCGCardExcel.AddActiveSkillCost(builder, ActiveSkillCost_val)
    MinigameCCGCardExcel.AddActiveSkilleCostVisible(builder, ActiveSkilleCostVisible_val)
    MinigameCCGCardExcel.AddPassiveSkillId(builder, PassiveSkillId_vec)
    MinigameCCGCardExcel.AddPassiveActivateCount(builder, PassiveActivateCount_val)
    MinigameCCGCardExcel.AddName(builder, Name_val)
    MinigameCCGCardExcel.AddDescription(builder, Description_off)
    MinigameCCGCardExcel.AddImagePath(builder, ImagePath_off)
    MinigameCCGCardExcel.AddUIImagePath(builder, UIImagePath_off)
    MinigameCCGCardExcel.AddTags(builder, Tags_vec)
    return MinigameCCGCardExcel.End(builder)

def pack_MinigameCCGCharacterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGCharacter") if encrypt else None
    Description_off = builder.CreateString(encrypt_string(data.get('Description', ''), password))
    ImagePath_off = builder.CreateString(encrypt_string(data.get('ImagePath', ''), password))
    UIImagePath_off = builder.CreateString(encrypt_string(data.get('UIImagePath', ''), password))
    PassiveSkillId_vec = 0
    if 'PassiveSkillId' in data:
        PassiveSkillId_items = data['PassiveSkillId']
        MinigameCCGCharacterExcel.StartPassiveSkillIdVector(builder, len(PassiveSkillId_items))
        for item in reversed(PassiveSkillId_items):
            builder.PrependInt64(convert_long(item, password))
        PassiveSkillId_vec = builder.EndVector(len(PassiveSkillId_items))
    Tags_vec = 0
    if 'Tags' in data:
        Tags_items = data['Tags']
        MinigameCCGCharacterExcel.StartTagsVector(builder, len(Tags_items))
        for item in reversed(Tags_items):
            builder.PrependInt32(convert_int(getattr(CCGTagType, item), password))
        Tags_vec = builder.EndVector(len(Tags_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Type_val = convert_int(getattr(CCGCharacterType, data.get('Type', 0)), password)
    ActiveSkillId_val = convert_long(data.get('ActiveSkillId', 0), password)
    ActiveSkillCost_val = convert_int(data.get('ActiveSkillCost', 0), password)
    ActiveSkilleCostVisible_val = data.get('ActiveSkilleCostVisible', 0)
    ActiveSkillCooldown_val = convert_int(data.get('ActiveSkillCooldown', 0), password)
    MaxHealth_val = convert_int(data.get('MaxHealth', 0), password)
    Name_val = convert_uint(data.get('Name', 0), password)
    MinigameCCGCharacterExcel.Start(builder)
    MinigameCCGCharacterExcel.AddId(builder, Id_val)
    MinigameCCGCharacterExcel.AddType(builder, Type_val)
    MinigameCCGCharacterExcel.AddActiveSkillId(builder, ActiveSkillId_val)
    MinigameCCGCharacterExcel.AddActiveSkillCost(builder, ActiveSkillCost_val)
    MinigameCCGCharacterExcel.AddActiveSkilleCostVisible(builder, ActiveSkilleCostVisible_val)
    MinigameCCGCharacterExcel.AddActiveSkillCooldown(builder, ActiveSkillCooldown_val)
    MinigameCCGCharacterExcel.AddMaxHealth(builder, MaxHealth_val)
    MinigameCCGCharacterExcel.AddPassiveSkillId(builder, PassiveSkillId_vec)
    MinigameCCGCharacterExcel.AddName(builder, Name_val)
    MinigameCCGCharacterExcel.AddDescription(builder, Description_off)
    MinigameCCGCharacterExcel.AddImagePath(builder, ImagePath_off)
    MinigameCCGCharacterExcel.AddUIImagePath(builder, UIImagePath_off)
    MinigameCCGCharacterExcel.AddTags(builder, Tags_vec)
    return MinigameCCGCharacterExcel.End(builder)

def pack_MinigameCCGEnemyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGEnemy") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    CharacterType_val = convert_int(getattr(CCGCharacterType, data.get('CharacterType', 0)), password)
    Order_val = convert_int(data.get('Order', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    MinigameCCGEnemyExcel.Start(builder)
    MinigameCCGEnemyExcel.AddId(builder, Id_val)
    MinigameCCGEnemyExcel.AddGroupId(builder, GroupId_val)
    MinigameCCGEnemyExcel.AddCharacterType(builder, CharacterType_val)
    MinigameCCGEnemyExcel.AddOrder(builder, Order_val)
    MinigameCCGEnemyExcel.AddCharacterId(builder, CharacterId_val)
    return MinigameCCGEnemyExcel.End(builder)

def pack_MinigameCCGEnemyGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGEnemyGroup") if encrypt else None
    EnemyAI_off = builder.CreateString(encrypt_string(data.get('EnemyAI', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    EnemyBGM_val = convert_long(data.get('EnemyBGM', 0), password)
    LocalizeEnemyGroupName_val = convert_uint(data.get('LocalizeEnemyGroupName', 0), password)
    LocalizeEnemyGroupDesc_val = convert_uint(data.get('LocalizeEnemyGroupDesc', 0), password)
    MinigameCCGEnemyGroupExcel.Start(builder)
    MinigameCCGEnemyGroupExcel.AddGroupId(builder, GroupId_val)
    MinigameCCGEnemyGroupExcel.AddEnemyAI(builder, EnemyAI_off)
    MinigameCCGEnemyGroupExcel.AddEnemyBGM(builder, EnemyBGM_val)
    MinigameCCGEnemyGroupExcel.AddLocalizeEnemyGroupName(builder, LocalizeEnemyGroupName_val)
    MinigameCCGEnemyGroupExcel.AddLocalizeEnemyGroupDesc(builder, LocalizeEnemyGroupDesc_val)
    return MinigameCCGEnemyGroupExcel.End(builder)

def pack_MinigameCCGInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGInfo") if encrypt else None
    CardBackPath_off = builder.CreateString(encrypt_string(data.get('CardBackPath', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    CostParcelType_val = convert_int(getattr(ParcelType, data.get('CostParcelType', 0)), password)
    CostParcelId_val = convert_long(data.get('CostParcelId', 0), password)
    CostParcelAmount_val = convert_int(data.get('CostParcelAmount', 0), password)
    PerkCostParcelType_val = convert_int(getattr(ParcelType, data.get('PerkCostParcelType', 0)), password)
    PerkCostParcelId_val = convert_long(data.get('PerkCostParcelId', 0), password)
    MinigameCCGInfoExcel.Start(builder)
    MinigameCCGInfoExcel.AddEventContentId(builder, EventContentId_val)
    MinigameCCGInfoExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGInfoExcel.AddCostParcelType(builder, CostParcelType_val)
    MinigameCCGInfoExcel.AddCostParcelId(builder, CostParcelId_val)
    MinigameCCGInfoExcel.AddCostParcelAmount(builder, CostParcelAmount_val)
    MinigameCCGInfoExcel.AddCardBackPath(builder, CardBackPath_off)
    MinigameCCGInfoExcel.AddPerkCostParcelType(builder, PerkCostParcelType_val)
    MinigameCCGInfoExcel.AddPerkCostParcelId(builder, PerkCostParcelId_val)
    return MinigameCCGInfoExcel.End(builder)

def pack_MinigameCCGLevelExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGLevel") if encrypt else None
    BackgroundPath_off = builder.CreateString(encrypt_string(data.get('BackgroundPath', ''), password))
    LevelId_val = convert_long(data.get('LevelId', 0), password)
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    FloorIndex_val = convert_int(data.get('FloorIndex', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    MinigameCCGLevelExcel.Start(builder)
    MinigameCCGLevelExcel.AddLevelId(builder, LevelId_val)
    MinigameCCGLevelExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGLevelExcel.AddFloorIndex(builder, FloorIndex_val)
    MinigameCCGLevelExcel.AddBackgroundPath(builder, BackgroundPath_off)
    MinigameCCGLevelExcel.AddBGMId(builder, BGMId_val)
    return MinigameCCGLevelExcel.End(builder)

def pack_MinigameCCGLevelNodeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGLevelNode") if encrypt else None
    NextNodeId_vec = 0
    if 'NextNodeId' in data:
        NextNodeId_items = data['NextNodeId']
        MinigameCCGLevelNodeExcel.StartNextNodeIdVector(builder, len(NextNodeId_items))
        for item in reversed(NextNodeId_items):
            builder.PrependInt64(convert_long(item, password))
        NextNodeId_vec = builder.EndVector(len(NextNodeId_items))
    LevelId_val = convert_long(data.get('LevelId', 0), password)
    NodeId_val = convert_long(data.get('NodeId', 0), password)
    NodeIcon_val = convert_int(getattr(CCGLevelNodeIcon, data.get('NodeIcon', 0)), password)
    StageGroupId_val = convert_long(data.get('StageGroupId', 0), password)
    MinigameCCGLevelNodeExcel.Start(builder)
    MinigameCCGLevelNodeExcel.AddLevelId(builder, LevelId_val)
    MinigameCCGLevelNodeExcel.AddNodeId(builder, NodeId_val)
    MinigameCCGLevelNodeExcel.AddNodeIcon(builder, NodeIcon_val)
    MinigameCCGLevelNodeExcel.AddStageGroupId(builder, StageGroupId_val)
    MinigameCCGLevelNodeExcel.AddNextNodeId(builder, NextNodeId_vec)
    return MinigameCCGLevelNodeExcel.End(builder)

def pack_MinigameCCGLevelStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGLevelStage") if encrypt else None
    CampSprPath_off = builder.CreateString(encrypt_string(data.get('CampSprPath', ''), password))
    CampBackgroundPath_off = builder.CreateString(encrypt_string(data.get('CampBackgroundPath', ''), password))
    EnemyGroupId_vec = 0
    if 'EnemyGroupId' in data:
        EnemyGroupId_items = data['EnemyGroupId']
        MinigameCCGLevelStageExcel.StartEnemyGroupIdVector(builder, len(EnemyGroupId_items))
        for item in reversed(EnemyGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnemyGroupId_vec = builder.EndVector(len(EnemyGroupId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    StageType_val = convert_int(getattr(CCGStageType, data.get('StageType', 0)), password)
    CampDiscardCardCount_val = convert_int(data.get('CampDiscardCardCount', 0), password)
    RewardType_val = convert_int(getattr(CCGStageRewardType, data.get('RewardType', 0)), password)
    RewardCount_val = convert_int(data.get('RewardCount', 0), password)
    RewardCardGroupId_val = convert_long(data.get('RewardCardGroupId', 0), password)
    CardRarityGroupId_val = convert_long(data.get('CardRarityGroupId', 0), password)
    IsSkipIntroScenario_val = data.get('IsSkipIntroScenario', 0)
    IntroScenarioGroupId_val = convert_long(data.get('IntroScenarioGroupId', 0), password)
    IsSkipOutroScenario_val = data.get('IsSkipOutroScenario', 0)
    OutroScenarioGroupId_val = convert_long(data.get('OutroScenarioGroupId', 0), password)
    MinigameCCGLevelStageExcel.Start(builder)
    MinigameCCGLevelStageExcel.AddId(builder, Id_val)
    MinigameCCGLevelStageExcel.AddGroupId(builder, GroupId_val)
    MinigameCCGLevelStageExcel.AddEnemyGroupId(builder, EnemyGroupId_vec)
    MinigameCCGLevelStageExcel.AddStageType(builder, StageType_val)
    MinigameCCGLevelStageExcel.AddCampDiscardCardCount(builder, CampDiscardCardCount_val)
    MinigameCCGLevelStageExcel.AddCampSprPath(builder, CampSprPath_off)
    MinigameCCGLevelStageExcel.AddCampBackgroundPath(builder, CampBackgroundPath_off)
    MinigameCCGLevelStageExcel.AddRewardType(builder, RewardType_val)
    MinigameCCGLevelStageExcel.AddRewardCount(builder, RewardCount_val)
    MinigameCCGLevelStageExcel.AddRewardCardGroupId(builder, RewardCardGroupId_val)
    MinigameCCGLevelStageExcel.AddCardRarityGroupId(builder, CardRarityGroupId_val)
    MinigameCCGLevelStageExcel.AddIsSkipIntroScenario(builder, IsSkipIntroScenario_val)
    MinigameCCGLevelStageExcel.AddIntroScenarioGroupId(builder, IntroScenarioGroupId_val)
    MinigameCCGLevelStageExcel.AddIsSkipOutroScenario(builder, IsSkipOutroScenario_val)
    MinigameCCGLevelStageExcel.AddOutroScenarioGroupId(builder, OutroScenarioGroupId_val)
    return MinigameCCGLevelStageExcel.End(builder)

def pack_MinigameCCGLogicEffectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGLogicEffect") if encrypt else None
    DataLoadPath_off = builder.CreateString(encrypt_string(data.get('DataLoadPath', ''), password))
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    MinigameCCGLogicEffectExcel.Start(builder)
    MinigameCCGLogicEffectExcel.AddId(builder, Id_val)
    MinigameCCGLogicEffectExcel.AddDataLoadPath(builder, DataLoadPath_off)
    MinigameCCGLogicEffectExcel.AddIcon(builder, Icon_off)
    return MinigameCCGLogicEffectExcel.End(builder)

def pack_MinigameCCGOpenDialogExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGOpenDialog") if encrypt else None
    DialogId_val = convert_long(data.get('DialogId', 0), password)
    PlayOrder_val = convert_int(data.get('PlayOrder', 0), password)
    ConditionCard_val = convert_long(data.get('ConditionCard', 0), password)
    Dialog_val = convert_uint(data.get('Dialog', 0), password)
    Duration_val = convert_long(data.get('Duration', 0), password)
    Voice_val = convert_uint(data.get('Voice', 0), password)
    MinigameCCGOpenDialogExcel.Start(builder)
    MinigameCCGOpenDialogExcel.AddDialogId(builder, DialogId_val)
    MinigameCCGOpenDialogExcel.AddPlayOrder(builder, PlayOrder_val)
    MinigameCCGOpenDialogExcel.AddConditionCard(builder, ConditionCard_val)
    MinigameCCGOpenDialogExcel.AddDialog(builder, Dialog_val)
    MinigameCCGOpenDialogExcel.AddDuration(builder, Duration_val)
    MinigameCCGOpenDialogExcel.AddVoice(builder, Voice_val)
    return MinigameCCGOpenDialogExcel.End(builder)

def pack_MinigameCCGPerkExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGPerk") if encrypt else None
    ShopIcon_off = builder.CreateString(encrypt_string(data.get('ShopIcon', ''), password))
    EnvironmentLogicEffectId_vec = 0
    if 'EnvironmentLogicEffectId' in data:
        EnvironmentLogicEffectId_items = data['EnvironmentLogicEffectId']
        MinigameCCGPerkExcel.StartEnvironmentLogicEffectIdVector(builder, len(EnvironmentLogicEffectId_items))
        for item in reversed(EnvironmentLogicEffectId_items):
            builder.PrependInt64(convert_long(item, password))
        EnvironmentLogicEffectId_vec = builder.EndVector(len(EnvironmentLogicEffectId_items))
    RequiredPerkId_vec = 0
    if 'RequiredPerkId' in data:
        RequiredPerkId_items = data['RequiredPerkId']
        MinigameCCGPerkExcel.StartRequiredPerkIdVector(builder, len(RequiredPerkId_items))
        for item in reversed(RequiredPerkId_items):
            builder.PrependInt64(convert_long(item, password))
        RequiredPerkId_vec = builder.EndVector(len(RequiredPerkId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    CostParcelAmount_val = convert_int(data.get('CostParcelAmount', 0), password)
    RerollPoint_val = convert_int(data.get('RerollPoint', 0), password)
    DiscardPoint_val = convert_int(data.get('DiscardPoint', 0), password)
    ShopOrder_val = convert_int(data.get('ShopOrder', 0), password)
    ShopLocalizeTitle_val = convert_uint(data.get('ShopLocalizeTitle', 0), password)
    ShopLocalizeDesc_val = convert_uint(data.get('ShopLocalizeDesc', 0), password)
    MinigameCCGPerkExcel.Start(builder)
    MinigameCCGPerkExcel.AddId(builder, Id_val)
    MinigameCCGPerkExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGPerkExcel.AddCostParcelAmount(builder, CostParcelAmount_val)
    MinigameCCGPerkExcel.AddRerollPoint(builder, RerollPoint_val)
    MinigameCCGPerkExcel.AddDiscardPoint(builder, DiscardPoint_val)
    MinigameCCGPerkExcel.AddEnvironmentLogicEffectId(builder, EnvironmentLogicEffectId_vec)
    MinigameCCGPerkExcel.AddRequiredPerkId(builder, RequiredPerkId_vec)
    MinigameCCGPerkExcel.AddShopOrder(builder, ShopOrder_val)
    MinigameCCGPerkExcel.AddShopIcon(builder, ShopIcon_off)
    MinigameCCGPerkExcel.AddShopLocalizeTitle(builder, ShopLocalizeTitle_val)
    MinigameCCGPerkExcel.AddShopLocalizeDesc(builder, ShopLocalizeDesc_val)
    return MinigameCCGPerkExcel.End(builder)

def pack_MinigameCCGRewardCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGRewardCard") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    EntityType_val = convert_int(getattr(CCGEntityType, data.get('EntityType', 0)), password)
    CardId_val = convert_long(data.get('CardId', 0), password)
    CardRarity_val = convert_int(data.get('CardRarity', 0), password)
    MinigameCCGRewardCardExcel.Start(builder)
    MinigameCCGRewardCardExcel.AddId(builder, Id_val)
    MinigameCCGRewardCardExcel.AddGroupId(builder, GroupId_val)
    MinigameCCGRewardCardExcel.AddEntityType(builder, EntityType_val)
    MinigameCCGRewardCardExcel.AddCardId(builder, CardId_val)
    MinigameCCGRewardCardExcel.AddCardRarity(builder, CardRarity_val)
    return MinigameCCGRewardCardExcel.End(builder)

def pack_MinigameCCGRewardCardRateExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGRewardCardRate") if encrypt else None
    RarityGroupId_val = convert_long(data.get('RarityGroupId', 0), password)
    CardRarity_val = convert_int(data.get('CardRarity', 0), password)
    Rate_val = convert_int(data.get('Rate', 0), password)
    MinigameCCGRewardCardRateExcel.Start(builder)
    MinigameCCGRewardCardRateExcel.AddRarityGroupId(builder, RarityGroupId_val)
    MinigameCCGRewardCardRateExcel.AddCardRarity(builder, CardRarity_val)
    MinigameCCGRewardCardRateExcel.AddRate(builder, Rate_val)
    return MinigameCCGRewardCardRateExcel.End(builder)

def pack_MinigameCCGRewardItemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGRewardItem") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    MinPoint_val = convert_int(data.get('MinPoint', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_int(data.get('RewardParcelAmount', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    MinigameCCGRewardItemExcel.Start(builder)
    MinigameCCGRewardItemExcel.AddId(builder, Id_val)
    MinigameCCGRewardItemExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGRewardItemExcel.AddMinPoint(builder, MinPoint_val)
    MinigameCCGRewardItemExcel.AddRewardParcelType(builder, RewardParcelType_val)
    MinigameCCGRewardItemExcel.AddRewardParcelId(builder, RewardParcelId_val)
    MinigameCCGRewardItemExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    MinigameCCGRewardItemExcel.AddDisplayOrder(builder, DisplayOrder_val)
    return MinigameCCGRewardItemExcel.End(builder)

def pack_MinigameCCGSkillExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGSkill") if encrypt else None
    SkillType_off = builder.CreateString(encrypt_string(data.get('SkillType', ''), password))
    DataLoadPath_off = builder.CreateString(encrypt_string(data.get('DataLoadPath', ''), password))
    SkillIcon_off = builder.CreateString(encrypt_string(data.get('SkillIcon', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Name_val = convert_uint(data.get('Name', 0), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    MinigameCCGSkillExcel.Start(builder)
    MinigameCCGSkillExcel.AddId(builder, Id_val)
    MinigameCCGSkillExcel.AddSkillType(builder, SkillType_off)
    MinigameCCGSkillExcel.AddDataLoadPath(builder, DataLoadPath_off)
    MinigameCCGSkillExcel.AddName(builder, Name_val)
    MinigameCCGSkillExcel.AddDescription(builder, Description_val)
    MinigameCCGSkillExcel.AddSkillIcon(builder, SkillIcon_off)
    return MinigameCCGSkillExcel.End(builder)

def pack_MinigameCCGStartDeckCardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGStartDeckCard") if encrypt else None
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    CardId_val = convert_long(data.get('CardId', 0), password)
    MinigameCCGStartDeckCardExcel.Start(builder)
    MinigameCCGStartDeckCardExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGStartDeckCardExcel.AddCardId(builder, CardId_val)
    return MinigameCCGStartDeckCardExcel.End(builder)

def pack_MinigameCCGStartDeckCharacterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameCCGStartDeckCharacter") if encrypt else None
    CCGId_val = convert_long(data.get('CCGId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    MinigameCCGStartDeckCharacterExcel.Start(builder)
    MinigameCCGStartDeckCharacterExcel.AddCCGId(builder, CCGId_val)
    MinigameCCGStartDeckCharacterExcel.AddCharacterId(builder, CharacterId_val)
    return MinigameCCGStartDeckCharacterExcel.End(builder)

def pack_MiniGameDefenseCharacterBanExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDefenseCharacterBan") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    MiniGameDefenseCharacterBanExcel.Start(builder)
    MiniGameDefenseCharacterBanExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDefenseCharacterBanExcel.AddCharacterId(builder, CharacterId_val)
    return MiniGameDefenseCharacterBanExcel.End(builder)

def pack_MiniGameDefenseFixedStatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDefenseFixedStat") if encrypt else None
    MinigameDefenseFixedStatId_val = convert_long(data.get('MinigameDefenseFixedStatId', 0), password)
    Level_val = convert_int(data.get('Level', 0), password)
    Grade_val = convert_int(data.get('Grade', 0), password)
    ExSkillLevel_val = convert_int(data.get('ExSkillLevel', 0), password)
    NoneExSkillLevel_val = convert_int(data.get('NoneExSkillLevel', 0), password)
    Equipment1Tier_val = convert_int(data.get('Equipment1Tier', 0), password)
    Equipment1Level_val = convert_int(data.get('Equipment1Level', 0), password)
    Equipment2Tier_val = convert_int(data.get('Equipment2Tier', 0), password)
    Equipment2Level_val = convert_int(data.get('Equipment2Level', 0), password)
    Equipment3Tier_val = convert_int(data.get('Equipment3Tier', 0), password)
    Equipment3Level_val = convert_int(data.get('Equipment3Level', 0), password)
    CharacterWeaponGrade_val = convert_int(data.get('CharacterWeaponGrade', 0), password)
    CharacterWeaponLevel_val = convert_int(data.get('CharacterWeaponLevel', 0), password)
    CharacterGearTier_val = convert_int(data.get('CharacterGearTier', 0), password)
    CharacterGearLevel_val = convert_int(data.get('CharacterGearLevel', 0), password)
    MiniGameDefenseFixedStatExcel.Start(builder)
    MiniGameDefenseFixedStatExcel.AddMinigameDefenseFixedStatId(builder, MinigameDefenseFixedStatId_val)
    MiniGameDefenseFixedStatExcel.AddLevel(builder, Level_val)
    MiniGameDefenseFixedStatExcel.AddGrade(builder, Grade_val)
    MiniGameDefenseFixedStatExcel.AddExSkillLevel(builder, ExSkillLevel_val)
    MiniGameDefenseFixedStatExcel.AddNoneExSkillLevel(builder, NoneExSkillLevel_val)
    MiniGameDefenseFixedStatExcel.AddEquipment1Tier(builder, Equipment1Tier_val)
    MiniGameDefenseFixedStatExcel.AddEquipment1Level(builder, Equipment1Level_val)
    MiniGameDefenseFixedStatExcel.AddEquipment2Tier(builder, Equipment2Tier_val)
    MiniGameDefenseFixedStatExcel.AddEquipment2Level(builder, Equipment2Level_val)
    MiniGameDefenseFixedStatExcel.AddEquipment3Tier(builder, Equipment3Tier_val)
    MiniGameDefenseFixedStatExcel.AddEquipment3Level(builder, Equipment3Level_val)
    MiniGameDefenseFixedStatExcel.AddCharacterWeaponGrade(builder, CharacterWeaponGrade_val)
    MiniGameDefenseFixedStatExcel.AddCharacterWeaponLevel(builder, CharacterWeaponLevel_val)
    MiniGameDefenseFixedStatExcel.AddCharacterGearTier(builder, CharacterGearTier_val)
    MiniGameDefenseFixedStatExcel.AddCharacterGearLevel(builder, CharacterGearLevel_val)
    return MiniGameDefenseFixedStatExcel.End(builder)

def pack_MiniGameDefenseInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDefenseInfo") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DefenseBattleParcelType_val = convert_int(getattr(ParcelType, data.get('DefenseBattleParcelType', 0)), password)
    DefenseBattleParcelId_val = convert_long(data.get('DefenseBattleParcelId', 0), password)
    DefenseBattleMultiplierMax_val = convert_long(data.get('DefenseBattleMultiplierMax', 0), password)
    DisableRootMotion_val = data.get('DisableRootMotion', 0)
    MiniGameDefenseInfoExcel.Start(builder)
    MiniGameDefenseInfoExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDefenseInfoExcel.AddDefenseBattleParcelType(builder, DefenseBattleParcelType_val)
    MiniGameDefenseInfoExcel.AddDefenseBattleParcelId(builder, DefenseBattleParcelId_val)
    MiniGameDefenseInfoExcel.AddDefenseBattleMultiplierMax(builder, DefenseBattleMultiplierMax_val)
    MiniGameDefenseInfoExcel.AddDisableRootMotion(builder, DisableRootMotion_val)
    return MiniGameDefenseInfoExcel.End(builder)

def pack_MiniGameDefenseStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDefenseStage") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    DefenseFormationBGPrefab_off = builder.CreateString(encrypt_string(data.get('DefenseFormationBGPrefab', ''), password))
    EnterScenarioGroupId_vec = 0
    if 'EnterScenarioGroupId' in data:
        EnterScenarioGroupId_items = data['EnterScenarioGroupId']
        MiniGameDefenseStageExcel.StartEnterScenarioGroupIdVector(builder, len(EnterScenarioGroupId_items))
        for item in reversed(EnterScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        EnterScenarioGroupId_vec = builder.EndVector(len(EnterScenarioGroupId_items))
    ClearScenarioGroupId_vec = 0
    if 'ClearScenarioGroupId' in data:
        ClearScenarioGroupId_items = data['ClearScenarioGroupId']
        MiniGameDefenseStageExcel.StartClearScenarioGroupIdVector(builder, len(ClearScenarioGroupId_items))
        for item in reversed(ClearScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearScenarioGroupId_vec = builder.EndVector(len(ClearScenarioGroupId_items))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        MiniGameDefenseStageExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        MiniGameDefenseStageExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    StageDifficulty_val = convert_int(getattr(StageDifficulty, data.get('StageDifficulty', 0)), password)
    StageDifficultyLocalize_val = convert_uint(data.get('StageDifficultyLocalize', 0), password)
    StageNumber_val = convert_int(data.get('StageNumber', 0), password)
    StageDisplay_val = convert_int(data.get('StageDisplay', 0), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    StageEnterCostType_val = convert_int(getattr(ParcelType, data.get('StageEnterCostType', 0)), password)
    StageEnterCostId_val = convert_long(data.get('StageEnterCostId', 0), password)
    StageEnterCostAmount_val = convert_int(data.get('StageEnterCostAmount', 0), password)
    EventContentStageRewardId_val = convert_long(data.get('EventContentStageRewardId', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    GroundID_val = convert_long(data.get('GroundID', 0), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    DefenseFormationBGPrefabScale_val = encrypt_float(data.get('DefenseFormationBGPrefabScale', 0), password)
    FixedEchelon_val = convert_long(data.get('FixedEchelon', 0), password)
    MininageDefenseFixedStatId_val = convert_long(data.get('MininageDefenseFixedStatId', 0), password)
    StageHint_val = convert_uint(data.get('StageHint', 0), password)
    MiniGameDefenseStageExcel.Start(builder)
    MiniGameDefenseStageExcel.AddId(builder, Id_val)
    MiniGameDefenseStageExcel.AddName(builder, Name_off)
    MiniGameDefenseStageExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDefenseStageExcel.AddStageDifficulty(builder, StageDifficulty_val)
    MiniGameDefenseStageExcel.AddStageDifficultyLocalize(builder, StageDifficultyLocalize_val)
    MiniGameDefenseStageExcel.AddStageNumber(builder, StageNumber_val)
    MiniGameDefenseStageExcel.AddStageDisplay(builder, StageDisplay_val)
    MiniGameDefenseStageExcel.AddPrevStageId(builder, PrevStageId_val)
    MiniGameDefenseStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    MiniGameDefenseStageExcel.AddBattleDuration(builder, BattleDuration_val)
    MiniGameDefenseStageExcel.AddStageEnterCostType(builder, StageEnterCostType_val)
    MiniGameDefenseStageExcel.AddStageEnterCostId(builder, StageEnterCostId_val)
    MiniGameDefenseStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_val)
    MiniGameDefenseStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId_val)
    MiniGameDefenseStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_vec)
    MiniGameDefenseStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId_vec)
    MiniGameDefenseStageExcel.AddStageTopography(builder, StageTopography_val)
    MiniGameDefenseStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    MiniGameDefenseStageExcel.AddGroundID(builder, GroundID_val)
    MiniGameDefenseStageExcel.AddContentType(builder, ContentType_val)
    MiniGameDefenseStageExcel.AddStarGoal(builder, StarGoal_vec)
    MiniGameDefenseStageExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefab_off)
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale_val)
    MiniGameDefenseStageExcel.AddFixedEchelon(builder, FixedEchelon_val)
    MiniGameDefenseStageExcel.AddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId_val)
    MiniGameDefenseStageExcel.AddStageHint(builder, StageHint_val)
    return MiniGameDefenseStageExcel.End(builder)

def pack_MiniGameDreamCollectionScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamCollectionScenario") if encrypt else None
    Parameter_vec = 0
    if 'Parameter' in data:
        Parameter_items = data['Parameter']
        MiniGameDreamCollectionScenarioExcel.StartParameterVector(builder, len(Parameter_items))
        for item in reversed(Parameter_items):
            builder.PrependInt32(convert_int(getattr(DreamMakerParameterType, item), password))
        Parameter_vec = builder.EndVector(len(Parameter_items))
    ParameterAmount_vec = 0
    if 'ParameterAmount' in data:
        ParameterAmount_items = data['ParameterAmount']
        MiniGameDreamCollectionScenarioExcel.StartParameterAmountVector(builder, len(ParameterAmount_items))
        for item in reversed(ParameterAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParameterAmount_vec = builder.EndVector(len(ParameterAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    IsSkip_val = data.get('IsSkip', 0)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ScenarioGroupId_val = convert_long(data.get('ScenarioGroupId', 0), password)
    MiniGameDreamCollectionScenarioExcel.Start(builder)
    MiniGameDreamCollectionScenarioExcel.AddId(builder, Id_val)
    MiniGameDreamCollectionScenarioExcel.AddIsSkip(builder, IsSkip_val)
    MiniGameDreamCollectionScenarioExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamCollectionScenarioExcel.AddParameter(builder, Parameter_vec)
    MiniGameDreamCollectionScenarioExcel.AddParameterAmount(builder, ParameterAmount_vec)
    MiniGameDreamCollectionScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId_val)
    return MiniGameDreamCollectionScenarioExcel.End(builder)

def pack_MiniGameDreamDailyPointExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamDailyPoint") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    TotalParameterMin_val = convert_long(data.get('TotalParameterMin', 0), password)
    TotalParameterMax_val = convert_long(data.get('TotalParameterMax', 0), password)
    DailyPointCoefficient_val = convert_long(data.get('DailyPointCoefficient', 0), password)
    DailyPointCorrectionValue_val = convert_long(data.get('DailyPointCorrectionValue', 0), password)
    MiniGameDreamDailyPointExcel.Start(builder)
    MiniGameDreamDailyPointExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameDreamDailyPointExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamDailyPointExcel.AddTotalParameterMin(builder, TotalParameterMin_val)
    MiniGameDreamDailyPointExcel.AddTotalParameterMax(builder, TotalParameterMax_val)
    MiniGameDreamDailyPointExcel.AddDailyPointCoefficient(builder, DailyPointCoefficient_val)
    MiniGameDreamDailyPointExcel.AddDailyPointCorrectionValue(builder, DailyPointCorrectionValue_val)
    return MiniGameDreamDailyPointExcel.End(builder)

def pack_MiniGameDreamEndingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamEnding") if encrypt else None
    EndingCondition_vec = 0
    if 'EndingCondition' in data:
        EndingCondition_items = data['EndingCondition']
        MiniGameDreamEndingExcel.StartEndingConditionVector(builder, len(EndingCondition_items))
        for item in reversed(EndingCondition_items):
            builder.PrependInt32(convert_int(getattr(DreamMakerEndingCondition, item), password))
        EndingCondition_vec = builder.EndVector(len(EndingCondition_items))
    EndingConditionValue_vec = 0
    if 'EndingConditionValue' in data:
        EndingConditionValue_items = data['EndingConditionValue']
        MiniGameDreamEndingExcel.StartEndingConditionValueVector(builder, len(EndingConditionValue_items))
        for item in reversed(EndingConditionValue_items):
            builder.PrependInt64(convert_long(item, password))
        EndingConditionValue_vec = builder.EndVector(len(EndingConditionValue_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EndingId_val = convert_long(data.get('EndingId', 0), password)
    DreamMakerEndingType_val = convert_int(getattr(DreamMakerEndingType, data.get('DreamMakerEndingType', 0)), password)
    Order_val = convert_int(data.get('Order', 0), password)
    ScenarioGroupId_val = convert_long(data.get('ScenarioGroupId', 0), password)
    MiniGameDreamEndingExcel.Start(builder)
    MiniGameDreamEndingExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamEndingExcel.AddEndingId(builder, EndingId_val)
    MiniGameDreamEndingExcel.AddDreamMakerEndingType(builder, DreamMakerEndingType_val)
    MiniGameDreamEndingExcel.AddOrder(builder, Order_val)
    MiniGameDreamEndingExcel.AddScenarioGroupId(builder, ScenarioGroupId_val)
    MiniGameDreamEndingExcel.AddEndingCondition(builder, EndingCondition_vec)
    MiniGameDreamEndingExcel.AddEndingConditionValue(builder, EndingConditionValue_vec)
    return MiniGameDreamEndingExcel.End(builder)

def pack_MiniGameDreamEndingRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamEndingReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        MiniGameDreamEndingRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        MiniGameDreamEndingRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        MiniGameDreamEndingRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EndingId_val = convert_long(data.get('EndingId', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    DreamMakerEndingRewardType_val = convert_int(getattr(DreamMakerEndingRewardType, data.get('DreamMakerEndingRewardType', 0)), password)
    DreamMakerEndingType_val = convert_int(getattr(DreamMakerEndingType, data.get('DreamMakerEndingType', 0)), password)
    MiniGameDreamEndingRewardExcel.Start(builder)
    MiniGameDreamEndingRewardExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamEndingRewardExcel.AddEndingId(builder, EndingId_val)
    MiniGameDreamEndingRewardExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    MiniGameDreamEndingRewardExcel.AddDreamMakerEndingRewardType(builder, DreamMakerEndingRewardType_val)
    MiniGameDreamEndingRewardExcel.AddDreamMakerEndingType(builder, DreamMakerEndingType_val)
    MiniGameDreamEndingRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    MiniGameDreamEndingRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    MiniGameDreamEndingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return MiniGameDreamEndingRewardExcel.End(builder)

def pack_MiniGameDreamInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamInfo") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DreamMakerMultiplierCondition_val = convert_int(getattr(DreamMakerMultiplierCondition, data.get('DreamMakerMultiplierCondition', 0)), password)
    DreamMakerMultiplierConditionValue_val = convert_long(data.get('DreamMakerMultiplierConditionValue', 0), password)
    DreamMakerMultiplierMax_val = convert_long(data.get('DreamMakerMultiplierMax', 0), password)
    DreamMakerDays_val = convert_long(data.get('DreamMakerDays', 0), password)
    DreamMakerActionPoint_val = convert_long(data.get('DreamMakerActionPoint', 0), password)
    DreamMakerParcelType_val = convert_int(getattr(ParcelType, data.get('DreamMakerParcelType', 0)), password)
    DreamMakerParcelId_val = convert_long(data.get('DreamMakerParcelId', 0), password)
    DreamMakerDailyPointParcelType_val = convert_int(getattr(ParcelType, data.get('DreamMakerDailyPointParcelType', 0)), password)
    DreamMakerDailyPointId_val = convert_long(data.get('DreamMakerDailyPointId', 0), password)
    DreamMakerParameterTransfer_val = convert_long(data.get('DreamMakerParameterTransfer', 0), password)
    ScheduleCostGoodsId_val = convert_long(data.get('ScheduleCostGoodsId', 0), password)
    LobbyBGMChangeScenarioId_val = convert_long(data.get('LobbyBGMChangeScenarioId', 0), password)
    MiniGameDreamInfoExcel.Start(builder)
    MiniGameDreamInfoExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierCondition(builder, DreamMakerMultiplierCondition_val)
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierConditionValue(builder, DreamMakerMultiplierConditionValue_val)
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierMax(builder, DreamMakerMultiplierMax_val)
    MiniGameDreamInfoExcel.AddDreamMakerDays(builder, DreamMakerDays_val)
    MiniGameDreamInfoExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint_val)
    MiniGameDreamInfoExcel.AddDreamMakerParcelType(builder, DreamMakerParcelType_val)
    MiniGameDreamInfoExcel.AddDreamMakerParcelId(builder, DreamMakerParcelId_val)
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointParcelType(builder, DreamMakerDailyPointParcelType_val)
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointId(builder, DreamMakerDailyPointId_val)
    MiniGameDreamInfoExcel.AddDreamMakerParameterTransfer(builder, DreamMakerParameterTransfer_val)
    MiniGameDreamInfoExcel.AddScheduleCostGoodsId(builder, ScheduleCostGoodsId_val)
    MiniGameDreamInfoExcel.AddLobbyBGMChangeScenarioId(builder, LobbyBGMChangeScenarioId_val)
    return MiniGameDreamInfoExcel.End(builder)

def pack_MiniGameDreamParameterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamParameter") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ParameterType_val = convert_int(getattr(DreamMakerParameterType, data.get('ParameterType', 0)), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    ParameterBase_val = convert_long(data.get('ParameterBase', 0), password)
    ParameterBaseMax_val = convert_long(data.get('ParameterBaseMax', 0), password)
    ParameterMin_val = convert_long(data.get('ParameterMin', 0), password)
    ParameterMax_val = convert_long(data.get('ParameterMax', 0), password)
    MiniGameDreamParameterExcel.Start(builder)
    MiniGameDreamParameterExcel.AddId(builder, Id_val)
    MiniGameDreamParameterExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamParameterExcel.AddParameterType(builder, ParameterType_val)
    MiniGameDreamParameterExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    MiniGameDreamParameterExcel.AddIconPath(builder, IconPath_off)
    MiniGameDreamParameterExcel.AddParameterBase(builder, ParameterBase_val)
    MiniGameDreamParameterExcel.AddParameterBaseMax(builder, ParameterBaseMax_val)
    MiniGameDreamParameterExcel.AddParameterMin(builder, ParameterMin_val)
    MiniGameDreamParameterExcel.AddParameterMax(builder, ParameterMax_val)
    return MiniGameDreamParameterExcel.End(builder)

def pack_MiniGameDreamReplayScenarioExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamReplayScenario") if encrypt else None
    ReplayScenarioResource_off = builder.CreateString(encrypt_string(data.get('ReplayScenarioResource', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ScenarioGroupId_val = convert_long(data.get('ScenarioGroupId', 0), password)
    Order_val = convert_long(data.get('Order', 0), password)
    ReplaySummaryTitleLocalize_val = convert_uint(data.get('ReplaySummaryTitleLocalize', 0), password)
    ReplaySummaryLocalizeScenarioId_val = convert_uint(data.get('ReplaySummaryLocalizeScenarioId', 0), password)
    IsReplayScenarioHorizon_val = data.get('IsReplayScenarioHorizon', 0)
    MiniGameDreamReplayScenarioExcel.Start(builder)
    MiniGameDreamReplayScenarioExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamReplayScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId_val)
    MiniGameDreamReplayScenarioExcel.AddOrder(builder, Order_val)
    MiniGameDreamReplayScenarioExcel.AddReplaySummaryTitleLocalize(builder, ReplaySummaryTitleLocalize_val)
    MiniGameDreamReplayScenarioExcel.AddReplaySummaryLocalizeScenarioId(builder, ReplaySummaryLocalizeScenarioId_val)
    MiniGameDreamReplayScenarioExcel.AddReplayScenarioResource(builder, ReplayScenarioResource_off)
    MiniGameDreamReplayScenarioExcel.AddIsReplayScenarioHorizon(builder, IsReplayScenarioHorizon_val)
    return MiniGameDreamReplayScenarioExcel.End(builder)

def pack_MiniGameDreamScheduleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamSchedule") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    LoadingResource01_off = builder.CreateString(encrypt_string(data.get('LoadingResource01', ''), password))
    LoadingResource02_off = builder.CreateString(encrypt_string(data.get('LoadingResource02', ''), password))
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DreamMakerScheduleGroupId_val = convert_long(data.get('DreamMakerScheduleGroupId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    MiniGameDreamScheduleExcel.Start(builder)
    MiniGameDreamScheduleExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamScheduleExcel.AddDreamMakerScheduleGroupId(builder, DreamMakerScheduleGroupId_val)
    MiniGameDreamScheduleExcel.AddDisplayOrder(builder, DisplayOrder_val)
    MiniGameDreamScheduleExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    MiniGameDreamScheduleExcel.AddIconPath(builder, IconPath_off)
    MiniGameDreamScheduleExcel.AddLoadingResource01(builder, LoadingResource01_off)
    MiniGameDreamScheduleExcel.AddLoadingResource02(builder, LoadingResource02_off)
    MiniGameDreamScheduleExcel.AddAnimationName(builder, AnimationName_off)
    return MiniGameDreamScheduleExcel.End(builder)

def pack_MiniGameDreamScheduleResultExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamScheduleResult") if encrypt else None
    RewardParameter_vec = 0
    if 'RewardParameter' in data:
        RewardParameter_items = data['RewardParameter']
        MiniGameDreamScheduleResultExcel.StartRewardParameterVector(builder, len(RewardParameter_items))
        for item in reversed(RewardParameter_items):
            builder.PrependInt32(convert_int(getattr(DreamMakerParameterType, item), password))
        RewardParameter_vec = builder.EndVector(len(RewardParameter_items))
    RewardParameterOperationType_vec = 0
    if 'RewardParameterOperationType' in data:
        RewardParameterOperationType_items = data['RewardParameterOperationType']
        MiniGameDreamScheduleResultExcel.StartRewardParameterOperationTypeVector(builder, len(RewardParameterOperationType_items))
        for item in reversed(RewardParameterOperationType_items):
            builder.PrependInt32(convert_int(getattr(DreamMakerParamOperationType, item), password))
        RewardParameterOperationType_vec = builder.EndVector(len(RewardParameterOperationType_items))
    RewardParameterAmount_vec = 0
    if 'RewardParameterAmount' in data:
        RewardParameterAmount_items = data['RewardParameterAmount']
        MiniGameDreamScheduleResultExcel.StartRewardParameterAmountVector(builder, len(RewardParameterAmount_items))
        for item in reversed(RewardParameterAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParameterAmount_vec = builder.EndVector(len(RewardParameterAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DreamMakerResult_val = convert_int(getattr(DreamMakerResult, data.get('DreamMakerResult', 0)), password)
    DreamMakerScheduleGroup_val = convert_long(data.get('DreamMakerScheduleGroup', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    MiniGameDreamScheduleResultExcel.Start(builder)
    MiniGameDreamScheduleResultExcel.AddId(builder, Id_val)
    MiniGameDreamScheduleResultExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamScheduleResultExcel.AddDreamMakerResult(builder, DreamMakerResult_val)
    MiniGameDreamScheduleResultExcel.AddDreamMakerScheduleGroup(builder, DreamMakerScheduleGroup_val)
    MiniGameDreamScheduleResultExcel.AddProb(builder, Prob_val)
    MiniGameDreamScheduleResultExcel.AddRewardParameter(builder, RewardParameter_vec)
    MiniGameDreamScheduleResultExcel.AddRewardParameterOperationType(builder, RewardParameterOperationType_vec)
    MiniGameDreamScheduleResultExcel.AddRewardParameterAmount(builder, RewardParameterAmount_vec)
    MiniGameDreamScheduleResultExcel.AddRewardParcelType(builder, RewardParcelType_val)
    MiniGameDreamScheduleResultExcel.AddRewardParcelId(builder, RewardParcelId_val)
    MiniGameDreamScheduleResultExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return MiniGameDreamScheduleResultExcel.End(builder)

def pack_MiniGameDreamTimelineExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameDreamTimeline") if encrypt else None
    ArtLevelPath_off = builder.CreateString(encrypt_string(data.get('ArtLevelPath', ''), password))
    DesignLevelPath_off = builder.CreateString(encrypt_string(data.get('DesignLevelPath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DreamMakerDays_val = convert_long(data.get('DreamMakerDays', 0), password)
    DreamMakerActionPoint_val = convert_long(data.get('DreamMakerActionPoint', 0), password)
    EnterScenarioGroupId_val = convert_long(data.get('EnterScenarioGroupId', 0), password)
    Bgm_val = convert_long(data.get('Bgm', 0), password)
    MiniGameDreamTimelineExcel.Start(builder)
    MiniGameDreamTimelineExcel.AddId(builder, Id_val)
    MiniGameDreamTimelineExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameDreamTimelineExcel.AddGroupId(builder, GroupId_val)
    MiniGameDreamTimelineExcel.AddDreamMakerDays(builder, DreamMakerDays_val)
    MiniGameDreamTimelineExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint_val)
    MiniGameDreamTimelineExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_val)
    MiniGameDreamTimelineExcel.AddBgm(builder, Bgm_val)
    MiniGameDreamTimelineExcel.AddArtLevelPath(builder, ArtLevelPath_off)
    MiniGameDreamTimelineExcel.AddDesignLevelPath(builder, DesignLevelPath_off)
    return MiniGameDreamTimelineExcel.End(builder)

def pack_MinigameDreamVoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameDreamVoice") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    VoiceCondition_val = convert_int(getattr(DreamMakerVoiceCondition, data.get('VoiceCondition', 0)), password)
    VoiceClip_val = convert_uint(data.get('VoiceClip', 0), password)
    MinigameDreamVoiceExcel.Start(builder)
    MinigameDreamVoiceExcel.AddEventContentId(builder, EventContentId_val)
    MinigameDreamVoiceExcel.AddUniqueId(builder, UniqueId_val)
    MinigameDreamVoiceExcel.AddVoiceCondition(builder, VoiceCondition_val)
    MinigameDreamVoiceExcel.AddVoiceClip(builder, VoiceClip_val)
    return MinigameDreamVoiceExcel.End(builder)

def pack_MiniGameMissionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameMission") if encrypt else None
    GroupName_off = builder.CreateString(encrypt_string(data.get('GroupName', ''), password))
    ToastImagePath_off = builder.CreateString(encrypt_string(data.get('ToastImagePath', ''), password))
    RewardIcon_off = builder.CreateString(encrypt_string(data.get('RewardIcon', ''), password))
    PreMissionId_vec = 0
    if 'PreMissionId' in data:
        PreMissionId_items = data['PreMissionId']
        MiniGameMissionExcel.StartPreMissionIdVector(builder, len(PreMissionId_items))
        for item in reversed(PreMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        PreMissionId_vec = builder.EndVector(len(PreMissionId_items))
    ShortcutUI_vec = 0
    if 'ShortcutUI' in data:
        ShortcutUI_items = data['ShortcutUI']
        ShortcutUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUI_items]
        MiniGameMissionExcel.StartShortcutUIVector(builder, len(ShortcutUI_str_offsets))
        for offset in reversed(ShortcutUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUI_vec = builder.EndVector(len(ShortcutUI_items))
    CompleteConditionParameter_vec = 0
    if 'CompleteConditionParameter' in data:
        CompleteConditionParameter_items = data['CompleteConditionParameter']
        MiniGameMissionExcel.StartCompleteConditionParameterVector(builder, len(CompleteConditionParameter_items))
        for item in reversed(CompleteConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionParameter_vec = builder.EndVector(len(CompleteConditionParameter_items))
    CompleteConditionParameterTag_vec = 0
    if 'CompleteConditionParameterTag' in data:
        CompleteConditionParameterTag_items = data['CompleteConditionParameterTag']
        MiniGameMissionExcel.StartCompleteConditionParameterTagVector(builder, len(CompleteConditionParameterTag_items))
        for item in reversed(CompleteConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CompleteConditionParameterTag_vec = builder.EndVector(len(CompleteConditionParameterTag_items))
    CompleteConditionMissionId_vec = 0
    if 'CompleteConditionMissionId' in data:
        CompleteConditionMissionId_items = data['CompleteConditionMissionId']
        MiniGameMissionExcel.StartCompleteConditionMissionIdVector(builder, len(CompleteConditionMissionId_items))
        for item in reversed(CompleteConditionMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionMissionId_vec = builder.EndVector(len(CompleteConditionMissionId_items))
    MissionRewardParcelType_vec = 0
    if 'MissionRewardParcelType' in data:
        MissionRewardParcelType_items = data['MissionRewardParcelType']
        MiniGameMissionExcel.StartMissionRewardParcelTypeVector(builder, len(MissionRewardParcelType_items))
        for item in reversed(MissionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        MissionRewardParcelType_vec = builder.EndVector(len(MissionRewardParcelType_items))
    MissionRewardParcelId_vec = 0
    if 'MissionRewardParcelId' in data:
        MissionRewardParcelId_items = data['MissionRewardParcelId']
        MiniGameMissionExcel.StartMissionRewardParcelIdVector(builder, len(MissionRewardParcelId_items))
        for item in reversed(MissionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        MissionRewardParcelId_vec = builder.EndVector(len(MissionRewardParcelId_items))
    MissionRewardAmount_vec = 0
    if 'MissionRewardAmount' in data:
        MissionRewardAmount_items = data['MissionRewardAmount']
        MiniGameMissionExcel.StartMissionRewardAmountVector(builder, len(MissionRewardAmount_items))
        for item in reversed(MissionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        MissionRewardAmount_vec = builder.EndVector(len(MissionRewardAmount_items))
    ConditionRewardParcelType_vec = 0
    if 'ConditionRewardParcelType' in data:
        ConditionRewardParcelType_items = data['ConditionRewardParcelType']
        MiniGameMissionExcel.StartConditionRewardParcelTypeVector(builder, len(ConditionRewardParcelType_items))
        for item in reversed(ConditionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ConditionRewardParcelType_vec = builder.EndVector(len(ConditionRewardParcelType_items))
    ConditionRewardParcelId_vec = 0
    if 'ConditionRewardParcelId' in data:
        ConditionRewardParcelId_items = data['ConditionRewardParcelId']
        MiniGameMissionExcel.StartConditionRewardParcelIdVector(builder, len(ConditionRewardParcelId_items))
        for item in reversed(ConditionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionRewardParcelId_vec = builder.EndVector(len(ConditionRewardParcelId_items))
    ConditionRewardAmount_vec = 0
    if 'ConditionRewardAmount' in data:
        ConditionRewardAmount_items = data['ConditionRewardAmount']
        MiniGameMissionExcel.StartConditionRewardAmountVector(builder, len(ConditionRewardAmount_items))
        for item in reversed(ConditionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        ConditionRewardAmount_vec = builder.EndVector(len(ConditionRewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    Category_val = convert_int(getattr(MissionCategory, data.get('Category', 0)), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    ResetType_val = convert_int(getattr(MissionResetType, data.get('ResetType', 0)), password)
    ToastDisplayType_val = convert_int(getattr(MissionToastDisplayConditionType, data.get('ToastDisplayType', 0)), password)
    ViewFlag_val = data.get('ViewFlag', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    AccountType_val = convert_int(getattr(AccountState, data.get('AccountType', 0)), password)
    AccountLevel_val = convert_long(data.get('AccountLevel', 0), password)
    CompleteConditionType_val = convert_int(getattr(MissionCompleteConditionType, data.get('CompleteConditionType', 0)), password)
    IsCompleteExtensionTime_val = data.get('IsCompleteExtensionTime', 0)
    CompleteConditionCount_val = convert_long(data.get('CompleteConditionCount', 0), password)
    CompleteConditionMissionCount_val = convert_long(data.get('CompleteConditionMissionCount', 0), password)
    MiniGameMissionExcel.Start(builder)
    MiniGameMissionExcel.AddId(builder, Id_val)
    MiniGameMissionExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameMissionExcel.AddGroupId(builder, GroupId_val)
    MiniGameMissionExcel.AddGroupName(builder, GroupName_off)
    MiniGameMissionExcel.AddCategory(builder, Category_val)
    MiniGameMissionExcel.AddDescription(builder, Description_val)
    MiniGameMissionExcel.AddResetType(builder, ResetType_val)
    MiniGameMissionExcel.AddToastDisplayType(builder, ToastDisplayType_val)
    MiniGameMissionExcel.AddToastImagePath(builder, ToastImagePath_off)
    MiniGameMissionExcel.AddViewFlag(builder, ViewFlag_val)
    MiniGameMissionExcel.AddDisplayOrder(builder, DisplayOrder_val)
    MiniGameMissionExcel.AddPreMissionId(builder, PreMissionId_vec)
    MiniGameMissionExcel.AddAccountType(builder, AccountType_val)
    MiniGameMissionExcel.AddAccountLevel(builder, AccountLevel_val)
    MiniGameMissionExcel.AddShortcutUI(builder, ShortcutUI_vec)
    MiniGameMissionExcel.AddCompleteConditionType(builder, CompleteConditionType_val)
    MiniGameMissionExcel.AddIsCompleteExtensionTime(builder, IsCompleteExtensionTime_val)
    MiniGameMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount_val)
    MiniGameMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameter_vec)
    MiniGameMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTag_vec)
    MiniGameMissionExcel.AddRewardIcon(builder, RewardIcon_off)
    MiniGameMissionExcel.AddCompleteConditionMissionId(builder, CompleteConditionMissionId_vec)
    MiniGameMissionExcel.AddCompleteConditionMissionCount(builder, CompleteConditionMissionCount_val)
    MiniGameMissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelType_vec)
    MiniGameMissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelId_vec)
    MiniGameMissionExcel.AddMissionRewardAmount(builder, MissionRewardAmount_vec)
    MiniGameMissionExcel.AddConditionRewardParcelType(builder, ConditionRewardParcelType_vec)
    MiniGameMissionExcel.AddConditionRewardParcelId(builder, ConditionRewardParcelId_vec)
    MiniGameMissionExcel.AddConditionRewardAmount(builder, ConditionRewardAmount_vec)
    return MiniGameMissionExcel.End(builder)

def pack_MiniGamePlayGuideExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGamePlayGuide") if encrypt else None
    GuideTitle_off = builder.CreateString(encrypt_string(data.get('GuideTitle', ''), password))
    GuideImagePath_off = builder.CreateString(encrypt_string(data.get('GuideImagePath', ''), password))
    GuideText_off = builder.CreateString(encrypt_string(data.get('GuideText', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    MiniGamePlayGuideExcel.Start(builder)
    MiniGamePlayGuideExcel.AddId(builder, Id_val)
    MiniGamePlayGuideExcel.AddEventContentId(builder, EventContentId_val)
    MiniGamePlayGuideExcel.AddDisplayOrder(builder, DisplayOrder_val)
    MiniGamePlayGuideExcel.AddGuideTitle(builder, GuideTitle_off)
    MiniGamePlayGuideExcel.AddGuideImagePath(builder, GuideImagePath_off)
    MiniGamePlayGuideExcel.AddGuideText(builder, GuideText_off)
    return MiniGamePlayGuideExcel.End(builder)

def pack_MiniGameRhythmBgmExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRhythmBgm") if encrypt else None
    StageSelectImagePath_off = builder.CreateString(encrypt_string(data.get('StageSelectImagePath', ''), password))
    BgmNameText_off = builder.CreateString(encrypt_string(data.get('BgmNameText', ''), password))
    BgmArtistText_off = builder.CreateString(encrypt_string(data.get('BgmArtistText', ''), password))
    BgmComposerText_off = builder.CreateString(encrypt_string(data.get('BgmComposerText', ''), password))
    RhythmBgmId_val = convert_long(data.get('RhythmBgmId', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    Bpm_val = convert_long(data.get('Bpm', 0), password)
    Bgm_val = convert_long(data.get('Bgm', 0), password)
    HasLyricist_val = data.get('HasLyricist', 0)
    BgmLength_val = convert_int(data.get('BgmLength', 0), password)
    MiniGameRhythmBgmExcel.Start(builder)
    MiniGameRhythmBgmExcel.AddRhythmBgmId(builder, RhythmBgmId_val)
    MiniGameRhythmBgmExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRhythmBgmExcel.AddStageSelectImagePath(builder, StageSelectImagePath_off)
    MiniGameRhythmBgmExcel.AddBpm(builder, Bpm_val)
    MiniGameRhythmBgmExcel.AddBgm(builder, Bgm_val)
    MiniGameRhythmBgmExcel.AddBgmNameText(builder, BgmNameText_off)
    MiniGameRhythmBgmExcel.AddBgmArtistText(builder, BgmArtistText_off)
    MiniGameRhythmBgmExcel.AddHasLyricist(builder, HasLyricist_val)
    MiniGameRhythmBgmExcel.AddBgmComposerText(builder, BgmComposerText_off)
    MiniGameRhythmBgmExcel.AddBgmLength(builder, BgmLength_val)
    return MiniGameRhythmBgmExcel.End(builder)

def pack_MiniGameRhythmExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRhythm") if encrypt else None
    PresetName_off = builder.CreateString(encrypt_string(data.get('PresetName', ''), password))
    RhythmFileName_off = builder.CreateString(encrypt_string(data.get('RhythmFileName', ''), password))
    ArtLevelSceneName_off = builder.CreateString(encrypt_string(data.get('ArtLevelSceneName', ''), password))
    ComboImagePath_off = builder.CreateString(encrypt_string(data.get('ComboImagePath', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    RhythmBgmId_val = convert_long(data.get('RhythmBgmId', 0), password)
    StageDifficulty_val = convert_int(getattr(Difficulty, data.get('StageDifficulty', 0)), password)
    IsSpecial_val = data.get('IsSpecial', 0)
    OpenStageScoreAmount_val = convert_long(data.get('OpenStageScoreAmount', 0), password)
    MaxHp_val = convert_long(data.get('MaxHp', 0), password)
    MissDamage_val = convert_long(data.get('MissDamage', 0), password)
    CriticalHPRestoreValue_val = convert_long(data.get('CriticalHPRestoreValue', 0), password)
    MaxScore_val = convert_long(data.get('MaxScore', 0), password)
    FeverScoreRate_val = convert_long(data.get('FeverScoreRate', 0), password)
    NoteScoreRate_val = convert_long(data.get('NoteScoreRate', 0), password)
    ComboScoreRate_val = convert_long(data.get('ComboScoreRate', 0), password)
    AttackScoreRate_val = convert_long(data.get('AttackScoreRate', 0), password)
    FeverCriticalRate_val = encrypt_float(data.get('FeverCriticalRate', 0), password)
    FeverAttackRate_val = encrypt_float(data.get('FeverAttackRate', 0), password)
    MaxHpScore_val = convert_long(data.get('MaxHpScore', 0), password)
    MiniGameRhythmExcel.Start(builder)
    MiniGameRhythmExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameRhythmExcel.AddRhythmBgmId(builder, RhythmBgmId_val)
    MiniGameRhythmExcel.AddPresetName(builder, PresetName_off)
    MiniGameRhythmExcel.AddStageDifficulty(builder, StageDifficulty_val)
    MiniGameRhythmExcel.AddIsSpecial(builder, IsSpecial_val)
    MiniGameRhythmExcel.AddOpenStageScoreAmount(builder, OpenStageScoreAmount_val)
    MiniGameRhythmExcel.AddMaxHp(builder, MaxHp_val)
    MiniGameRhythmExcel.AddMissDamage(builder, MissDamage_val)
    MiniGameRhythmExcel.AddCriticalHPRestoreValue(builder, CriticalHPRestoreValue_val)
    MiniGameRhythmExcel.AddMaxScore(builder, MaxScore_val)
    MiniGameRhythmExcel.AddFeverScoreRate(builder, FeverScoreRate_val)
    MiniGameRhythmExcel.AddNoteScoreRate(builder, NoteScoreRate_val)
    MiniGameRhythmExcel.AddComboScoreRate(builder, ComboScoreRate_val)
    MiniGameRhythmExcel.AddAttackScoreRate(builder, AttackScoreRate_val)
    MiniGameRhythmExcel.AddFeverCriticalRate(builder, FeverCriticalRate_val)
    MiniGameRhythmExcel.AddFeverAttackRate(builder, FeverAttackRate_val)
    MiniGameRhythmExcel.AddMaxHpScore(builder, MaxHpScore_val)
    MiniGameRhythmExcel.AddRhythmFileName(builder, RhythmFileName_off)
    MiniGameRhythmExcel.AddArtLevelSceneName(builder, ArtLevelSceneName_off)
    MiniGameRhythmExcel.AddComboImagePath(builder, ComboImagePath_off)
    return MiniGameRhythmExcel.End(builder)

def pack_MiniGameRoadPuzzleAdditionalRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRoadPuzzleAdditionalReward") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    MiniGameRoadPuzzleAdditionalRewardExcel.Start(builder)
    MiniGameRoadPuzzleAdditionalRewardExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRoadPuzzleAdditionalRewardExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return MiniGameRoadPuzzleAdditionalRewardExcel.End(builder)

def pack_MiniGameRoadPuzzleInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRoadPuzzleInfo") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventUseCostType_val = convert_int(getattr(ParcelType, data.get('EventUseCostType', 0)), password)
    EventUseCostId_val = convert_long(data.get('EventUseCostId', 0), password)
    CostGoodsId_val = convert_long(data.get('CostGoodsId', 0), password)
    RailSetRewardId_val = convert_long(data.get('RailSetRewardId', 0), password)
    InstantClearRound_val = convert_int(data.get('InstantClearRound', 0), password)
    MiniGameRoadPuzzleInfoExcel.Start(builder)
    MiniGameRoadPuzzleInfoExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostType(builder, EventUseCostType_val)
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostId(builder, EventUseCostId_val)
    MiniGameRoadPuzzleInfoExcel.AddCostGoodsId(builder, CostGoodsId_val)
    MiniGameRoadPuzzleInfoExcel.AddRailSetRewardId(builder, RailSetRewardId_val)
    MiniGameRoadPuzzleInfoExcel.AddInstantClearRound(builder, InstantClearRound_val)
    return MiniGameRoadPuzzleInfoExcel.End(builder)

def pack_MinigameRoadPuzzleMapExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameRoadPuzzleMap") if encrypt else None
    Map_off = builder.CreateString(encrypt_string(data.get('Map', ''), password))
    MapBG_off = builder.CreateString(encrypt_string(data.get('MapBG', ''), password))
    AvailableRailTile_vec = 0
    if 'AvailableRailTile' in data:
        AvailableRailTile_items = data['AvailableRailTile']
        MinigameRoadPuzzleMapExcel.StartAvailableRailTileVector(builder, len(AvailableRailTile_items))
        for item in reversed(AvailableRailTile_items):
            builder.PrependInt64(convert_long(item, password))
        AvailableRailTile_vec = builder.EndVector(len(AvailableRailTile_items))
    AvailableRailTileAmount_vec = 0
    if 'AvailableRailTileAmount' in data:
        AvailableRailTileAmount_items = data['AvailableRailTileAmount']
        MinigameRoadPuzzleMapExcel.StartAvailableRailTileAmountVector(builder, len(AvailableRailTileAmount_items))
        for item in reversed(AvailableRailTileAmount_items):
            builder.PrependInt64(convert_long(item, password))
        AvailableRailTileAmount_vec = builder.EndVector(len(AvailableRailTileAmount_items))
    OriginalTileCount_vec = 0
    if 'OriginalTileCount' in data:
        OriginalTileCount_items = data['OriginalTileCount']
        MinigameRoadPuzzleMapExcel.StartOriginalTileCountVector(builder, len(OriginalTileCount_items))
        for item in reversed(OriginalTileCount_items):
            builder.PrependInt64(convert_long(item, password))
        OriginalTileCount_vec = builder.EndVector(len(OriginalTileCount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    MapGroupId_val = convert_long(data.get('MapGroupId', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    TrainSpeed_val = encrypt_float(data.get('TrainSpeed', 0), password)
    MinigameRoadPuzzleMapExcel.Start(builder)
    MinigameRoadPuzzleMapExcel.AddEventContentId(builder, EventContentId_val)
    MinigameRoadPuzzleMapExcel.AddUniqueId(builder, UniqueId_val)
    MinigameRoadPuzzleMapExcel.AddMapGroupId(builder, MapGroupId_val)
    MinigameRoadPuzzleMapExcel.AddMap(builder, Map_off)
    MinigameRoadPuzzleMapExcel.AddMapBG(builder, MapBG_off)
    MinigameRoadPuzzleMapExcel.AddBGMId(builder, BGMId_val)
    MinigameRoadPuzzleMapExcel.AddAvailableRailTile(builder, AvailableRailTile_vec)
    MinigameRoadPuzzleMapExcel.AddAvailableRailTileAmount(builder, AvailableRailTileAmount_vec)
    MinigameRoadPuzzleMapExcel.AddOriginalTileCount(builder, OriginalTileCount_vec)
    MinigameRoadPuzzleMapExcel.AddTrainSpeed(builder, TrainSpeed_val)
    return MinigameRoadPuzzleMapExcel.End(builder)

def pack_MinigameRoadPuzzleMapTileExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameRoadPuzzleMapTile") if encrypt else None
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    MapTileType_val = convert_int(getattr(RoadPuzzleMapTileType, data.get('MapTileType', 0)), password)
    MinigameRoadPuzzleMapTileExcel.Start(builder)
    MinigameRoadPuzzleMapTileExcel.AddEventContentId(builder, EventContentId_val)
    MinigameRoadPuzzleMapTileExcel.AddUniqueId(builder, UniqueId_val)
    MinigameRoadPuzzleMapTileExcel.AddPrefabName(builder, PrefabName_off)
    MinigameRoadPuzzleMapTileExcel.AddMapTileType(builder, MapTileType_val)
    return MinigameRoadPuzzleMapTileExcel.End(builder)

def pack_MiniGameRoadPuzzleRailSetRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRoadPuzzleRailSetReward") if encrypt else None
    LocalizePrefabID_off = builder.CreateString(encrypt_string(data.get('LocalizePrefabID', ''), password))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        MiniGameRoadPuzzleRailSetRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        MiniGameRoadPuzzleRailSetRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        MiniGameRoadPuzzleRailSetRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    MiniGameRoadPuzzleRailSetRewardExcel.Start(builder)
    MiniGameRoadPuzzleRailSetRewardExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRoadPuzzleRailSetRewardExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameRoadPuzzleRailSetRewardExcel.AddLocalizePrefabID(builder, LocalizePrefabID_off)
    MiniGameRoadPuzzleRailSetRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    MiniGameRoadPuzzleRailSetRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    MiniGameRoadPuzzleRailSetRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return MiniGameRoadPuzzleRailSetRewardExcel.End(builder)

def pack_MinigameRoadPuzzleRailTileExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameRoadPuzzleRailTile") if encrypt else None
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    OriginalTile_val = data.get('OriginalTile', 0)
    RailTileType_val = convert_int(getattr(RoadPuzzleRailTileType, data.get('RailTileType', 0)), password)
    MinigameRoadPuzzleRailTileExcel.Start(builder)
    MinigameRoadPuzzleRailTileExcel.AddEventContentId(builder, EventContentId_val)
    MinigameRoadPuzzleRailTileExcel.AddUniqueId(builder, UniqueId_val)
    MinigameRoadPuzzleRailTileExcel.AddGroupId(builder, GroupId_val)
    MinigameRoadPuzzleRailTileExcel.AddOriginalTile(builder, OriginalTile_val)
    MinigameRoadPuzzleRailTileExcel.AddPrefabName(builder, PrefabName_off)
    MinigameRoadPuzzleRailTileExcel.AddRailTileType(builder, RailTileType_val)
    return MinigameRoadPuzzleRailTileExcel.End(builder)

def pack_MiniGameRoadPuzzleRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRoadPuzzleReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        MiniGameRoadPuzzleRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        MiniGameRoadPuzzleRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        MiniGameRoadPuzzleRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    MiniGameRoadPuzzleRewardExcel.Start(builder)
    MiniGameRoadPuzzleRewardExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRoadPuzzleRewardExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameRoadPuzzleRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    MiniGameRoadPuzzleRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    MiniGameRoadPuzzleRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return MiniGameRoadPuzzleRewardExcel.End(builder)

def pack_MinigameRoadPuzzleRoadRoundExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameRoadPuzzleRoadRound") if encrypt else None
    AdditionalRewardID_vec = 0
    if 'AdditionalRewardID' in data:
        AdditionalRewardID_items = data['AdditionalRewardID']
        MinigameRoadPuzzleRoadRoundExcel.StartAdditionalRewardIDVector(builder, len(AdditionalRewardID_items))
        for item in reversed(AdditionalRewardID_items):
            builder.PrependInt64(convert_long(item, password))
        AdditionalRewardID_vec = builder.EndVector(len(AdditionalRewardID_items))
    AdditionalRewardAmount_vec = 0
    if 'AdditionalRewardAmount' in data:
        AdditionalRewardAmount_items = data['AdditionalRewardAmount']
        MinigameRoadPuzzleRoadRoundExcel.StartAdditionalRewardAmountVector(builder, len(AdditionalRewardAmount_items))
        for item in reversed(AdditionalRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        AdditionalRewardAmount_vec = builder.EndVector(len(AdditionalRewardAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    Round_val = convert_int(data.get('Round', 0), password)
    IsLoop_val = data.get('IsLoop', 0)
    EnterScenarioGroupId_val = convert_long(data.get('EnterScenarioGroupId', 0), password)
    EndScenarioGroupId_val = convert_long(data.get('EndScenarioGroupId', 0), password)
    MapGroupId_val = convert_long(data.get('MapGroupId', 0), password)
    RoundReward_val = convert_long(data.get('RoundReward', 0), password)
    MinigameRoadPuzzleRoadRoundExcel.Start(builder)
    MinigameRoadPuzzleRoadRoundExcel.AddEventContentId(builder, EventContentId_val)
    MinigameRoadPuzzleRoadRoundExcel.AddUniqueId(builder, UniqueId_val)
    MinigameRoadPuzzleRoadRoundExcel.AddRound(builder, Round_val)
    MinigameRoadPuzzleRoadRoundExcel.AddIsLoop(builder, IsLoop_val)
    MinigameRoadPuzzleRoadRoundExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId_val)
    MinigameRoadPuzzleRoadRoundExcel.AddEndScenarioGroupId(builder, EndScenarioGroupId_val)
    MinigameRoadPuzzleRoadRoundExcel.AddMapGroupId(builder, MapGroupId_val)
    MinigameRoadPuzzleRoadRoundExcel.AddRoundReward(builder, RoundReward_val)
    MinigameRoadPuzzleRoadRoundExcel.AddAdditionalRewardID(builder, AdditionalRewardID_vec)
    MinigameRoadPuzzleRoadRoundExcel.AddAdditionalRewardAmount(builder, AdditionalRewardAmount_vec)
    return MinigameRoadPuzzleRoadRoundExcel.End(builder)

def pack_MiniGameRoadPuzzleVoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameRoadPuzzleVoice") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    VoiceCondition_val = convert_int(getattr(RoadPuzzleVoiceCondition, data.get('VoiceCondition', 0)), password)
    VoiceClip_val = convert_uint(data.get('VoiceClip', 0), password)
    MiniGameRoadPuzzleVoiceExcel.Start(builder)
    MiniGameRoadPuzzleVoiceExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameRoadPuzzleVoiceExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameRoadPuzzleVoiceExcel.AddVoiceCondition(builder, VoiceCondition_val)
    MiniGameRoadPuzzleVoiceExcel.AddVoiceClip(builder, VoiceClip_val)
    return MiniGameRoadPuzzleVoiceExcel.End(builder)

def pack_MiniGameShootingCharacterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameShootingCharacter") if encrypt else None
    SpineResourceName_off = builder.CreateString(encrypt_string(data.get('SpineResourceName', ''), password))
    ModelPrefabName_off = builder.CreateString(encrypt_string(data.get('ModelPrefabName', ''), password))
    NormalAttackSkillData_off = builder.CreateString(encrypt_string(data.get('NormalAttackSkillData', ''), password))
    DeathSkillData_off = builder.CreateString(encrypt_string(data.get('DeathSkillData', ''), password))
    PublicSkillData_vec = 0
    if 'PublicSkillData' in data:
        PublicSkillData_items = data['PublicSkillData']
        PublicSkillData_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PublicSkillData_items]
        MiniGameShootingCharacterExcel.StartPublicSkillDataVector(builder, len(PublicSkillData_str_offsets))
        for offset in reversed(PublicSkillData_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PublicSkillData_vec = builder.EndVector(len(PublicSkillData_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    BodyRadius_val = encrypt_float(data.get('BodyRadius', 0), password)
    MaxHP_val = convert_long(data.get('MaxHP', 0), password)
    AttackPower_val = convert_long(data.get('AttackPower', 0), password)
    DefensePower_val = convert_long(data.get('DefensePower', 0), password)
    CriticalRate_val = convert_long(data.get('CriticalRate', 0), password)
    CriticalDamageRate_val = convert_long(data.get('CriticalDamageRate', 0), password)
    AttackRange_val = convert_long(data.get('AttackRange', 0), password)
    MoveSpeed_val = convert_long(data.get('MoveSpeed', 0), password)
    ShotTime_val = convert_long(data.get('ShotTime', 0), password)
    IsBoss_val = data.get('IsBoss', 0)
    Scale_val = encrypt_float(data.get('Scale', 0), password)
    IgnoreObstacleCheck_val = data.get('IgnoreObstacleCheck', 0)
    CharacterVoiceGroupId_val = convert_long(data.get('CharacterVoiceGroupId', 0), password)
    MiniGameShootingCharacterExcel.Start(builder)
    MiniGameShootingCharacterExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameShootingCharacterExcel.AddSpineResourceName(builder, SpineResourceName_off)
    MiniGameShootingCharacterExcel.AddBodyRadius(builder, BodyRadius_val)
    MiniGameShootingCharacterExcel.AddModelPrefabName(builder, ModelPrefabName_off)
    MiniGameShootingCharacterExcel.AddNormalAttackSkillData(builder, NormalAttackSkillData_off)
    MiniGameShootingCharacterExcel.AddPublicSkillData(builder, PublicSkillData_vec)
    MiniGameShootingCharacterExcel.AddDeathSkillData(builder, DeathSkillData_off)
    MiniGameShootingCharacterExcel.AddMaxHP(builder, MaxHP_val)
    MiniGameShootingCharacterExcel.AddAttackPower(builder, AttackPower_val)
    MiniGameShootingCharacterExcel.AddDefensePower(builder, DefensePower_val)
    MiniGameShootingCharacterExcel.AddCriticalRate(builder, CriticalRate_val)
    MiniGameShootingCharacterExcel.AddCriticalDamageRate(builder, CriticalDamageRate_val)
    MiniGameShootingCharacterExcel.AddAttackRange(builder, AttackRange_val)
    MiniGameShootingCharacterExcel.AddMoveSpeed(builder, MoveSpeed_val)
    MiniGameShootingCharacterExcel.AddShotTime(builder, ShotTime_val)
    MiniGameShootingCharacterExcel.AddIsBoss(builder, IsBoss_val)
    MiniGameShootingCharacterExcel.AddScale(builder, Scale_val)
    MiniGameShootingCharacterExcel.AddIgnoreObstacleCheck(builder, IgnoreObstacleCheck_val)
    MiniGameShootingCharacterExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId_val)
    return MiniGameShootingCharacterExcel.End(builder)

def pack_MiniGameShootingGeasExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameShootingGeas") if encrypt else None
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    GeasData_off = builder.CreateString(encrypt_string(data.get('GeasData', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    GeasType_val = convert_int(getattr(Geas, data.get('GeasType', 0)), password)
    Probability_val = convert_long(data.get('Probability', 0), password)
    MaxOverlapCount_val = convert_int(data.get('MaxOverlapCount', 0), password)
    NeedGeasId_val = convert_long(data.get('NeedGeasId', 0), password)
    HideInPausePopup_val = data.get('HideInPausePopup', 0)
    MiniGameShootingGeasExcel.Start(builder)
    MiniGameShootingGeasExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameShootingGeasExcel.AddGeasType(builder, GeasType_val)
    MiniGameShootingGeasExcel.AddIcon(builder, Icon_off)
    MiniGameShootingGeasExcel.AddProbability(builder, Probability_val)
    MiniGameShootingGeasExcel.AddMaxOverlapCount(builder, MaxOverlapCount_val)
    MiniGameShootingGeasExcel.AddGeasData(builder, GeasData_off)
    MiniGameShootingGeasExcel.AddNeedGeasId(builder, NeedGeasId_val)
    MiniGameShootingGeasExcel.AddHideInPausePopup(builder, HideInPausePopup_val)
    return MiniGameShootingGeasExcel.End(builder)

def pack_MiniGameShootingStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameShootingStage") if encrypt else None
    DesignLevel_off = builder.CreateString(encrypt_string(data.get('DesignLevel', ''), password))
    ArtLevel_off = builder.CreateString(encrypt_string(data.get('ArtLevel', ''), password))
    DefaultLogicEffect_off = builder.CreateString(encrypt_string(data.get('DefaultLogicEffect', ''), password))
    BgmId_vec = 0
    if 'BgmId' in data:
        BgmId_items = data['BgmId']
        MiniGameShootingStageExcel.StartBgmIdVector(builder, len(BgmId_items))
        for item in reversed(BgmId_items):
            builder.PrependInt64(convert_long(item, password))
        BgmId_vec = builder.EndVector(len(BgmId_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    CostGoodsId_val = convert_long(data.get('CostGoodsId', 0), password)
    Difficulty_val = convert_int(getattr(Difficulty, data.get('Difficulty', 0)), password)
    StartBattleDuration_val = convert_long(data.get('StartBattleDuration', 0), password)
    DefaultBattleDuration_val = convert_long(data.get('DefaultBattleDuration', 0), password)
    CameraSizeRate_val = encrypt_float(data.get('CameraSizeRate', 0), password)
    EventContentStageRewardId_val = convert_long(data.get('EventContentStageRewardId', 0), password)
    MiniGameShootingStageExcel.Start(builder)
    MiniGameShootingStageExcel.AddUniqueId(builder, UniqueId_val)
    MiniGameShootingStageExcel.AddBgmId(builder, BgmId_vec)
    MiniGameShootingStageExcel.AddCostGoodsId(builder, CostGoodsId_val)
    MiniGameShootingStageExcel.AddDifficulty(builder, Difficulty_val)
    MiniGameShootingStageExcel.AddDesignLevel(builder, DesignLevel_off)
    MiniGameShootingStageExcel.AddArtLevel(builder, ArtLevel_off)
    MiniGameShootingStageExcel.AddStartBattleDuration(builder, StartBattleDuration_val)
    MiniGameShootingStageExcel.AddDefaultBattleDuration(builder, DefaultBattleDuration_val)
    MiniGameShootingStageExcel.AddDefaultLogicEffect(builder, DefaultLogicEffect_off)
    MiniGameShootingStageExcel.AddCameraSizeRate(builder, CameraSizeRate_val)
    MiniGameShootingStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId_val)
    return MiniGameShootingStageExcel.End(builder)

def pack_MiniGameShootingStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameShootingStageReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        MiniGameShootingStageRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        MiniGameShootingStageRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        MiniGameShootingStageRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt32(convert_int(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    RewardId_val = convert_long(data.get('RewardId', 0), password)
    ClearSection_val = convert_long(data.get('ClearSection', 0), password)
    MiniGameShootingStageRewardExcel.Start(builder)
    MiniGameShootingStageRewardExcel.AddGroupId(builder, GroupId_val)
    MiniGameShootingStageRewardExcel.AddRewardId(builder, RewardId_val)
    MiniGameShootingStageRewardExcel.AddClearSection(builder, ClearSection_val)
    MiniGameShootingStageRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    MiniGameShootingStageRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    MiniGameShootingStageRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return MiniGameShootingStageRewardExcel.End(builder)

def pack_MinigameTBGDiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGDice") if encrypt else None
    ProbModifyCondition_vec = 0
    if 'ProbModifyCondition' in data:
        ProbModifyCondition_items = data['ProbModifyCondition']
        MinigameTBGDiceExcel.StartProbModifyConditionVector(builder, len(ProbModifyCondition_items))
        for item in reversed(ProbModifyCondition_items):
            builder.PrependInt32(convert_int(getattr(TBGProbModifyCondition, item), password))
        ProbModifyCondition_vec = builder.EndVector(len(ProbModifyCondition_items))
    ProbModifyValue_vec = 0
    if 'ProbModifyValue' in data:
        ProbModifyValue_items = data['ProbModifyValue']
        MinigameTBGDiceExcel.StartProbModifyValueVector(builder, len(ProbModifyValue_items))
        for item in reversed(ProbModifyValue_items):
            builder.PrependInt32(convert_int(item, password))
        ProbModifyValue_vec = builder.EndVector(len(ProbModifyValue_items))
    ProbModifyLimit_vec = 0
    if 'ProbModifyLimit' in data:
        ProbModifyLimit_items = data['ProbModifyLimit']
        MinigameTBGDiceExcel.StartProbModifyLimitVector(builder, len(ProbModifyLimit_items))
        for item in reversed(ProbModifyLimit_items):
            builder.PrependInt32(convert_int(item, password))
        ProbModifyLimit_vec = builder.EndVector(len(ProbModifyLimit_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    DiceGroup_val = convert_int(data.get('DiceGroup', 0), password)
    DiceResult_val = convert_int(data.get('DiceResult', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    MinigameTBGDiceExcel.Start(builder)
    MinigameTBGDiceExcel.AddEventContentId(builder, EventContentId_val)
    MinigameTBGDiceExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGDiceExcel.AddDiceGroup(builder, DiceGroup_val)
    MinigameTBGDiceExcel.AddDiceResult(builder, DiceResult_val)
    MinigameTBGDiceExcel.AddProb(builder, Prob_val)
    MinigameTBGDiceExcel.AddProbModifyCondition(builder, ProbModifyCondition_vec)
    MinigameTBGDiceExcel.AddProbModifyValue(builder, ProbModifyValue_vec)
    MinigameTBGDiceExcel.AddProbModifyLimit(builder, ProbModifyLimit_vec)
    return MinigameTBGDiceExcel.End(builder)

def pack_MinigameTBGEncounterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGEncounter") if encrypt else None
    EnemyImagePath_off = builder.CreateString(encrypt_string(data.get('EnemyImagePath', ''), password))
    EnemyPrefabName_off = builder.CreateString(encrypt_string(data.get('EnemyPrefabName', ''), password))
    EnemyNameLocalize_off = builder.CreateString(encrypt_string(data.get('EnemyNameLocalize', ''), password))
    EncounterTitleLocalize_off = builder.CreateString(encrypt_string(data.get('EncounterTitleLocalize', ''), password))
    StoryImagePath_off = builder.CreateString(encrypt_string(data.get('StoryImagePath', ''), password))
    BeforeStoryLocalize_off = builder.CreateString(encrypt_string(data.get('BeforeStoryLocalize', ''), password))
    BeforeStoryOption1Localize_off = builder.CreateString(encrypt_string(data.get('BeforeStoryOption1Localize', ''), password))
    BeforeStoryOption2Localize_off = builder.CreateString(encrypt_string(data.get('BeforeStoryOption2Localize', ''), password))
    BeforeStoryOption3Localize_off = builder.CreateString(encrypt_string(data.get('BeforeStoryOption3Localize', ''), password))
    AllyAttackLocalize_off = builder.CreateString(encrypt_string(data.get('AllyAttackLocalize', ''), password))
    EnemyAttackLocalize_off = builder.CreateString(encrypt_string(data.get('EnemyAttackLocalize', ''), password))
    AttackDefenceLocalize_off = builder.CreateString(encrypt_string(data.get('AttackDefenceLocalize', ''), password))
    ClearStoryLocalize_off = builder.CreateString(encrypt_string(data.get('ClearStoryLocalize', ''), password))
    DefeatStoryLocalize_off = builder.CreateString(encrypt_string(data.get('DefeatStoryLocalize', ''), password))
    RunawayStoryLocalize_off = builder.CreateString(encrypt_string(data.get('RunawayStoryLocalize', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    AllThema_val = data.get('AllThema', 0)
    ThemaIndex_val = convert_int(data.get('ThemaIndex', 0), password)
    ThemaType_val = convert_int(getattr(TBGThemaType, data.get('ThemaType', 0)), password)
    ObjectType_val = convert_int(getattr(TBGObjectType, data.get('ObjectType', 0)), password)
    OptionGroupId_val = convert_long(data.get('OptionGroupId', 0), password)
    RewardHide_val = data.get('RewardHide', 0)
    MinigameTBGEncounterExcel.Start(builder)
    MinigameTBGEncounterExcel.AddEventContentId(builder, EventContentId_val)
    MinigameTBGEncounterExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGEncounterExcel.AddAllThema(builder, AllThema_val)
    MinigameTBGEncounterExcel.AddThemaIndex(builder, ThemaIndex_val)
    MinigameTBGEncounterExcel.AddThemaType(builder, ThemaType_val)
    MinigameTBGEncounterExcel.AddObjectType(builder, ObjectType_val)
    MinigameTBGEncounterExcel.AddEnemyImagePath(builder, EnemyImagePath_off)
    MinigameTBGEncounterExcel.AddEnemyPrefabName(builder, EnemyPrefabName_off)
    MinigameTBGEncounterExcel.AddEnemyNameLocalize(builder, EnemyNameLocalize_off)
    MinigameTBGEncounterExcel.AddOptionGroupId(builder, OptionGroupId_val)
    MinigameTBGEncounterExcel.AddRewardHide(builder, RewardHide_val)
    MinigameTBGEncounterExcel.AddEncounterTitleLocalize(builder, EncounterTitleLocalize_off)
    MinigameTBGEncounterExcel.AddStoryImagePath(builder, StoryImagePath_off)
    MinigameTBGEncounterExcel.AddBeforeStoryLocalize(builder, BeforeStoryLocalize_off)
    MinigameTBGEncounterExcel.AddBeforeStoryOption1Localize(builder, BeforeStoryOption1Localize_off)
    MinigameTBGEncounterExcel.AddBeforeStoryOption2Localize(builder, BeforeStoryOption2Localize_off)
    MinigameTBGEncounterExcel.AddBeforeStoryOption3Localize(builder, BeforeStoryOption3Localize_off)
    MinigameTBGEncounterExcel.AddAllyAttackLocalize(builder, AllyAttackLocalize_off)
    MinigameTBGEncounterExcel.AddEnemyAttackLocalize(builder, EnemyAttackLocalize_off)
    MinigameTBGEncounterExcel.AddAttackDefenceLocalize(builder, AttackDefenceLocalize_off)
    MinigameTBGEncounterExcel.AddClearStoryLocalize(builder, ClearStoryLocalize_off)
    MinigameTBGEncounterExcel.AddDefeatStoryLocalize(builder, DefeatStoryLocalize_off)
    MinigameTBGEncounterExcel.AddRunawayStoryLocalize(builder, RunawayStoryLocalize_off)
    return MinigameTBGEncounterExcel.End(builder)

def pack_MinigameTBGEncounterOptionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGEncounterOption") if encrypt else None
    OptionTitleLocalize_off = builder.CreateString(encrypt_string(data.get('OptionTitleLocalize', ''), password))
    OptionSuccessLocalize_off = builder.CreateString(encrypt_string(data.get('OptionSuccessLocalize', ''), password))
    OptionFailLocalize_off = builder.CreateString(encrypt_string(data.get('OptionFailLocalize', ''), password))
    OptionGroupId_val = convert_long(data.get('OptionGroupId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    SlotIndex_val = convert_int(data.get('SlotIndex', 0), password)
    OptionSuccessRewardGroupId_val = convert_long(data.get('OptionSuccessRewardGroupId', 0), password)
    OptionSuccessOrHigherDiceCount_val = convert_int(data.get('OptionSuccessOrHigherDiceCount', 0), password)
    OptionGreatSuccessOrHigherDiceCount_val = convert_int(data.get('OptionGreatSuccessOrHigherDiceCount', 0), password)
    OptionFailLessDiceCount_val = convert_int(data.get('OptionFailLessDiceCount', 0), password)
    RunawayOrHigherDiceCount_val = convert_int(data.get('RunawayOrHigherDiceCount', 0), password)
    RewardHide_val = data.get('RewardHide', 0)
    MinigameTBGEncounterOptionExcel.Start(builder)
    MinigameTBGEncounterOptionExcel.AddOptionGroupId(builder, OptionGroupId_val)
    MinigameTBGEncounterOptionExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGEncounterOptionExcel.AddSlotIndex(builder, SlotIndex_val)
    MinigameTBGEncounterOptionExcel.AddOptionTitleLocalize(builder, OptionTitleLocalize_off)
    MinigameTBGEncounterOptionExcel.AddOptionSuccessLocalize(builder, OptionSuccessLocalize_off)
    MinigameTBGEncounterOptionExcel.AddOptionSuccessRewardGroupId(builder, OptionSuccessRewardGroupId_val)
    MinigameTBGEncounterOptionExcel.AddOptionSuccessOrHigherDiceCount(builder, OptionSuccessOrHigherDiceCount_val)
    MinigameTBGEncounterOptionExcel.AddOptionGreatSuccessOrHigherDiceCount(builder, OptionGreatSuccessOrHigherDiceCount_val)
    MinigameTBGEncounterOptionExcel.AddOptionFailLocalize(builder, OptionFailLocalize_off)
    MinigameTBGEncounterOptionExcel.AddOptionFailLessDiceCount(builder, OptionFailLessDiceCount_val)
    MinigameTBGEncounterOptionExcel.AddRunawayOrHigherDiceCount(builder, RunawayOrHigherDiceCount_val)
    MinigameTBGEncounterOptionExcel.AddRewardHide(builder, RewardHide_val)
    return MinigameTBGEncounterOptionExcel.End(builder)

def pack_MinigameTBGEncounterRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGEncounterReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    TBGOptionSuccessType_val = convert_int(getattr(TBGOptionSuccessType, data.get('TBGOptionSuccessType', 0)), password)
    Paremeter_val = convert_long(data.get('Paremeter', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    Amount_val = convert_long(data.get('Amount', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    MinigameTBGEncounterRewardExcel.Start(builder)
    MinigameTBGEncounterRewardExcel.AddGroupId(builder, GroupId_val)
    MinigameTBGEncounterRewardExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGEncounterRewardExcel.AddTBGOptionSuccessType(builder, TBGOptionSuccessType_val)
    MinigameTBGEncounterRewardExcel.AddParemeter(builder, Paremeter_val)
    MinigameTBGEncounterRewardExcel.AddParcelType(builder, ParcelType_val)
    MinigameTBGEncounterRewardExcel.AddParcelId(builder, ParcelId_val)
    MinigameTBGEncounterRewardExcel.AddAmount(builder, Amount_val)
    MinigameTBGEncounterRewardExcel.AddProb(builder, Prob_val)
    return MinigameTBGEncounterRewardExcel.End(builder)

def pack_MinigameTBGItemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGItem") if encrypt else None
    LocalizeETCId_off = builder.CreateString(encrypt_string(data.get('LocalizeETCId', ''), password))
    Icon_off = builder.CreateString(encrypt_string(data.get('Icon', ''), password))
    BuffIcon_off = builder.CreateString(encrypt_string(data.get('BuffIcon', ''), password))
    DiceEffectAniClip_off = builder.CreateString(encrypt_string(data.get('DiceEffectAniClip', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ItemType_val = convert_int(getattr(TBGItemType, data.get('ItemType', 0)), password)
    TBGItemEffectType_val = convert_int(getattr(TBGItemEffectType, data.get('TBGItemEffectType', 0)), password)
    ItemParameter_val = convert_int(data.get('ItemParameter', 0), password)
    EncounterCount_val = convert_int(data.get('EncounterCount', 0), password)
    BuffIconHUDVisible_val = data.get('BuffIconHUDVisible', 0)
    MinigameTBGItemExcel.Start(builder)
    MinigameTBGItemExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGItemExcel.AddItemType(builder, ItemType_val)
    MinigameTBGItemExcel.AddTBGItemEffectType(builder, TBGItemEffectType_val)
    MinigameTBGItemExcel.AddItemParameter(builder, ItemParameter_val)
    MinigameTBGItemExcel.AddLocalizeETCId(builder, LocalizeETCId_off)
    MinigameTBGItemExcel.AddIcon(builder, Icon_off)
    MinigameTBGItemExcel.AddBuffIcon(builder, BuffIcon_off)
    MinigameTBGItemExcel.AddEncounterCount(builder, EncounterCount_val)
    MinigameTBGItemExcel.AddDiceEffectAniClip(builder, DiceEffectAniClip_off)
    MinigameTBGItemExcel.AddBuffIconHUDVisible(builder, BuffIconHUDVisible_val)
    return MinigameTBGItemExcel.End(builder)

def pack_MinigameTBGObjectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGObject") if encrypt else None
    Key_off = builder.CreateString(encrypt_string(data.get('Key', ''), password))
    PrefabName_off = builder.CreateString(encrypt_string(data.get('PrefabName', ''), password))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ObjectType_val = convert_int(getattr(TBGObjectType, data.get('ObjectType', 0)), password)
    ObjectCostType_val = convert_int(getattr(ParcelType, data.get('ObjectCostType', 0)), password)
    ObjectCostId_val = convert_long(data.get('ObjectCostId', 0), password)
    ObjectCostAmount_val = convert_int(data.get('ObjectCostAmount', 0), password)
    Disposable_val = data.get('Disposable', 0)
    ReEncounterCost_val = data.get('ReEncounterCost', 0)
    MinigameTBGObjectExcel.Start(builder)
    MinigameTBGObjectExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGObjectExcel.AddKey(builder, Key_off)
    MinigameTBGObjectExcel.AddPrefabName(builder, PrefabName_off)
    MinigameTBGObjectExcel.AddObjectType(builder, ObjectType_val)
    MinigameTBGObjectExcel.AddObjectCostType(builder, ObjectCostType_val)
    MinigameTBGObjectExcel.AddObjectCostId(builder, ObjectCostId_val)
    MinigameTBGObjectExcel.AddObjectCostAmount(builder, ObjectCostAmount_val)
    MinigameTBGObjectExcel.AddDisposable(builder, Disposable_val)
    MinigameTBGObjectExcel.AddReEncounterCost(builder, ReEncounterCost_val)
    return MinigameTBGObjectExcel.End(builder)

def pack_MinigameTBGSeasonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGSeason") if encrypt else None
    EchelonSlot1Portrait_off = builder.CreateString(encrypt_string(data.get('EchelonSlot1Portrait', ''), password))
    EchelonSlot2Portrait_off = builder.CreateString(encrypt_string(data.get('EchelonSlot2Portrait', ''), password))
    EchelonSlot3Portrait_off = builder.CreateString(encrypt_string(data.get('EchelonSlot3Portrait', ''), password))
    EchelonSlot4Portrait_off = builder.CreateString(encrypt_string(data.get('EchelonSlot4Portrait', ''), password))
    MapImagePath_off = builder.CreateString(encrypt_string(data.get('MapImagePath', ''), password))
    MapNameLocalize_off = builder.CreateString(encrypt_string(data.get('MapNameLocalize', ''), password))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ItemSlot_val = convert_int(data.get('ItemSlot', 0), password)
    DefaultEchelonHp_val = convert_int(data.get('DefaultEchelonHp', 0), password)
    DefaultItemDiceId_val = convert_long(data.get('DefaultItemDiceId', 0), password)
    EchelonSlot1CharacterId_val = convert_long(data.get('EchelonSlot1CharacterId', 0), password)
    EchelonSlot2CharacterId_val = convert_long(data.get('EchelonSlot2CharacterId', 0), password)
    EchelonSlot3CharacterId_val = convert_long(data.get('EchelonSlot3CharacterId', 0), password)
    EchelonSlot4CharacterId_val = convert_long(data.get('EchelonSlot4CharacterId', 0), password)
    EventUseCostType_val = convert_int(getattr(ParcelType, data.get('EventUseCostType', 0)), password)
    EventUseCostId_val = convert_long(data.get('EventUseCostId', 0), password)
    EchelonRevivalCostType_val = convert_int(getattr(ParcelType, data.get('EchelonRevivalCostType', 0)), password)
    EchelonRevivalCostId_val = convert_long(data.get('EchelonRevivalCostId', 0), password)
    EchelonRevivalCostAmount_val = convert_int(data.get('EchelonRevivalCostAmount', 0), password)
    EnemyBossHP_val = convert_int(data.get('EnemyBossHP', 0), password)
    EnemyMinionHP_val = convert_int(data.get('EnemyMinionHP', 0), password)
    AttackDamage_val = convert_int(data.get('AttackDamage', 0), password)
    CriticalAttackDamage_val = convert_int(data.get('CriticalAttackDamage', 0), password)
    RoundItemSelectLimit_val = convert_int(data.get('RoundItemSelectLimit', 0), password)
    InstantClearRound_val = convert_int(data.get('InstantClearRound', 0), password)
    MaxHp_val = convert_int(data.get('MaxHp', 0), password)
    StartThemaIndex_val = convert_int(data.get('StartThemaIndex', 0), password)
    LoopThemaIndex_val = convert_int(data.get('LoopThemaIndex', 0), password)
    MaxDicePlus_val = convert_int(data.get('MaxDicePlus', 0), password)
    MinigameTBGSeasonExcel.Start(builder)
    MinigameTBGSeasonExcel.AddEventContentId(builder, EventContentId_val)
    MinigameTBGSeasonExcel.AddItemSlot(builder, ItemSlot_val)
    MinigameTBGSeasonExcel.AddDefaultEchelonHp(builder, DefaultEchelonHp_val)
    MinigameTBGSeasonExcel.AddDefaultItemDiceId(builder, DefaultItemDiceId_val)
    MinigameTBGSeasonExcel.AddEchelonSlot1CharacterId(builder, EchelonSlot1CharacterId_val)
    MinigameTBGSeasonExcel.AddEchelonSlot2CharacterId(builder, EchelonSlot2CharacterId_val)
    MinigameTBGSeasonExcel.AddEchelonSlot3CharacterId(builder, EchelonSlot3CharacterId_val)
    MinigameTBGSeasonExcel.AddEchelonSlot4CharacterId(builder, EchelonSlot4CharacterId_val)
    MinigameTBGSeasonExcel.AddEchelonSlot1Portrait(builder, EchelonSlot1Portrait_off)
    MinigameTBGSeasonExcel.AddEchelonSlot2Portrait(builder, EchelonSlot2Portrait_off)
    MinigameTBGSeasonExcel.AddEchelonSlot3Portrait(builder, EchelonSlot3Portrait_off)
    MinigameTBGSeasonExcel.AddEchelonSlot4Portrait(builder, EchelonSlot4Portrait_off)
    MinigameTBGSeasonExcel.AddEventUseCostType(builder, EventUseCostType_val)
    MinigameTBGSeasonExcel.AddEventUseCostId(builder, EventUseCostId_val)
    MinigameTBGSeasonExcel.AddEchelonRevivalCostType(builder, EchelonRevivalCostType_val)
    MinigameTBGSeasonExcel.AddEchelonRevivalCostId(builder, EchelonRevivalCostId_val)
    MinigameTBGSeasonExcel.AddEchelonRevivalCostAmount(builder, EchelonRevivalCostAmount_val)
    MinigameTBGSeasonExcel.AddEnemyBossHP(builder, EnemyBossHP_val)
    MinigameTBGSeasonExcel.AddEnemyMinionHP(builder, EnemyMinionHP_val)
    MinigameTBGSeasonExcel.AddAttackDamage(builder, AttackDamage_val)
    MinigameTBGSeasonExcel.AddCriticalAttackDamage(builder, CriticalAttackDamage_val)
    MinigameTBGSeasonExcel.AddRoundItemSelectLimit(builder, RoundItemSelectLimit_val)
    MinigameTBGSeasonExcel.AddInstantClearRound(builder, InstantClearRound_val)
    MinigameTBGSeasonExcel.AddMaxHp(builder, MaxHp_val)
    MinigameTBGSeasonExcel.AddMapImagePath(builder, MapImagePath_off)
    MinigameTBGSeasonExcel.AddMapNameLocalize(builder, MapNameLocalize_off)
    MinigameTBGSeasonExcel.AddStartThemaIndex(builder, StartThemaIndex_val)
    MinigameTBGSeasonExcel.AddLoopThemaIndex(builder, LoopThemaIndex_val)
    MinigameTBGSeasonExcel.AddMaxDicePlus(builder, MaxDicePlus_val)
    return MinigameTBGSeasonExcel.End(builder)

def pack_MinigameTBGThemaExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGThema") if encrypt else None
    ThemaMap_off = builder.CreateString(encrypt_string(data.get('ThemaMap', ''), password))
    ThemaMapBG_off = builder.CreateString(encrypt_string(data.get('ThemaMapBG', ''), password))
    ThemaNameLocalize_off = builder.CreateString(encrypt_string(data.get('ThemaNameLocalize', ''), password))
    ThemaLoadingImage_off = builder.CreateString(encrypt_string(data.get('ThemaLoadingImage', ''), password))
    ThemaPlayerPrefab_off = builder.CreateString(encrypt_string(data.get('ThemaPlayerPrefab', ''), password))
    ThemaGoalLocalize_off = builder.CreateString(encrypt_string(data.get('ThemaGoalLocalize', ''), password))
    PortalCondition_vec = 0
    if 'PortalCondition' in data:
        PortalCondition_items = data['PortalCondition']
        MinigameTBGThemaExcel.StartPortalConditionVector(builder, len(PortalCondition_items))
        for item in reversed(PortalCondition_items):
            builder.PrependInt32(convert_int(getattr(TBGPortalCondition, item), password))
        PortalCondition_vec = builder.EndVector(len(PortalCondition_items))
    PortalConditionParameter_vec = 0
    if 'PortalConditionParameter' in data:
        PortalConditionParameter_items = data['PortalConditionParameter']
        PortalConditionParameter_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PortalConditionParameter_items]
        MinigameTBGThemaExcel.StartPortalConditionParameterVector(builder, len(PortalConditionParameter_str_offsets))
        for offset in reversed(PortalConditionParameter_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PortalConditionParameter_vec = builder.EndVector(len(PortalConditionParameter_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    ThemaIndex_val = convert_int(data.get('ThemaIndex', 0), password)
    ThemaType_val = convert_int(getattr(TBGThemaType, data.get('ThemaType', 0)), password)
    ThemaLeaderId_val = convert_long(data.get('ThemaLeaderId', 0), password)
    InstantClearCostAmount_val = convert_long(data.get('InstantClearCostAmount', 0), password)
    IsTutorial_val = data.get('IsTutorial', 0)
    MinigameTBGThemaExcel.Start(builder)
    MinigameTBGThemaExcel.AddEventContentId(builder, EventContentId_val)
    MinigameTBGThemaExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGThemaExcel.AddThemaIndex(builder, ThemaIndex_val)
    MinigameTBGThemaExcel.AddThemaType(builder, ThemaType_val)
    MinigameTBGThemaExcel.AddThemaMap(builder, ThemaMap_off)
    MinigameTBGThemaExcel.AddThemaMapBG(builder, ThemaMapBG_off)
    MinigameTBGThemaExcel.AddPortalCondition(builder, PortalCondition_vec)
    MinigameTBGThemaExcel.AddPortalConditionParameter(builder, PortalConditionParameter_vec)
    MinigameTBGThemaExcel.AddThemaNameLocalize(builder, ThemaNameLocalize_off)
    MinigameTBGThemaExcel.AddThemaLoadingImage(builder, ThemaLoadingImage_off)
    MinigameTBGThemaExcel.AddThemaPlayerPrefab(builder, ThemaPlayerPrefab_off)
    MinigameTBGThemaExcel.AddThemaLeaderId(builder, ThemaLeaderId_val)
    MinigameTBGThemaExcel.AddThemaGoalLocalize(builder, ThemaGoalLocalize_off)
    MinigameTBGThemaExcel.AddInstantClearCostAmount(builder, InstantClearCostAmount_val)
    MinigameTBGThemaExcel.AddIsTutorial(builder, IsTutorial_val)
    return MinigameTBGThemaExcel.End(builder)

def pack_MiniGameTBGThemaRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MiniGameTBGThemaReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        MiniGameTBGThemaRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        MiniGameTBGThemaRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        MiniGameTBGThemaRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt32(convert_int(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    ThemaRound_val = convert_int(data.get('ThemaRound', 0), password)
    ThemaUniqueId_val = convert_int(data.get('ThemaUniqueId', 0), password)
    IsLoop_val = data.get('IsLoop', 0)
    MiniGameTBGThemaRewardType_val = convert_int(getattr(MiniGameTBGThemaRewardType, data.get('MiniGameTBGThemaRewardType', 0)), password)
    MiniGameTBGThemaRewardExcel.Start(builder)
    MiniGameTBGThemaRewardExcel.AddEventContentId(builder, EventContentId_val)
    MiniGameTBGThemaRewardExcel.AddThemaRound(builder, ThemaRound_val)
    MiniGameTBGThemaRewardExcel.AddThemaUniqueId(builder, ThemaUniqueId_val)
    MiniGameTBGThemaRewardExcel.AddIsLoop(builder, IsLoop_val)
    MiniGameTBGThemaRewardExcel.AddMiniGameTBGThemaRewardType(builder, MiniGameTBGThemaRewardType_val)
    MiniGameTBGThemaRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    MiniGameTBGThemaRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    MiniGameTBGThemaRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return MiniGameTBGThemaRewardExcel.End(builder)

def pack_MinigameTBGVoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MinigameTBGVoice") if encrypt else None
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    VoiceCondition_val = convert_int(getattr(TBGVoiceCondition, data.get('VoiceCondition', 0)), password)
    VoiceId_val = convert_uint(data.get('VoiceId', 0), password)
    MinigameTBGVoiceExcel.Start(builder)
    MinigameTBGVoiceExcel.AddEventContentId(builder, EventContentId_val)
    MinigameTBGVoiceExcel.AddUniqueId(builder, UniqueId_val)
    MinigameTBGVoiceExcel.AddVoiceCondition(builder, VoiceCondition_val)
    MinigameTBGVoiceExcel.AddVoiceId(builder, VoiceId_val)
    return MinigameTBGVoiceExcel.End(builder)

def pack_MissionEmergencyCompleteExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MissionEmergencyComplete") if encrypt else None
    MissionId_val = convert_long(data.get('MissionId', 0), password)
    EmergencyComplete_val = data.get('EmergencyComplete', 0)
    MissionEmergencyCompleteExcel.Start(builder)
    MissionEmergencyCompleteExcel.AddMissionId(builder, MissionId_val)
    MissionEmergencyCompleteExcel.AddEmergencyComplete(builder, EmergencyComplete_val)
    return MissionEmergencyCompleteExcel.End(builder)

def pack_MissionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Mission") if encrypt else None
    ToastImagePath_off = builder.CreateString(encrypt_string(data.get('ToastImagePath', ''), password))
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    StartableEndDate_off = builder.CreateString(encrypt_string(data.get('StartableEndDate', ''), password))
    RewardIcon_off = builder.CreateString(encrypt_string(data.get('RewardIcon', ''), password))
    PreMissionId_vec = 0
    if 'PreMissionId' in data:
        PreMissionId_items = data['PreMissionId']
        MissionExcel.StartPreMissionIdVector(builder, len(PreMissionId_items))
        for item in reversed(PreMissionId_items):
            builder.PrependInt64(convert_long(item, password))
        PreMissionId_vec = builder.EndVector(len(PreMissionId_items))
    ContentTags_vec = 0
    if 'ContentTags' in data:
        ContentTags_items = data['ContentTags']
        MissionExcel.StartContentTagsVector(builder, len(ContentTags_items))
        for item in reversed(ContentTags_items):
            builder.PrependInt32(convert_int(getattr(SuddenMissionContentType, item), password))
        ContentTags_vec = builder.EndVector(len(ContentTags_items))
    ShortcutUI_vec = 0
    if 'ShortcutUI' in data:
        ShortcutUI_items = data['ShortcutUI']
        ShortcutUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUI_items]
        MissionExcel.StartShortcutUIVector(builder, len(ShortcutUI_str_offsets))
        for offset in reversed(ShortcutUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUI_vec = builder.EndVector(len(ShortcutUI_items))
    CompleteConditionParameter_vec = 0
    if 'CompleteConditionParameter' in data:
        CompleteConditionParameter_items = data['CompleteConditionParameter']
        MissionExcel.StartCompleteConditionParameterVector(builder, len(CompleteConditionParameter_items))
        for item in reversed(CompleteConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        CompleteConditionParameter_vec = builder.EndVector(len(CompleteConditionParameter_items))
    CompleteConditionParameterTag_vec = 0
    if 'CompleteConditionParameterTag' in data:
        CompleteConditionParameterTag_items = data['CompleteConditionParameterTag']
        MissionExcel.StartCompleteConditionParameterTagVector(builder, len(CompleteConditionParameterTag_items))
        for item in reversed(CompleteConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        CompleteConditionParameterTag_vec = builder.EndVector(len(CompleteConditionParameterTag_items))
    MissionRewardParcelType_vec = 0
    if 'MissionRewardParcelType' in data:
        MissionRewardParcelType_items = data['MissionRewardParcelType']
        MissionExcel.StartMissionRewardParcelTypeVector(builder, len(MissionRewardParcelType_items))
        for item in reversed(MissionRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        MissionRewardParcelType_vec = builder.EndVector(len(MissionRewardParcelType_items))
    MissionRewardParcelId_vec = 0
    if 'MissionRewardParcelId' in data:
        MissionRewardParcelId_items = data['MissionRewardParcelId']
        MissionExcel.StartMissionRewardParcelIdVector(builder, len(MissionRewardParcelId_items))
        for item in reversed(MissionRewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        MissionRewardParcelId_vec = builder.EndVector(len(MissionRewardParcelId_items))
    MissionRewardAmount_vec = 0
    if 'MissionRewardAmount' in data:
        MissionRewardAmount_items = data['MissionRewardAmount']
        MissionExcel.StartMissionRewardAmountVector(builder, len(MissionRewardAmount_items))
        for item in reversed(MissionRewardAmount_items):
            builder.PrependInt32(convert_int(item, password))
        MissionRewardAmount_vec = builder.EndVector(len(MissionRewardAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    Category_val = convert_int(getattr(MissionCategory, data.get('Category', 0)), password)
    Description_val = convert_uint(data.get('Description', 0), password)
    ResetType_val = convert_int(getattr(MissionResetType, data.get('ResetType', 0)), password)
    ToastDisplayType_val = convert_int(getattr(MissionToastDisplayConditionType, data.get('ToastDisplayType', 0)), password)
    ViewFlag_val = data.get('ViewFlag', 0)
    Limit_val = data.get('Limit', 0)
    EndDay_val = convert_long(data.get('EndDay', 0), password)
    DateAutoRefer_val = convert_int(getattr(ContentType, data.get('DateAutoRefer', 0)), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    AccountType_val = convert_int(getattr(AccountState, data.get('AccountType', 0)), password)
    AccountLevel_val = convert_long(data.get('AccountLevel', 0), password)
    ChallengeStageShortcut_val = convert_long(data.get('ChallengeStageShortcut', 0), password)
    CompleteConditionType_val = convert_int(getattr(MissionCompleteConditionType, data.get('CompleteConditionType', 0)), password)
    CompleteConditionCount_val = convert_long(data.get('CompleteConditionCount', 0), password)
    MissionExcel.Start(builder)
    MissionExcel.AddId(builder, Id_val)
    MissionExcel.AddCategory(builder, Category_val)
    MissionExcel.AddDescription(builder, Description_val)
    MissionExcel.AddResetType(builder, ResetType_val)
    MissionExcel.AddToastDisplayType(builder, ToastDisplayType_val)
    MissionExcel.AddToastImagePath(builder, ToastImagePath_off)
    MissionExcel.AddViewFlag(builder, ViewFlag_val)
    MissionExcel.AddLimit(builder, Limit_val)
    MissionExcel.AddStartDate(builder, StartDate_off)
    MissionExcel.AddEndDate(builder, EndDate_off)
    MissionExcel.AddEndDay(builder, EndDay_val)
    MissionExcel.AddStartableEndDate(builder, StartableEndDate_off)
    MissionExcel.AddDateAutoRefer(builder, DateAutoRefer_val)
    MissionExcel.AddDisplayOrder(builder, DisplayOrder_val)
    MissionExcel.AddPreMissionId(builder, PreMissionId_vec)
    MissionExcel.AddAccountType(builder, AccountType_val)
    MissionExcel.AddAccountLevel(builder, AccountLevel_val)
    MissionExcel.AddContentTags(builder, ContentTags_vec)
    MissionExcel.AddShortcutUI(builder, ShortcutUI_vec)
    MissionExcel.AddChallengeStageShortcut(builder, ChallengeStageShortcut_val)
    MissionExcel.AddCompleteConditionType(builder, CompleteConditionType_val)
    MissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount_val)
    MissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameter_vec)
    MissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTag_vec)
    MissionExcel.AddRewardIcon(builder, RewardIcon_off)
    MissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelType_vec)
    MissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelId_vec)
    MissionExcel.AddMissionRewardAmount(builder, MissionRewardAmount_vec)
    return MissionExcel.End(builder)

def pack_MultiFloorRaidRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MultiFloorRaidReward") if encrypt else None
    RewardGroupId_val = convert_long(data.get('RewardGroupId', 0), password)
    ClearStageRewardProb_val = convert_long(data.get('ClearStageRewardProb', 0), password)
    ClearStageRewardParcelType_val = convert_int(getattr(ParcelType, data.get('ClearStageRewardParcelType', 0)), password)
    ClearStageRewardParcelUniqueID_val = convert_long(data.get('ClearStageRewardParcelUniqueID', 0), password)
    ClearStageRewardAmount_val = convert_long(data.get('ClearStageRewardAmount', 0), password)
    MultiFloorRaidRewardExcel.Start(builder)
    MultiFloorRaidRewardExcel.AddRewardGroupId(builder, RewardGroupId_val)
    MultiFloorRaidRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb_val)
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType_val)
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID_val)
    MultiFloorRaidRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount_val)
    return MultiFloorRaidRewardExcel.End(builder)

def pack_MultiFloorRaidSeasonManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MultiFloorRaidSeasonManage") if encrypt else None
    SeasonStartDate_off = builder.CreateString(encrypt_string(data.get('SeasonStartDate', ''), password))
    EndNoteLabelStartDate_off = builder.CreateString(encrypt_string(data.get('EndNoteLabelStartDate', ''), password))
    SeasonEndDate_off = builder.CreateString(encrypt_string(data.get('SeasonEndDate', ''), password))
    SettlementEndDate_off = builder.CreateString(encrypt_string(data.get('SettlementEndDate', ''), password))
    OpenRaidBossGroupId_off = builder.CreateString(encrypt_string(data.get('OpenRaidBossGroupId', ''), password))
    LobbyImgPath_off = builder.CreateString(encrypt_string(data.get('LobbyImgPath', ''), password))
    LevelImgPath_off = builder.CreateString(encrypt_string(data.get('LevelImgPath', ''), password))
    PlayTip_off = builder.CreateString(encrypt_string(data.get('PlayTip', ''), password))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    LobbyEnterScenario_val = convert_uint(data.get('LobbyEnterScenario', 0), password)
    ShowLobbyBanner_val = data.get('ShowLobbyBanner', 0)
    EnterScenarioKey_val = convert_uint(data.get('EnterScenarioKey', 0), password)
    MultiFloorRaidSeasonManageExcel.Start(builder)
    MultiFloorRaidSeasonManageExcel.AddSeasonId(builder, SeasonId_val)
    MultiFloorRaidSeasonManageExcel.AddLobbyEnterScenario(builder, LobbyEnterScenario_val)
    MultiFloorRaidSeasonManageExcel.AddShowLobbyBanner(builder, ShowLobbyBanner_val)
    MultiFloorRaidSeasonManageExcel.AddSeasonStartDate(builder, SeasonStartDate_off)
    MultiFloorRaidSeasonManageExcel.AddEndNoteLabelStartDate(builder, EndNoteLabelStartDate_off)
    MultiFloorRaidSeasonManageExcel.AddSeasonEndDate(builder, SeasonEndDate_off)
    MultiFloorRaidSeasonManageExcel.AddSettlementEndDate(builder, SettlementEndDate_off)
    MultiFloorRaidSeasonManageExcel.AddOpenRaidBossGroupId(builder, OpenRaidBossGroupId_off)
    MultiFloorRaidSeasonManageExcel.AddEnterScenarioKey(builder, EnterScenarioKey_val)
    MultiFloorRaidSeasonManageExcel.AddLobbyImgPath(builder, LobbyImgPath_off)
    MultiFloorRaidSeasonManageExcel.AddLevelImgPath(builder, LevelImgPath_off)
    MultiFloorRaidSeasonManageExcel.AddPlayTip(builder, PlayTip_off)
    return MultiFloorRaidSeasonManageExcel.End(builder)

def pack_MultiFloorRaidStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MultiFloorRaidStage") if encrypt else None
    BossGroupId_off = builder.CreateString(encrypt_string(data.get('BossGroupId', ''), password))
    FloorListImgPath_off = builder.CreateString(encrypt_string(data.get('FloorListImgPath', ''), password))
    FloorImgPath_off = builder.CreateString(encrypt_string(data.get('FloorImgPath', ''), password))
    VictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('VictoryTimelinePath', ''), password))
    BossCharacterId_vec = 0
    if 'BossCharacterId' in data:
        BossCharacterId_items = data['BossCharacterId']
        MultiFloorRaidStageExcel.StartBossCharacterIdVector(builder, len(BossCharacterId_items))
        for item in reversed(BossCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        BossCharacterId_vec = builder.EndVector(len(BossCharacterId_items))
    StatChangeId_vec = 0
    if 'StatChangeId' in data:
        StatChangeId_items = data['StatChangeId']
        MultiFloorRaidStageExcel.StartStatChangeIdVector(builder, len(StatChangeId_items))
        for item in reversed(StatChangeId_items):
            builder.PrependInt64(convert_long(item, password))
        StatChangeId_vec = builder.EndVector(len(StatChangeId_items))
    BattleReadyTimelinePath_vec = 0
    if 'BattleReadyTimelinePath' in data:
        BattleReadyTimelinePath_items = data['BattleReadyTimelinePath']
        BattleReadyTimelinePath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in BattleReadyTimelinePath_items]
        MultiFloorRaidStageExcel.StartBattleReadyTimelinePathVector(builder, len(BattleReadyTimelinePath_str_offsets))
        for offset in reversed(BattleReadyTimelinePath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        BattleReadyTimelinePath_vec = builder.EndVector(len(BattleReadyTimelinePath_items))
    BattleReadyTimelinePhaseStart_vec = 0
    if 'BattleReadyTimelinePhaseStart' in data:
        BattleReadyTimelinePhaseStart_items = data['BattleReadyTimelinePhaseStart']
        MultiFloorRaidStageExcel.StartBattleReadyTimelinePhaseStartVector(builder, len(BattleReadyTimelinePhaseStart_items))
        for item in reversed(BattleReadyTimelinePhaseStart_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseStart_vec = builder.EndVector(len(BattleReadyTimelinePhaseStart_items))
    BattleReadyTimelinePhaseEnd_vec = 0
    if 'BattleReadyTimelinePhaseEnd' in data:
        BattleReadyTimelinePhaseEnd_items = data['BattleReadyTimelinePhaseEnd']
        MultiFloorRaidStageExcel.StartBattleReadyTimelinePhaseEndVector(builder, len(BattleReadyTimelinePhaseEnd_items))
        for item in reversed(BattleReadyTimelinePhaseEnd_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseEnd_vec = builder.EndVector(len(BattleReadyTimelinePhaseEnd_items))
    Id_val = convert_long(data.get('Id', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    AssistSlot_val = convert_int(data.get('AssistSlot', 0), password)
    StageOpenCondition_val = convert_long(data.get('StageOpenCondition', 0), password)
    FloorListSection_val = data.get('FloorListSection', 0)
    FloorListSectionOpenCondition_val = convert_long(data.get('FloorListSectionOpenCondition', 0), password)
    FloorListSectionLabel_val = convert_uint(data.get('FloorListSectionLabel', 0), password)
    Difficulty_val = convert_int(data.get('Difficulty', 0), password)
    UseBossIndex_val = data.get('UseBossIndex', 0)
    UseBossAIPhaseSync_val = data.get('UseBossAIPhaseSync', 0)
    RaidCharacterId_val = convert_long(data.get('RaidCharacterId', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    RecommendLevel_val = convert_long(data.get('RecommendLevel', 0), password)
    RewardGroupId_val = convert_long(data.get('RewardGroupId', 0), password)
    ShowSkillCard_val = data.get('ShowSkillCard', 0)
    MultiFloorRaidStageExcel.Start(builder)
    MultiFloorRaidStageExcel.AddId(builder, Id_val)
    MultiFloorRaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    MultiFloorRaidStageExcel.AddBossGroupId(builder, BossGroupId_off)
    MultiFloorRaidStageExcel.AddAssistSlot(builder, AssistSlot_val)
    MultiFloorRaidStageExcel.AddStageOpenCondition(builder, StageOpenCondition_val)
    MultiFloorRaidStageExcel.AddFloorListSection(builder, FloorListSection_val)
    MultiFloorRaidStageExcel.AddFloorListSectionOpenCondition(builder, FloorListSectionOpenCondition_val)
    MultiFloorRaidStageExcel.AddFloorListSectionLabel(builder, FloorListSectionLabel_val)
    MultiFloorRaidStageExcel.AddDifficulty(builder, Difficulty_val)
    MultiFloorRaidStageExcel.AddUseBossIndex(builder, UseBossIndex_val)
    MultiFloorRaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync_val)
    MultiFloorRaidStageExcel.AddFloorListImgPath(builder, FloorListImgPath_off)
    MultiFloorRaidStageExcel.AddFloorImgPath(builder, FloorImgPath_off)
    MultiFloorRaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId_val)
    MultiFloorRaidStageExcel.AddBossCharacterId(builder, BossCharacterId_vec)
    MultiFloorRaidStageExcel.AddStatChangeId(builder, StatChangeId_vec)
    MultiFloorRaidStageExcel.AddBattleDuration(builder, BattleDuration_val)
    MultiFloorRaidStageExcel.AddGroundId(builder, GroundId_val)
    MultiFloorRaidStageExcel.AddRecommendLevel(builder, RecommendLevel_val)
    MultiFloorRaidStageExcel.AddRewardGroupId(builder, RewardGroupId_val)
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePath_vec)
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStart_vec)
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEnd_vec)
    MultiFloorRaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePath_off)
    MultiFloorRaidStageExcel.AddShowSkillCard(builder, ShowSkillCard_val)
    return MultiFloorRaidStageExcel.End(builder)

def pack_MultiFloorRaidStatChangeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("MultiFloorRaidStatChange") if encrypt else None
    StatType_vec = 0
    if 'StatType' in data:
        StatType_items = data['StatType']
        MultiFloorRaidStatChangeExcel.StartStatTypeVector(builder, len(StatType_items))
        for item in reversed(StatType_items):
            builder.PrependInt32(convert_int(getattr(StatType, item), password))
        StatType_vec = builder.EndVector(len(StatType_items))
    StatAdd_vec = 0
    if 'StatAdd' in data:
        StatAdd_items = data['StatAdd']
        MultiFloorRaidStatChangeExcel.StartStatAddVector(builder, len(StatAdd_items))
        for item in reversed(StatAdd_items):
            builder.PrependInt64(convert_long(item, password))
        StatAdd_vec = builder.EndVector(len(StatAdd_items))
    StatMultiply_vec = 0
    if 'StatMultiply' in data:
        StatMultiply_items = data['StatMultiply']
        MultiFloorRaidStatChangeExcel.StartStatMultiplyVector(builder, len(StatMultiply_items))
        for item in reversed(StatMultiply_items):
            builder.PrependInt64(convert_long(item, password))
        StatMultiply_vec = builder.EndVector(len(StatMultiply_items))
    ApplyCharacterId_vec = 0
    if 'ApplyCharacterId' in data:
        ApplyCharacterId_items = data['ApplyCharacterId']
        MultiFloorRaidStatChangeExcel.StartApplyCharacterIdVector(builder, len(ApplyCharacterId_items))
        for item in reversed(ApplyCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        ApplyCharacterId_vec = builder.EndVector(len(ApplyCharacterId_items))
    StatChangeId_val = convert_long(data.get('StatChangeId', 0), password)
    MultiFloorRaidStatChangeExcel.Start(builder)
    MultiFloorRaidStatChangeExcel.AddStatChangeId(builder, StatChangeId_val)
    MultiFloorRaidStatChangeExcel.AddStatType(builder, StatType_vec)
    MultiFloorRaidStatChangeExcel.AddStatAdd(builder, StatAdd_vec)
    MultiFloorRaidStatChangeExcel.AddStatMultiply(builder, StatMultiply_vec)
    MultiFloorRaidStatChangeExcel.AddApplyCharacterId(builder, ApplyCharacterId_vec)
    return MultiFloorRaidStatChangeExcel.End(builder)

def pack_ObstacleFireLineCheckExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ObstacleFireLineCheck") if encrypt else None
    MyObstacleFireLineCheck_val = data.get('MyObstacleFireLineCheck', 0)
    AllyObstacleFireLineCheck_val = data.get('AllyObstacleFireLineCheck', 0)
    EnemyObstacleFireLineCheck_val = data.get('EnemyObstacleFireLineCheck', 0)
    EmptyObstacleFireLineCheck_val = data.get('EmptyObstacleFireLineCheck', 0)
    ObstacleFireLineCheckExcel.Start(builder)
    ObstacleFireLineCheckExcel.AddMyObstacleFireLineCheck(builder, MyObstacleFireLineCheck_val)
    ObstacleFireLineCheckExcel.AddAllyObstacleFireLineCheck(builder, AllyObstacleFireLineCheck_val)
    ObstacleFireLineCheckExcel.AddEnemyObstacleFireLineCheck(builder, EnemyObstacleFireLineCheck_val)
    ObstacleFireLineCheckExcel.AddEmptyObstacleFireLineCheck(builder, EmptyObstacleFireLineCheck_val)
    return ObstacleFireLineCheckExcel.End(builder)

def pack_ObstacleStatExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ObstacleStat") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    StringID_val = convert_uint(data.get('StringID', 0), password)
    MaxHP1_val = convert_long(data.get('MaxHP1', 0), password)
    MaxHP100_val = convert_long(data.get('MaxHP100', 0), password)
    BlockRate_val = convert_long(data.get('BlockRate', 0), password)
    Dodge_val = convert_long(data.get('Dodge', 0), password)
    CanNotStandRange_val = convert_long(data.get('CanNotStandRange', 0), password)
    HighlightFloaterHeight_val = encrypt_float(data.get('HighlightFloaterHeight', 0), password)
    EnhanceLightArmorRate_val = convert_long(data.get('EnhanceLightArmorRate', 0), password)
    EnhanceHeavyArmorRate_val = convert_long(data.get('EnhanceHeavyArmorRate', 0), password)
    EnhanceUnarmedRate_val = convert_long(data.get('EnhanceUnarmedRate', 0), password)
    EnhanceElasticArmorRate_val = convert_long(data.get('EnhanceElasticArmorRate', 0), password)
    EnhanceStructureRate_val = convert_long(data.get('EnhanceStructureRate', 0), password)
    EnhanceNormalArmorRate_val = convert_long(data.get('EnhanceNormalArmorRate', 0), password)
    ReduceExDamagedRate_val = convert_long(data.get('ReduceExDamagedRate', 0), password)
    ObstacleStatExcel.Start(builder)
    ObstacleStatExcel.AddStringID(builder, StringID_val)
    ObstacleStatExcel.AddName(builder, Name_off)
    ObstacleStatExcel.AddMaxHP1(builder, MaxHP1_val)
    ObstacleStatExcel.AddMaxHP100(builder, MaxHP100_val)
    ObstacleStatExcel.AddBlockRate(builder, BlockRate_val)
    ObstacleStatExcel.AddDodge(builder, Dodge_val)
    ObstacleStatExcel.AddCanNotStandRange(builder, CanNotStandRange_val)
    ObstacleStatExcel.AddHighlightFloaterHeight(builder, HighlightFloaterHeight_val)
    ObstacleStatExcel.AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate_val)
    ObstacleStatExcel.AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate_val)
    ObstacleStatExcel.AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate_val)
    ObstacleStatExcel.AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate_val)
    ObstacleStatExcel.AddEnhanceStructureRate(builder, EnhanceStructureRate_val)
    ObstacleStatExcel.AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate_val)
    ObstacleStatExcel.AddReduceExDamagedRate(builder, ReduceExDamagedRate_val)
    return ObstacleStatExcel.End(builder)

def pack_OpenConditionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("OpenCondition") if encrypt else None
    Scene_off = builder.CreateString(encrypt_string(data.get('Scene', ''), password))
    ContentsOpenShortcutUI_off = builder.CreateString(encrypt_string(data.get('ContentsOpenShortcutUI', ''), password))
    LockUI_vec = 0
    if 'LockUI' in data:
        LockUI_items = data['LockUI']
        LockUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in LockUI_items]
        OpenConditionExcel.StartLockUIVector(builder, len(LockUI_str_offsets))
        for offset in reversed(LockUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        LockUI_vec = builder.EndVector(len(LockUI_items))
    ShortcutUIName_vec = 0
    if 'ShortcutUIName' in data:
        ShortcutUIName_items = data['ShortcutUIName']
        ShortcutUIName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in ShortcutUIName_items]
        OpenConditionExcel.StartShortcutUINameVector(builder, len(ShortcutUIName_str_offsets))
        for offset in reversed(ShortcutUIName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        ShortcutUIName_vec = builder.EndVector(len(ShortcutUIName_items))
    OpenConditionContentType_val = convert_int(getattr(OpenConditionContent, data.get('OpenConditionContentType', 0)), password)
    ShortcutPopupPriority_val = convert_long(data.get('ShortcutPopupPriority', 0), password)
    ShortcutParam_val = convert_int(data.get('ShortcutParam', 0), password)
    HideWhenLocked_val = data.get('HideWhenLocked', 0)
    AccountLevel_val = convert_long(data.get('AccountLevel', 0), password)
    ScenarioModeId_val = convert_long(data.get('ScenarioModeId', 0), password)
    CampaignStageId_val = convert_long(data.get('CampaignStageId', 0), password)
    MultipleConditionCheckType_val = convert_int(getattr(MultipleConditionCheckType, data.get('MultipleConditionCheckType', 0)), password)
    OpenDayOfWeek_val = convert_int(getattr(WeekDay, data.get('OpenDayOfWeek', 0)), password)
    OpenHour_val = convert_long(data.get('OpenHour', 0), password)
    CloseDayOfWeek_val = convert_int(getattr(WeekDay, data.get('CloseDayOfWeek', 0)), password)
    CloseHour_val = convert_long(data.get('CloseHour', 0), password)
    OpenedCafeId_val = convert_long(data.get('OpenedCafeId', 0), password)
    CafeIdforCafeRank_val = convert_long(data.get('CafeIdforCafeRank', 0), password)
    CafeRank_val = convert_long(data.get('CafeRank', 0), password)
    ContentsOpenShow_val = data.get('ContentsOpenShow', 0)
    OpenConditionExcel.Start(builder)
    OpenConditionExcel.AddOpenConditionContentType(builder, OpenConditionContentType_val)
    OpenConditionExcel.AddLockUI(builder, LockUI_vec)
    OpenConditionExcel.AddShortcutPopupPriority(builder, ShortcutPopupPriority_val)
    OpenConditionExcel.AddShortcutUIName(builder, ShortcutUIName_vec)
    OpenConditionExcel.AddShortcutParam(builder, ShortcutParam_val)
    OpenConditionExcel.AddScene(builder, Scene_off)
    OpenConditionExcel.AddHideWhenLocked(builder, HideWhenLocked_val)
    OpenConditionExcel.AddAccountLevel(builder, AccountLevel_val)
    OpenConditionExcel.AddScenarioModeId(builder, ScenarioModeId_val)
    OpenConditionExcel.AddCampaignStageId(builder, CampaignStageId_val)
    OpenConditionExcel.AddMultipleConditionCheckType(builder, MultipleConditionCheckType_val)
    OpenConditionExcel.AddOpenDayOfWeek(builder, OpenDayOfWeek_val)
    OpenConditionExcel.AddOpenHour(builder, OpenHour_val)
    OpenConditionExcel.AddCloseDayOfWeek(builder, CloseDayOfWeek_val)
    OpenConditionExcel.AddCloseHour(builder, CloseHour_val)
    OpenConditionExcel.AddOpenedCafeId(builder, OpenedCafeId_val)
    OpenConditionExcel.AddCafeIdforCafeRank(builder, CafeIdforCafeRank_val)
    OpenConditionExcel.AddCafeRank(builder, CafeRank_val)
    OpenConditionExcel.AddContentsOpenShow(builder, ContentsOpenShow_val)
    OpenConditionExcel.AddContentsOpenShortcutUI(builder, ContentsOpenShortcutUI_off)
    return OpenConditionExcel.End(builder)

def pack_OperatorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Operator") if encrypt else None
    GroupId_off = builder.CreateString(encrypt_string(data.get('GroupId', ''), password))
    PortraitPath_off = builder.CreateString(encrypt_string(data.get('PortraitPath', ''), password))
    TextLocalizeKey_off = builder.CreateString(encrypt_string(data.get('TextLocalizeKey', ''), password))
    VoiceId_vec = 0
    if 'VoiceId' in data:
        VoiceId_items = data['VoiceId']
        OperatorExcel.StartVoiceIdVector(builder, len(VoiceId_items))
        for item in reversed(VoiceId_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceId_vec = builder.EndVector(len(VoiceId_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    OperatorCondition_val = convert_int(getattr(OperatorCondition, data.get('OperatorCondition', 0)), password)
    OutputSequence_val = convert_int(data.get('OutputSequence', 0), password)
    RandomWeight_val = convert_int(data.get('RandomWeight', 0), password)
    OutputDelay_val = convert_int(data.get('OutputDelay', 0), password)
    Duration_val = convert_int(data.get('Duration', 0), password)
    OperatorOutputPriority_val = convert_int(data.get('OperatorOutputPriority', 0), password)
    OperatorWaitQueue_val = data.get('OperatorWaitQueue', 0)
    OperatorExcel.Start(builder)
    OperatorExcel.AddUniqueId(builder, UniqueId_val)
    OperatorExcel.AddGroupId(builder, GroupId_off)
    OperatorExcel.AddOperatorCondition(builder, OperatorCondition_val)
    OperatorExcel.AddOutputSequence(builder, OutputSequence_val)
    OperatorExcel.AddRandomWeight(builder, RandomWeight_val)
    OperatorExcel.AddOutputDelay(builder, OutputDelay_val)
    OperatorExcel.AddDuration(builder, Duration_val)
    OperatorExcel.AddOperatorOutputPriority(builder, OperatorOutputPriority_val)
    OperatorExcel.AddPortraitPath(builder, PortraitPath_off)
    OperatorExcel.AddTextLocalizeKey(builder, TextLocalizeKey_off)
    OperatorExcel.AddVoiceId(builder, VoiceId_vec)
    OperatorExcel.AddOperatorWaitQueue(builder, OperatorWaitQueue_val)
    return OperatorExcel.End(builder)

def pack_ParcelAutoSynthExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ParcelAutoSynth") if encrypt else None
    RequireParcelType_val = convert_int(getattr(ParcelType, data.get('RequireParcelType', 0)), password)
    RequireParcelId_val = convert_long(data.get('RequireParcelId', 0), password)
    RequireParcelAmount_val = convert_long(data.get('RequireParcelAmount', 0), password)
    SynthStartAmount_val = convert_long(data.get('SynthStartAmount', 0), password)
    SynthEndAmount_val = convert_long(data.get('SynthEndAmount', 0), password)
    SynthMaxItem_val = data.get('SynthMaxItem', 0)
    ResultParcelType_val = convert_int(getattr(ParcelType, data.get('ResultParcelType', 0)), password)
    ResultParcelId_val = convert_long(data.get('ResultParcelId', 0), password)
    ResultParcelAmount_val = convert_long(data.get('ResultParcelAmount', 0), password)
    ParcelAutoSynthExcel.Start(builder)
    ParcelAutoSynthExcel.AddRequireParcelType(builder, RequireParcelType_val)
    ParcelAutoSynthExcel.AddRequireParcelId(builder, RequireParcelId_val)
    ParcelAutoSynthExcel.AddRequireParcelAmount(builder, RequireParcelAmount_val)
    ParcelAutoSynthExcel.AddSynthStartAmount(builder, SynthStartAmount_val)
    ParcelAutoSynthExcel.AddSynthEndAmount(builder, SynthEndAmount_val)
    ParcelAutoSynthExcel.AddSynthMaxItem(builder, SynthMaxItem_val)
    ParcelAutoSynthExcel.AddResultParcelType(builder, ResultParcelType_val)
    ParcelAutoSynthExcel.AddResultParcelId(builder, ResultParcelId_val)
    ParcelAutoSynthExcel.AddResultParcelAmount(builder, ResultParcelAmount_val)
    return ParcelAutoSynthExcel.End(builder)

def pack_PersonalityExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Personality") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    PersonalityExcel.Start(builder)
    PersonalityExcel.AddId(builder, Id_val)
    PersonalityExcel.AddName(builder, Name_off)
    return PersonalityExcel.End(builder)

def pack_PickupDuplicateBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PickupDuplicateBonus") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    ShopCategoryType_val = convert_int(getattr(ShopCategoryType, data.get('ShopCategoryType', 0)), password)
    ShopId_val = convert_long(data.get('ShopId', 0), password)
    PickupCharacterId_val = convert_long(data.get('PickupCharacterId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    PickupDuplicateBonusExcel.Start(builder)
    PickupDuplicateBonusExcel.AddId(builder, Id_val)
    PickupDuplicateBonusExcel.AddShopCategoryType(builder, ShopCategoryType_val)
    PickupDuplicateBonusExcel.AddShopId(builder, ShopId_val)
    PickupDuplicateBonusExcel.AddPickupCharacterId(builder, PickupCharacterId_val)
    PickupDuplicateBonusExcel.AddRewardParcelType(builder, RewardParcelType_val)
    PickupDuplicateBonusExcel.AddRewardParcelId(builder, RewardParcelId_val)
    PickupDuplicateBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return PickupDuplicateBonusExcel.End(builder)

def pack_PickupFirstGetBonusExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PickupFirstGetBonus") if encrypt else None
    ShopRecruitId_val = convert_long(data.get('ShopRecruitId', 0), password)
    RecruitSellectionShopId_val = convert_long(data.get('RecruitSellectionShopId', 0), password)
    PickupCharacterId_val = convert_long(data.get('PickupCharacterId', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    PickupFirstGetBonusExcel.Start(builder)
    PickupFirstGetBonusExcel.AddShopRecruitId(builder, ShopRecruitId_val)
    PickupFirstGetBonusExcel.AddRecruitSellectionShopId(builder, RecruitSellectionShopId_val)
    PickupFirstGetBonusExcel.AddPickupCharacterId(builder, PickupCharacterId_val)
    PickupFirstGetBonusExcel.AddRewardParcelType(builder, RewardParcelType_val)
    PickupFirstGetBonusExcel.AddRewardParcelId(builder, RewardParcelId_val)
    PickupFirstGetBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    return PickupFirstGetBonusExcel.End(builder)

def pack_PossessionCheckExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PossessionCheck") if encrypt else None
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    DefaultParcelType_val = convert_int(getattr(ParcelType, data.get('DefaultParcelType', 0)), password)
    DefaultParcelId_val = convert_long(data.get('DefaultParcelId', 0), password)
    DefaultParcelAmount_val = convert_int(data.get('DefaultParcelAmount', 0), password)
    ReplaceParcelType_val = convert_int(getattr(ParcelType, data.get('ReplaceParcelType', 0)), password)
    ReplaceParcelId_val = convert_long(data.get('ReplaceParcelId', 0), password)
    ReplaceParcelAmount_val = convert_int(data.get('ReplaceParcelAmount', 0), password)
    PossessionCheckExcel.Start(builder)
    PossessionCheckExcel.AddUniqueId(builder, UniqueId_val)
    PossessionCheckExcel.AddDefaultParcelType(builder, DefaultParcelType_val)
    PossessionCheckExcel.AddDefaultParcelId(builder, DefaultParcelId_val)
    PossessionCheckExcel.AddDefaultParcelAmount(builder, DefaultParcelAmount_val)
    PossessionCheckExcel.AddReplaceParcelType(builder, ReplaceParcelType_val)
    PossessionCheckExcel.AddReplaceParcelId(builder, ReplaceParcelId_val)
    PossessionCheckExcel.AddReplaceParcelAmount(builder, ReplaceParcelAmount_val)
    return PossessionCheckExcel.End(builder)

def pack_PresetCharacterGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PresetCharacterGroup") if encrypt else None
    GetPresetType_off = builder.CreateString(encrypt_string(data.get('GetPresetType', ''), password))
    PresetCharacterGroupId_val = convert_long(data.get('PresetCharacterGroupId', 0), password)
    Level_val = convert_int(data.get('Level', 0), password)
    Exp_val = convert_int(data.get('Exp', 0), password)
    FavorExp_val = convert_int(data.get('FavorExp', 0), password)
    FavorRank_val = convert_int(data.get('FavorRank', 0), password)
    StarGrade_val = convert_int(data.get('StarGrade', 0), password)
    ExSkillLevel_val = convert_int(data.get('ExSkillLevel', 0), password)
    PassiveSkillLevel_val = convert_int(data.get('PassiveSkillLevel', 0), password)
    ExtraPassiveSkillLevel_val = convert_int(data.get('ExtraPassiveSkillLevel', 0), password)
    CommonSkillLevel_val = convert_int(data.get('CommonSkillLevel', 0), password)
    LeaderSkillLevel_val = convert_int(data.get('LeaderSkillLevel', 0), password)
    EquipSlot01_val = data.get('EquipSlot01', 0)
    EquipSlotTier01_val = convert_int(data.get('EquipSlotTier01', 0), password)
    EquipSlotLevel01_val = convert_int(data.get('EquipSlotLevel01', 0), password)
    EquipSlot02_val = data.get('EquipSlot02', 0)
    EquipSlotTier02_val = convert_int(data.get('EquipSlotTier02', 0), password)
    EquipSlotLevel02_val = convert_int(data.get('EquipSlotLevel02', 0), password)
    EquipSlot03_val = data.get('EquipSlot03', 0)
    EquipSlotTier03_val = convert_int(data.get('EquipSlotTier03', 0), password)
    EquipSlotLevel03_val = convert_int(data.get('EquipSlotLevel03', 0), password)
    EquipCharacterWeapon_val = data.get('EquipCharacterWeapon', 0)
    EquipCharacterWeaponTier_val = convert_int(data.get('EquipCharacterWeaponTier', 0), password)
    EquipCharacterWeaponLevel_val = convert_int(data.get('EquipCharacterWeaponLevel', 0), password)
    EquipCharacterGear_val = data.get('EquipCharacterGear', 0)
    EquipCharacterGearTier_val = convert_int(data.get('EquipCharacterGearTier', 0), password)
    EquipCharacterGearLevel_val = convert_int(data.get('EquipCharacterGearLevel', 0), password)
    PotentialType01_val = convert_int(getattr(PotentialStatBonusRateType, data.get('PotentialType01', 0)), password)
    PotentialLevel01_val = convert_int(data.get('PotentialLevel01', 0), password)
    PotentialType02_val = convert_int(getattr(PotentialStatBonusRateType, data.get('PotentialType02', 0)), password)
    PotentialLevel02_val = convert_int(data.get('PotentialLevel02', 0), password)
    PotentialType03_val = convert_int(getattr(PotentialStatBonusRateType, data.get('PotentialType03', 0)), password)
    PotentialLevel03_val = convert_int(data.get('PotentialLevel03', 0), password)
    PresetCharacterGroupExcel.Start(builder)
    PresetCharacterGroupExcel.AddPresetCharacterGroupId(builder, PresetCharacterGroupId_val)
    PresetCharacterGroupExcel.AddGetPresetType(builder, GetPresetType_off)
    PresetCharacterGroupExcel.AddLevel(builder, Level_val)
    PresetCharacterGroupExcel.AddExp(builder, Exp_val)
    PresetCharacterGroupExcel.AddFavorExp(builder, FavorExp_val)
    PresetCharacterGroupExcel.AddFavorRank(builder, FavorRank_val)
    PresetCharacterGroupExcel.AddStarGrade(builder, StarGrade_val)
    PresetCharacterGroupExcel.AddExSkillLevel(builder, ExSkillLevel_val)
    PresetCharacterGroupExcel.AddPassiveSkillLevel(builder, PassiveSkillLevel_val)
    PresetCharacterGroupExcel.AddExtraPassiveSkillLevel(builder, ExtraPassiveSkillLevel_val)
    PresetCharacterGroupExcel.AddCommonSkillLevel(builder, CommonSkillLevel_val)
    PresetCharacterGroupExcel.AddLeaderSkillLevel(builder, LeaderSkillLevel_val)
    PresetCharacterGroupExcel.AddEquipSlot01(builder, EquipSlot01_val)
    PresetCharacterGroupExcel.AddEquipSlotTier01(builder, EquipSlotTier01_val)
    PresetCharacterGroupExcel.AddEquipSlotLevel01(builder, EquipSlotLevel01_val)
    PresetCharacterGroupExcel.AddEquipSlot02(builder, EquipSlot02_val)
    PresetCharacterGroupExcel.AddEquipSlotTier02(builder, EquipSlotTier02_val)
    PresetCharacterGroupExcel.AddEquipSlotLevel02(builder, EquipSlotLevel02_val)
    PresetCharacterGroupExcel.AddEquipSlot03(builder, EquipSlot03_val)
    PresetCharacterGroupExcel.AddEquipSlotTier03(builder, EquipSlotTier03_val)
    PresetCharacterGroupExcel.AddEquipSlotLevel03(builder, EquipSlotLevel03_val)
    PresetCharacterGroupExcel.AddEquipCharacterWeapon(builder, EquipCharacterWeapon_val)
    PresetCharacterGroupExcel.AddEquipCharacterWeaponTier(builder, EquipCharacterWeaponTier_val)
    PresetCharacterGroupExcel.AddEquipCharacterWeaponLevel(builder, EquipCharacterWeaponLevel_val)
    PresetCharacterGroupExcel.AddEquipCharacterGear(builder, EquipCharacterGear_val)
    PresetCharacterGroupExcel.AddEquipCharacterGearTier(builder, EquipCharacterGearTier_val)
    PresetCharacterGroupExcel.AddEquipCharacterGearLevel(builder, EquipCharacterGearLevel_val)
    PresetCharacterGroupExcel.AddPotentialType01(builder, PotentialType01_val)
    PresetCharacterGroupExcel.AddPotentialLevel01(builder, PotentialLevel01_val)
    PresetCharacterGroupExcel.AddPotentialType02(builder, PotentialType02_val)
    PresetCharacterGroupExcel.AddPotentialLevel02(builder, PotentialLevel02_val)
    PresetCharacterGroupExcel.AddPotentialType03(builder, PotentialType03_val)
    PresetCharacterGroupExcel.AddPotentialLevel03(builder, PotentialLevel03_val)
    return PresetCharacterGroupExcel.End(builder)

def pack_PresetCharacterGroupSettingExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PresetCharacterGroupSetting") if encrypt else None
    PresetType_vec = 0
    if 'PresetType' in data:
        PresetType_items = data['PresetType']
        PresetType_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in PresetType_items]
        PresetCharacterGroupSettingExcel.StartPresetTypeVector(builder, len(PresetType_str_offsets))
        for offset in reversed(PresetType_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        PresetType_vec = builder.EndVector(len(PresetType_items))
    CharacterId_val = convert_long(data.get('CharacterId', 0), password)
    ArenaSimulatorFixed_val = data.get('ArenaSimulatorFixed', 0)
    PresetCharacterGroupSettingExcel.Start(builder)
    PresetCharacterGroupSettingExcel.AddCharacterId(builder, CharacterId_val)
    PresetCharacterGroupSettingExcel.AddArenaSimulatorFixed(builder, ArenaSimulatorFixed_val)
    PresetCharacterGroupSettingExcel.AddPresetType(builder, PresetType_vec)
    return PresetCharacterGroupSettingExcel.End(builder)

def pack_PresetParcelsExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("PresetParcels") if encrypt else None
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    PresetGroupId_val = convert_long(data.get('PresetGroupId', 0), password)
    ParcelAmount_val = convert_long(data.get('ParcelAmount', 0), password)
    PresetParcelsExcel.Start(builder)
    PresetParcelsExcel.AddParcelType(builder, ParcelType_val)
    PresetParcelsExcel.AddParcelId(builder, ParcelId_val)
    PresetParcelsExcel.AddPresetGroupId(builder, PresetGroupId_val)
    PresetParcelsExcel.AddParcelAmount(builder, ParcelAmount_val)
    return PresetParcelsExcel.End(builder)

def pack_ProductBattlePassExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ProductBattlePass") if encrypt else None
    ProductId_off = builder.CreateString(encrypt_string(data.get('ProductId', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        ProductBattlePassExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        ProductBattlePassExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        ProductBattlePassExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    StoreType_val = convert_int(getattr(StoreType, data.get('StoreType', 0)), password)
    Price_val = convert_long(data.get('Price', 0), password)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    BattlePassProductGroupId_val = convert_long(data.get('BattlePassProductGroupId', 0), password)
    ProductBattlePassExcel.Start(builder)
    ProductBattlePassExcel.AddId(builder, Id_val)
    ProductBattlePassExcel.AddProductId(builder, ProductId_off)
    ProductBattlePassExcel.AddStoreType(builder, StoreType_val)
    ProductBattlePassExcel.AddPrice(builder, Price_val)
    ProductBattlePassExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    ProductBattlePassExcel.AddBattlePassProductGroupId(builder, BattlePassProductGroupId_val)
    ProductBattlePassExcel.AddParcelType(builder, ParcelType_vec)
    ProductBattlePassExcel.AddParcelId(builder, ParcelId_vec)
    ProductBattlePassExcel.AddParcelAmount(builder, ParcelAmount_vec)
    return ProductBattlePassExcel.End(builder)

def pack_ProductExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Product") if encrypt else None
    ProductId_off = builder.CreateString(encrypt_string(data.get('ProductId', ''), password))
    PriceReference_off = builder.CreateString(encrypt_string(data.get('PriceReference', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        ProductExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        ProductExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        ProductExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    StoreType_val = convert_int(getattr(StoreType, data.get('StoreType', 0)), password)
    Price_val = convert_long(data.get('Price', 0), password)
    PurchasePeriodType_val = convert_int(getattr(PurchasePeriodType, data.get('PurchasePeriodType', 0)), password)
    PurchasePeriodLimit_val = convert_long(data.get('PurchasePeriodLimit', 0), password)
    ProductExcel.Start(builder)
    ProductExcel.AddId(builder, Id_val)
    ProductExcel.AddProductId(builder, ProductId_off)
    ProductExcel.AddStoreType(builder, StoreType_val)
    ProductExcel.AddPrice(builder, Price_val)
    ProductExcel.AddPriceReference(builder, PriceReference_off)
    ProductExcel.AddPurchasePeriodType(builder, PurchasePeriodType_val)
    ProductExcel.AddPurchasePeriodLimit(builder, PurchasePeriodLimit_val)
    ProductExcel.AddParcelType(builder, ParcelType_vec)
    ProductExcel.AddParcelId(builder, ParcelId_vec)
    ProductExcel.AddParcelAmount(builder, ParcelAmount_vec)
    return ProductExcel.End(builder)

def pack_ProductMonthlyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ProductMonthly") if encrypt else None
    ProductId_off = builder.CreateString(encrypt_string(data.get('ProductId', ''), password))
    PriceReference_off = builder.CreateString(encrypt_string(data.get('PriceReference', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        ProductMonthlyExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        ProductMonthlyExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        ProductMonthlyExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    DailyParcelType_vec = 0
    if 'DailyParcelType' in data:
        DailyParcelType_items = data['DailyParcelType']
        ProductMonthlyExcel.StartDailyParcelTypeVector(builder, len(DailyParcelType_items))
        for item in reversed(DailyParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        DailyParcelType_vec = builder.EndVector(len(DailyParcelType_items))
    DailyParcelId_vec = 0
    if 'DailyParcelId' in data:
        DailyParcelId_items = data['DailyParcelId']
        ProductMonthlyExcel.StartDailyParcelIdVector(builder, len(DailyParcelId_items))
        for item in reversed(DailyParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        DailyParcelId_vec = builder.EndVector(len(DailyParcelId_items))
    DailyParcelAmount_vec = 0
    if 'DailyParcelAmount' in data:
        DailyParcelAmount_items = data['DailyParcelAmount']
        ProductMonthlyExcel.StartDailyParcelAmountVector(builder, len(DailyParcelAmount_items))
        for item in reversed(DailyParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        DailyParcelAmount_vec = builder.EndVector(len(DailyParcelAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    StoreType_val = convert_int(getattr(StoreType, data.get('StoreType', 0)), password)
    Price_val = convert_long(data.get('Price', 0), password)
    ProductTagType_val = convert_int(getattr(ProductTagType, data.get('ProductTagType', 0)), password)
    MonthlyDays_val = convert_long(data.get('MonthlyDays', 0), password)
    UseMonthlyProductCheck_val = data.get('UseMonthlyProductCheck', 0)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    EnterCostReduceGroupId_val = convert_long(data.get('EnterCostReduceGroupId', 0), password)
    ProductMonthlyExcel.Start(builder)
    ProductMonthlyExcel.AddId(builder, Id_val)
    ProductMonthlyExcel.AddProductId(builder, ProductId_off)
    ProductMonthlyExcel.AddStoreType(builder, StoreType_val)
    ProductMonthlyExcel.AddPrice(builder, Price_val)
    ProductMonthlyExcel.AddPriceReference(builder, PriceReference_off)
    ProductMonthlyExcel.AddProductTagType(builder, ProductTagType_val)
    ProductMonthlyExcel.AddMonthlyDays(builder, MonthlyDays_val)
    ProductMonthlyExcel.AddUseMonthlyProductCheck(builder, UseMonthlyProductCheck_val)
    ProductMonthlyExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    ProductMonthlyExcel.AddParcelType(builder, ParcelType_vec)
    ProductMonthlyExcel.AddParcelId(builder, ParcelId_vec)
    ProductMonthlyExcel.AddParcelAmount(builder, ParcelAmount_vec)
    ProductMonthlyExcel.AddEnterCostReduceGroupId(builder, EnterCostReduceGroupId_val)
    ProductMonthlyExcel.AddDailyParcelType(builder, DailyParcelType_vec)
    ProductMonthlyExcel.AddDailyParcelId(builder, DailyParcelId_vec)
    ProductMonthlyExcel.AddDailyParcelAmount(builder, DailyParcelAmount_vec)
    return ProductMonthlyExcel.End(builder)

def pack_ProductSelectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ProductSelect") if encrypt else None
    ProductId_off = builder.CreateString(encrypt_string(data.get('ProductId', ''), password))
    PriceReference_off = builder.CreateString(encrypt_string(data.get('PriceReference', ''), password))
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        ProductSelectExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        ProductSelectExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ParcelAmount_vec = 0
    if 'ParcelAmount' in data:
        ParcelAmount_items = data['ParcelAmount']
        ProductSelectExcel.StartParcelAmountVector(builder, len(ParcelAmount_items))
        for item in reversed(ParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelAmount_vec = builder.EndVector(len(ParcelAmount_items))
    ProductSelectionSlot_vec = 0
    if 'ProductSelectionSlot' in data:
        ProductSelectionSlot_items = data['ProductSelectionSlot']
        ProductSelectExcel.StartProductSelectionSlotVector(builder, len(ProductSelectionSlot_items))
        for item in reversed(ProductSelectionSlot_items):
            builder.PrependInt64(convert_long(item, password))
        ProductSelectionSlot_vec = builder.EndVector(len(ProductSelectionSlot_items))
    Id_val = convert_long(data.get('Id', 0), password)
    StoreType_val = convert_int(getattr(StoreType, data.get('StoreType', 0)), password)
    Price_val = convert_long(data.get('Price', 0), password)
    PurchasePeriodType_val = convert_int(getattr(PurchasePeriodType, data.get('PurchasePeriodType', 0)), password)
    PurchasePeriodLimit_val = convert_long(data.get('PurchasePeriodLimit', 0), password)
    ProductSelectExcel.Start(builder)
    ProductSelectExcel.AddId(builder, Id_val)
    ProductSelectExcel.AddProductId(builder, ProductId_off)
    ProductSelectExcel.AddStoreType(builder, StoreType_val)
    ProductSelectExcel.AddPrice(builder, Price_val)
    ProductSelectExcel.AddPriceReference(builder, PriceReference_off)
    ProductSelectExcel.AddPurchasePeriodType(builder, PurchasePeriodType_val)
    ProductSelectExcel.AddPurchasePeriodLimit(builder, PurchasePeriodLimit_val)
    ProductSelectExcel.AddParcelType(builder, ParcelType_vec)
    ProductSelectExcel.AddParcelId(builder, ParcelId_vec)
    ProductSelectExcel.AddParcelAmount(builder, ParcelAmount_vec)
    ProductSelectExcel.AddProductSelectionSlot(builder, ProductSelectionSlot_vec)
    return ProductSelectExcel.End(builder)

def pack_ProductSelectionGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ProductSelectionGroup") if encrypt else None
    ProductSelectionGroupId_val = convert_long(data.get('ProductSelectionGroupId', 0), password)
    ProductSelectionGroupComponentId_val = convert_long(data.get('ProductSelectionGroupComponentId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    ResultAmount_val = convert_long(data.get('ResultAmount', 0), password)
    ConditionParcelType_val = convert_int(getattr(ParcelType, data.get('ConditionParcelType', 0)), password)
    ConditionParcelId_val = convert_long(data.get('ConditionParcelId', 0), password)
    ProductSelectionGroupExcel.Start(builder)
    ProductSelectionGroupExcel.AddProductSelectionGroupId(builder, ProductSelectionGroupId_val)
    ProductSelectionGroupExcel.AddProductSelectionGroupComponentId(builder, ProductSelectionGroupComponentId_val)
    ProductSelectionGroupExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ProductSelectionGroupExcel.AddParcelType(builder, ParcelType_val)
    ProductSelectionGroupExcel.AddParcelId(builder, ParcelId_val)
    ProductSelectionGroupExcel.AddResultAmount(builder, ResultAmount_val)
    ProductSelectionGroupExcel.AddConditionParcelType(builder, ConditionParcelType_val)
    ProductSelectionGroupExcel.AddConditionParcelId(builder, ConditionParcelId_val)
    return ProductSelectionGroupExcel.End(builder)

def pack_RaidRankingRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RaidRankingReward") if encrypt else None
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        RaidRankingRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelUniqueId_vec = 0
    if 'RewardParcelUniqueId' in data:
        RewardParcelUniqueId_items = data['RewardParcelUniqueId']
        RaidRankingRewardExcel.StartRewardParcelUniqueIdVector(builder, len(RewardParcelUniqueId_items))
        for item in reversed(RewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelUniqueId_vec = builder.EndVector(len(RewardParcelUniqueId_items))
    RewardParcelAmount_vec = 0
    if 'RewardParcelAmount' in data:
        RewardParcelAmount_items = data['RewardParcelAmount']
        RaidRankingRewardExcel.StartRewardParcelAmountVector(builder, len(RewardParcelAmount_items))
        for item in reversed(RewardParcelAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelAmount_vec = builder.EndVector(len(RewardParcelAmount_items))
    RankingRewardGroupId_val = convert_long(data.get('RankingRewardGroupId', 0), password)
    Id_val = convert_long(data.get('Id', 0), password)
    RankStart_val = convert_long(data.get('RankStart', 0), password)
    RankEnd_val = convert_long(data.get('RankEnd', 0), password)
    PercentRankStart_val = convert_long(data.get('PercentRankStart', 0), password)
    PercentRankEnd_val = convert_long(data.get('PercentRankEnd', 0), password)
    Tier_val = convert_int(data.get('Tier', 0), password)
    RaidRankingRewardExcel.Start(builder)
    RaidRankingRewardExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId_val)
    RaidRankingRewardExcel.AddId(builder, Id_val)
    RaidRankingRewardExcel.AddRankStart(builder, RankStart_val)
    RaidRankingRewardExcel.AddRankEnd(builder, RankEnd_val)
    RaidRankingRewardExcel.AddPercentRankStart(builder, PercentRankStart_val)
    RaidRankingRewardExcel.AddPercentRankEnd(builder, PercentRankEnd_val)
    RaidRankingRewardExcel.AddTier(builder, Tier_val)
    RaidRankingRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    RaidRankingRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId_vec)
    RaidRankingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_vec)
    return RaidRankingRewardExcel.End(builder)

def pack_RaidSeasonManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RaidSeasonManage") if encrypt else None
    SeasonStartData_off = builder.CreateString(encrypt_string(data.get('SeasonStartData', ''), password))
    EndNoteLabelStartDate_off = builder.CreateString(encrypt_string(data.get('EndNoteLabelStartDate', ''), password))
    SeasonEndData_off = builder.CreateString(encrypt_string(data.get('SeasonEndData', ''), password))
    SettlementEndDate_off = builder.CreateString(encrypt_string(data.get('SettlementEndDate', ''), password))
    OpenRaidBossGroup_vec = 0
    if 'OpenRaidBossGroup' in data:
        OpenRaidBossGroup_items = data['OpenRaidBossGroup']
        OpenRaidBossGroup_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in OpenRaidBossGroup_items]
        RaidSeasonManageExcel.StartOpenRaidBossGroupVector(builder, len(OpenRaidBossGroup_str_offsets))
        for offset in reversed(OpenRaidBossGroup_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        OpenRaidBossGroup_vec = builder.EndVector(len(OpenRaidBossGroup_items))
    StackedSeasonRewardGauge_vec = 0
    if 'StackedSeasonRewardGauge' in data:
        StackedSeasonRewardGauge_items = data['StackedSeasonRewardGauge']
        RaidSeasonManageExcel.StartStackedSeasonRewardGaugeVector(builder, len(StackedSeasonRewardGauge_items))
        for item in reversed(StackedSeasonRewardGauge_items):
            builder.PrependInt64(convert_long(item, password))
        StackedSeasonRewardGauge_vec = builder.EndVector(len(StackedSeasonRewardGauge_items))
    SeasonRewardId_vec = 0
    if 'SeasonRewardId' in data:
        SeasonRewardId_items = data['SeasonRewardId']
        RaidSeasonManageExcel.StartSeasonRewardIdVector(builder, len(SeasonRewardId_items))
        for item in reversed(SeasonRewardId_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardId_vec = builder.EndVector(len(SeasonRewardId_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    SeasonDisplay_val = convert_long(data.get('SeasonDisplay', 0), password)
    RankingRewardGroupId_val = convert_long(data.get('RankingRewardGroupId', 0), password)
    MaxSeasonRewardGauage_val = convert_int(data.get('MaxSeasonRewardGauage', 0), password)
    RaidSeasonManageExcel.Start(builder)
    RaidSeasonManageExcel.AddSeasonId(builder, SeasonId_val)
    RaidSeasonManageExcel.AddSeasonDisplay(builder, SeasonDisplay_val)
    RaidSeasonManageExcel.AddSeasonStartData(builder, SeasonStartData_off)
    RaidSeasonManageExcel.AddEndNoteLabelStartDate(builder, EndNoteLabelStartDate_off)
    RaidSeasonManageExcel.AddSeasonEndData(builder, SeasonEndData_off)
    RaidSeasonManageExcel.AddSettlementEndDate(builder, SettlementEndDate_off)
    RaidSeasonManageExcel.AddOpenRaidBossGroup(builder, OpenRaidBossGroup_vec)
    RaidSeasonManageExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId_val)
    RaidSeasonManageExcel.AddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage_val)
    RaidSeasonManageExcel.AddStackedSeasonRewardGauge(builder, StackedSeasonRewardGauge_vec)
    RaidSeasonManageExcel.AddSeasonRewardId(builder, SeasonRewardId_vec)
    return RaidSeasonManageExcel.End(builder)

def pack_RaidStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RaidStage") if encrypt else None
    RaidBossGroup_off = builder.CreateString(encrypt_string(data.get('RaidBossGroup', ''), password))
    PortraitPath_off = builder.CreateString(encrypt_string(data.get('PortraitPath', ''), password))
    BGPath_off = builder.CreateString(encrypt_string(data.get('BGPath', ''), password))
    GroundDevName_off = builder.CreateString(encrypt_string(data.get('GroundDevName', ''), password))
    EnterTimeLine_off = builder.CreateString(encrypt_string(data.get('EnterTimeLine', ''), password))
    VictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('VictoryTimelinePath', ''), password))
    PhaseChangeTimelinePath_off = builder.CreateString(encrypt_string(data.get('PhaseChangeTimelinePath', ''), password))
    BossCharacterId_vec = 0
    if 'BossCharacterId' in data:
        BossCharacterId_items = data['BossCharacterId']
        RaidStageExcel.StartBossCharacterIdVector(builder, len(BossCharacterId_items))
        for item in reversed(BossCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        BossCharacterId_vec = builder.EndVector(len(BossCharacterId_items))
    BattleReadyTimelinePath_vec = 0
    if 'BattleReadyTimelinePath' in data:
        BattleReadyTimelinePath_items = data['BattleReadyTimelinePath']
        BattleReadyTimelinePath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in BattleReadyTimelinePath_items]
        RaidStageExcel.StartBattleReadyTimelinePathVector(builder, len(BattleReadyTimelinePath_str_offsets))
        for offset in reversed(BattleReadyTimelinePath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        BattleReadyTimelinePath_vec = builder.EndVector(len(BattleReadyTimelinePath_items))
    BattleReadyTimelinePhaseStart_vec = 0
    if 'BattleReadyTimelinePhaseStart' in data:
        BattleReadyTimelinePhaseStart_items = data['BattleReadyTimelinePhaseStart']
        RaidStageExcel.StartBattleReadyTimelinePhaseStartVector(builder, len(BattleReadyTimelinePhaseStart_items))
        for item in reversed(BattleReadyTimelinePhaseStart_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseStart_vec = builder.EndVector(len(BattleReadyTimelinePhaseStart_items))
    BattleReadyTimelinePhaseEnd_vec = 0
    if 'BattleReadyTimelinePhaseEnd' in data:
        BattleReadyTimelinePhaseEnd_items = data['BattleReadyTimelinePhaseEnd']
        RaidStageExcel.StartBattleReadyTimelinePhaseEndVector(builder, len(BattleReadyTimelinePhaseEnd_items))
        for item in reversed(BattleReadyTimelinePhaseEnd_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseEnd_vec = builder.EndVector(len(BattleReadyTimelinePhaseEnd_items))
    Id_val = convert_long(data.get('Id', 0), password)
    UseBossIndex_val = data.get('UseBossIndex', 0)
    UseBossAIPhaseSync_val = data.get('UseBossAIPhaseSync', 0)
    RaidCharacterId_val = convert_long(data.get('RaidCharacterId', 0), password)
    Difficulty_val = convert_int(getattr(Difficulty, data.get('Difficulty', 0)), password)
    DifficultyOpenCondition_val = data.get('DifficultyOpenCondition', 0)
    MaxPlayerCount_val = convert_long(data.get('MaxPlayerCount', 0), password)
    RaidRoomLifeTime_val = convert_int(data.get('RaidRoomLifeTime', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    TacticEnvironment_val = convert_int(getattr(TacticEnvironment, data.get('TacticEnvironment', 0)), password)
    DefaultClearScore_val = convert_long(data.get('DefaultClearScore', 0), password)
    MaximumScore_val = convert_long(data.get('MaximumScore', 0), password)
    PerSecondMinusScore_val = convert_long(data.get('PerSecondMinusScore', 0), password)
    HPPercentScore_val = convert_long(data.get('HPPercentScore', 0), password)
    MinimumAcquisitionScore_val = convert_long(data.get('MinimumAcquisitionScore', 0), password)
    MaximumAcquisitionScore_val = convert_long(data.get('MaximumAcquisitionScore', 0), password)
    RaidRewardGroupId_val = convert_long(data.get('RaidRewardGroupId', 0), password)
    TimeLinePhase_val = convert_long(data.get('TimeLinePhase', 0), password)
    EnterScenarioKey_val = convert_uint(data.get('EnterScenarioKey', 0), password)
    ClearScenarioKey_val = convert_uint(data.get('ClearScenarioKey', 0), password)
    ShowSkillCard_val = data.get('ShowSkillCard', 0)
    BossBGInfoKey_val = convert_uint(data.get('BossBGInfoKey', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    RaidStageExcel.Start(builder)
    RaidStageExcel.AddId(builder, Id_val)
    RaidStageExcel.AddUseBossIndex(builder, UseBossIndex_val)
    RaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync_val)
    RaidStageExcel.AddRaidBossGroup(builder, RaidBossGroup_off)
    RaidStageExcel.AddPortraitPath(builder, PortraitPath_off)
    RaidStageExcel.AddBGPath(builder, BGPath_off)
    RaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId_val)
    RaidStageExcel.AddBossCharacterId(builder, BossCharacterId_vec)
    RaidStageExcel.AddDifficulty(builder, Difficulty_val)
    RaidStageExcel.AddDifficultyOpenCondition(builder, DifficultyOpenCondition_val)
    RaidStageExcel.AddMaxPlayerCount(builder, MaxPlayerCount_val)
    RaidStageExcel.AddRaidRoomLifeTime(builder, RaidRoomLifeTime_val)
    RaidStageExcel.AddBattleDuration(builder, BattleDuration_val)
    RaidStageExcel.AddGroundId(builder, GroundId_val)
    RaidStageExcel.AddGroundDevName(builder, GroundDevName_off)
    RaidStageExcel.AddEnterTimeLine(builder, EnterTimeLine_off)
    RaidStageExcel.AddTacticEnvironment(builder, TacticEnvironment_val)
    RaidStageExcel.AddDefaultClearScore(builder, DefaultClearScore_val)
    RaidStageExcel.AddMaximumScore(builder, MaximumScore_val)
    RaidStageExcel.AddPerSecondMinusScore(builder, PerSecondMinusScore_val)
    RaidStageExcel.AddHPPercentScore(builder, HPPercentScore_val)
    RaidStageExcel.AddMinimumAcquisitionScore(builder, MinimumAcquisitionScore_val)
    RaidStageExcel.AddMaximumAcquisitionScore(builder, MaximumAcquisitionScore_val)
    RaidStageExcel.AddRaidRewardGroupId(builder, RaidRewardGroupId_val)
    RaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePath_vec)
    RaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStart_vec)
    RaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEnd_vec)
    RaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePath_off)
    RaidStageExcel.AddPhaseChangeTimelinePath(builder, PhaseChangeTimelinePath_off)
    RaidStageExcel.AddTimeLinePhase(builder, TimeLinePhase_val)
    RaidStageExcel.AddEnterScenarioKey(builder, EnterScenarioKey_val)
    RaidStageExcel.AddClearScenarioKey(builder, ClearScenarioKey_val)
    RaidStageExcel.AddShowSkillCard(builder, ShowSkillCard_val)
    RaidStageExcel.AddBossBGInfoKey(builder, BossBGInfoKey_val)
    RaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return RaidStageExcel.End(builder)

def pack_RaidStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RaidStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    IsClearStageRewardHideInfo_val = data.get('IsClearStageRewardHideInfo', 0)
    ClearStageRewardProb_val = convert_long(data.get('ClearStageRewardProb', 0), password)
    ClearStageRewardParcelType_val = convert_int(getattr(ParcelType, data.get('ClearStageRewardParcelType', 0)), password)
    ClearStageRewardParcelUniqueID_val = convert_long(data.get('ClearStageRewardParcelUniqueID', 0), password)
    ClearStageRewardAmount_val = convert_long(data.get('ClearStageRewardAmount', 0), password)
    RaidStageRewardExcel.Start(builder)
    RaidStageRewardExcel.AddGroupId(builder, GroupId_val)
    RaidStageRewardExcel.AddIsClearStageRewardHideInfo(builder, IsClearStageRewardHideInfo_val)
    RaidStageRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb_val)
    RaidStageRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType_val)
    RaidStageRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID_val)
    RaidStageRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount_val)
    return RaidStageRewardExcel.End(builder)

def pack_RaidStageSeasonRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RaidStageSeasonReward") if encrypt else None
    SeasonRewardParcelType_vec = 0
    if 'SeasonRewardParcelType' in data:
        SeasonRewardParcelType_items = data['SeasonRewardParcelType']
        RaidStageSeasonRewardExcel.StartSeasonRewardParcelTypeVector(builder, len(SeasonRewardParcelType_items))
        for item in reversed(SeasonRewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        SeasonRewardParcelType_vec = builder.EndVector(len(SeasonRewardParcelType_items))
    SeasonRewardParcelUniqueId_vec = 0
    if 'SeasonRewardParcelUniqueId' in data:
        SeasonRewardParcelUniqueId_items = data['SeasonRewardParcelUniqueId']
        RaidStageSeasonRewardExcel.StartSeasonRewardParcelUniqueIdVector(builder, len(SeasonRewardParcelUniqueId_items))
        for item in reversed(SeasonRewardParcelUniqueId_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardParcelUniqueId_vec = builder.EndVector(len(SeasonRewardParcelUniqueId_items))
    SeasonRewardAmount_vec = 0
    if 'SeasonRewardAmount' in data:
        SeasonRewardAmount_items = data['SeasonRewardAmount']
        RaidStageSeasonRewardExcel.StartSeasonRewardAmountVector(builder, len(SeasonRewardAmount_items))
        for item in reversed(SeasonRewardAmount_items):
            builder.PrependInt64(convert_long(item, password))
        SeasonRewardAmount_vec = builder.EndVector(len(SeasonRewardAmount_items))
    SeasonRewardId_val = convert_long(data.get('SeasonRewardId', 0), password)
    RaidStageSeasonRewardExcel.Start(builder)
    RaidStageSeasonRewardExcel.AddSeasonRewardId(builder, SeasonRewardId_val)
    RaidStageSeasonRewardExcel.AddSeasonRewardParcelType(builder, SeasonRewardParcelType_vec)
    RaidStageSeasonRewardExcel.AddSeasonRewardParcelUniqueId(builder, SeasonRewardParcelUniqueId_vec)
    RaidStageSeasonRewardExcel.AddSeasonRewardAmount(builder, SeasonRewardAmount_vec)
    return RaidStageSeasonRewardExcel.End(builder)

def pack_RecipeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Recipe") if encrypt else None
    ParcelType_vec = 0
    if 'ParcelType' in data:
        ParcelType_items = data['ParcelType']
        RecipeExcel.StartParcelTypeVector(builder, len(ParcelType_items))
        for item in reversed(ParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        ParcelType_vec = builder.EndVector(len(ParcelType_items))
    ParcelId_vec = 0
    if 'ParcelId' in data:
        ParcelId_items = data['ParcelId']
        RecipeExcel.StartParcelIdVector(builder, len(ParcelId_items))
        for item in reversed(ParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        ParcelId_vec = builder.EndVector(len(ParcelId_items))
    ResultAmountMin_vec = 0
    if 'ResultAmountMin' in data:
        ResultAmountMin_items = data['ResultAmountMin']
        RecipeExcel.StartResultAmountMinVector(builder, len(ResultAmountMin_items))
        for item in reversed(ResultAmountMin_items):
            builder.PrependInt64(convert_long(item, password))
        ResultAmountMin_vec = builder.EndVector(len(ResultAmountMin_items))
    ResultAmountMax_vec = 0
    if 'ResultAmountMax' in data:
        ResultAmountMax_items = data['ResultAmountMax']
        RecipeExcel.StartResultAmountMaxVector(builder, len(ResultAmountMax_items))
        for item in reversed(ResultAmountMax_items):
            builder.PrependInt64(convert_long(item, password))
        ResultAmountMax_vec = builder.EndVector(len(ResultAmountMax_items))
    Id_val = convert_long(data.get('Id', 0), password)
    RecipeType_val = convert_int(getattr(RecipeType, data.get('RecipeType', 0)), password)
    RecipeIngredientId_val = convert_long(data.get('RecipeIngredientId', 0), password)
    RecipeSelectionGroupId_val = convert_long(data.get('RecipeSelectionGroupId', 0), password)
    RecipeExcel.Start(builder)
    RecipeExcel.AddId(builder, Id_val)
    RecipeExcel.AddRecipeType(builder, RecipeType_val)
    RecipeExcel.AddRecipeIngredientId(builder, RecipeIngredientId_val)
    RecipeExcel.AddRecipeSelectionGroupId(builder, RecipeSelectionGroupId_val)
    RecipeExcel.AddParcelType(builder, ParcelType_vec)
    RecipeExcel.AddParcelId(builder, ParcelId_vec)
    RecipeExcel.AddResultAmountMin(builder, ResultAmountMin_vec)
    RecipeExcel.AddResultAmountMax(builder, ResultAmountMax_vec)
    return RecipeExcel.End(builder)

def pack_RecipeIngredientExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RecipeIngredient") if encrypt else None
    CostParcelType_vec = 0
    if 'CostParcelType' in data:
        CostParcelType_items = data['CostParcelType']
        RecipeIngredientExcel.StartCostParcelTypeVector(builder, len(CostParcelType_items))
        for item in reversed(CostParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        CostParcelType_vec = builder.EndVector(len(CostParcelType_items))
    CostId_vec = 0
    if 'CostId' in data:
        CostId_items = data['CostId']
        RecipeIngredientExcel.StartCostIdVector(builder, len(CostId_items))
        for item in reversed(CostId_items):
            builder.PrependInt64(convert_long(item, password))
        CostId_vec = builder.EndVector(len(CostId_items))
    CostAmount_vec = 0
    if 'CostAmount' in data:
        CostAmount_items = data['CostAmount']
        RecipeIngredientExcel.StartCostAmountVector(builder, len(CostAmount_items))
        for item in reversed(CostAmount_items):
            builder.PrependInt64(convert_long(item, password))
        CostAmount_vec = builder.EndVector(len(CostAmount_items))
    IngredientParcelType_vec = 0
    if 'IngredientParcelType' in data:
        IngredientParcelType_items = data['IngredientParcelType']
        RecipeIngredientExcel.StartIngredientParcelTypeVector(builder, len(IngredientParcelType_items))
        for item in reversed(IngredientParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        IngredientParcelType_vec = builder.EndVector(len(IngredientParcelType_items))
    IngredientId_vec = 0
    if 'IngredientId' in data:
        IngredientId_items = data['IngredientId']
        RecipeIngredientExcel.StartIngredientIdVector(builder, len(IngredientId_items))
        for item in reversed(IngredientId_items):
            builder.PrependInt64(convert_long(item, password))
        IngredientId_vec = builder.EndVector(len(IngredientId_items))
    IngredientAmount_vec = 0
    if 'IngredientAmount' in data:
        IngredientAmount_items = data['IngredientAmount']
        RecipeIngredientExcel.StartIngredientAmountVector(builder, len(IngredientAmount_items))
        for item in reversed(IngredientAmount_items):
            builder.PrependInt64(convert_long(item, password))
        IngredientAmount_vec = builder.EndVector(len(IngredientAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    RecipeType_val = convert_int(getattr(RecipeType, data.get('RecipeType', 0)), password)
    CostTimeInSecond_val = convert_long(data.get('CostTimeInSecond', 0), password)
    RecipeIngredientExcel.Start(builder)
    RecipeIngredientExcel.AddId(builder, Id_val)
    RecipeIngredientExcel.AddRecipeType(builder, RecipeType_val)
    RecipeIngredientExcel.AddCostParcelType(builder, CostParcelType_vec)
    RecipeIngredientExcel.AddCostId(builder, CostId_vec)
    RecipeIngredientExcel.AddCostAmount(builder, CostAmount_vec)
    RecipeIngredientExcel.AddIngredientParcelType(builder, IngredientParcelType_vec)
    RecipeIngredientExcel.AddIngredientId(builder, IngredientId_vec)
    RecipeIngredientExcel.AddIngredientAmount(builder, IngredientAmount_vec)
    RecipeIngredientExcel.AddCostTimeInSecond(builder, CostTimeInSecond_val)
    return RecipeIngredientExcel.End(builder)

def pack_RecipeSelectionAutoUseExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RecipeSelectionAutoUse") if encrypt else None
    Priority_vec = 0
    if 'Priority' in data:
        Priority_items = data['Priority']
        RecipeSelectionAutoUseExcel.StartPriorityVector(builder, len(Priority_items))
        for item in reversed(Priority_items):
            builder.PrependInt64(convert_long(item, password))
        Priority_vec = builder.EndVector(len(Priority_items))
    Id_val = convert_long(data.get('Id', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    TargetItemId_val = convert_long(data.get('TargetItemId', 0), password)
    RecipeSelectionAutoUseExcel.Start(builder)
    RecipeSelectionAutoUseExcel.AddId(builder, Id_val)
    RecipeSelectionAutoUseExcel.AddParcelType(builder, ParcelType_val)
    RecipeSelectionAutoUseExcel.AddTargetItemId(builder, TargetItemId_val)
    RecipeSelectionAutoUseExcel.AddPriority(builder, Priority_vec)
    return RecipeSelectionAutoUseExcel.End(builder)

def pack_RecipeSelectionGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("RecipeSelectionGroup") if encrypt else None
    RecipeSelectionGroupId_val = convert_long(data.get('RecipeSelectionGroupId', 0), password)
    RecipeSelectionGroupComponentId_val = convert_long(data.get('RecipeSelectionGroupComponentId', 0), password)
    ParcelType_val = convert_int(getattr(ParcelType, data.get('ParcelType', 0)), password)
    ParcelId_val = convert_long(data.get('ParcelId', 0), password)
    ResultAmountMin_val = convert_long(data.get('ResultAmountMin', 0), password)
    ResultAmountMax_val = convert_long(data.get('ResultAmountMax', 0), password)
    RecipeSelectionGroupExcel.Start(builder)
    RecipeSelectionGroupExcel.AddRecipeSelectionGroupId(builder, RecipeSelectionGroupId_val)
    RecipeSelectionGroupExcel.AddRecipeSelectionGroupComponentId(builder, RecipeSelectionGroupComponentId_val)
    RecipeSelectionGroupExcel.AddParcelType(builder, ParcelType_val)
    RecipeSelectionGroupExcel.AddParcelId(builder, ParcelId_val)
    RecipeSelectionGroupExcel.AddResultAmountMin(builder, ResultAmountMin_val)
    RecipeSelectionGroupExcel.AddResultAmountMax(builder, ResultAmountMax_val)
    return RecipeSelectionGroupExcel.End(builder)

def pack_ScenarioBGEffectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioBGEffect") if encrypt else None
    Effect_off = builder.CreateString(encrypt_string(data.get('Effect', ''), password))
    Effect2_off = builder.CreateString(encrypt_string(data.get('Effect2', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    Scroll_val = convert_int(getattr(ScenarioBGScroll, data.get('Scroll', 0)), password)
    ScrollTime_val = convert_long(data.get('ScrollTime', 0), password)
    ScrollFrom_val = convert_long(data.get('ScrollFrom', 0), password)
    ScrollTo_val = convert_long(data.get('ScrollTo', 0), password)
    ScenarioBGEffectExcel.Start(builder)
    ScenarioBGEffectExcel.AddName(builder, Name_val)
    ScenarioBGEffectExcel.AddEffect(builder, Effect_off)
    ScenarioBGEffectExcel.AddEffect2(builder, Effect2_off)
    ScenarioBGEffectExcel.AddScroll(builder, Scroll_val)
    ScenarioBGEffectExcel.AddScrollTime(builder, ScrollTime_val)
    ScenarioBGEffectExcel.AddScrollFrom(builder, ScrollFrom_val)
    ScenarioBGEffectExcel.AddScrollTo(builder, ScrollTo_val)
    return ScenarioBGEffectExcel.End(builder)

def pack_ScenarioBGNameExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioBGName") if encrypt else None
    BGFileName_off = builder.CreateString(encrypt_string(data.get('BGFileName', ''), password))
    AnimationRoot_off = builder.CreateString(encrypt_string(data.get('AnimationRoot', ''), password))
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    BGType_val = convert_int(getattr(ScenarioBGType, data.get('BGType', 0)), password)
    SpineScale_val = encrypt_float(data.get('SpineScale', 0), password)
    SpineLocalPosX_val = convert_int(data.get('SpineLocalPosX', 0), password)
    SpineLocalPosY_val = convert_int(data.get('SpineLocalPosY', 0), password)
    ScenarioBGNameExcel.Start(builder)
    ScenarioBGNameExcel.AddName(builder, Name_val)
    ScenarioBGNameExcel.AddProductionStep(builder, ProductionStep_val)
    ScenarioBGNameExcel.AddBGFileName(builder, BGFileName_off)
    ScenarioBGNameExcel.AddBGType(builder, BGType_val)
    ScenarioBGNameExcel.AddAnimationRoot(builder, AnimationRoot_off)
    ScenarioBGNameExcel.AddAnimationName(builder, AnimationName_off)
    ScenarioBGNameExcel.AddSpineScale(builder, SpineScale_val)
    ScenarioBGNameExcel.AddSpineLocalPosX(builder, SpineLocalPosX_val)
    ScenarioBGNameExcel.AddSpineLocalPosY(builder, SpineLocalPosY_val)
    return ScenarioBGNameExcel.End(builder)

def pack_ScenarioCharacterEmotionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioCharacterEmotion") if encrypt else None
    EmoticonName_off = builder.CreateString(encrypt_string(data.get('EmoticonName', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    ScenarioCharacterEmotionExcel.Start(builder)
    ScenarioCharacterEmotionExcel.AddEmoticonName(builder, EmoticonName_off)
    ScenarioCharacterEmotionExcel.AddName(builder, Name_val)
    return ScenarioCharacterEmotionExcel.End(builder)

def pack_ScenarioCharacterNameExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioCharacterName") if encrypt else None
    NameKR_off = builder.CreateString(encrypt_string(data.get('NameKR', ''), password))
    NicknameKR_off = builder.CreateString(encrypt_string(data.get('NicknameKR', ''), password))
    NameJP_off = builder.CreateString(encrypt_string(data.get('NameJP', ''), password))
    NicknameJP_off = builder.CreateString(encrypt_string(data.get('NicknameJP', ''), password))
    SpinePrefabName_off = builder.CreateString(encrypt_string(data.get('SpinePrefabName', ''), password))
    SmallPortrait_off = builder.CreateString(encrypt_string(data.get('SmallPortrait', ''), password))
    CharacterName_val = convert_uint(data.get('CharacterName', 0), password)
    ProductionStep_val = convert_int(getattr(ProductionStep, data.get('ProductionStep', 0)), password)
    Shape_val = convert_int(getattr(ScenarioCharacterShapes, data.get('Shape', 0)), password)
    ScenarioCharacterNameExcel.Start(builder)
    ScenarioCharacterNameExcel.AddCharacterName(builder, CharacterName_val)
    ScenarioCharacterNameExcel.AddProductionStep(builder, ProductionStep_val)
    ScenarioCharacterNameExcel.AddNameKR(builder, NameKR_off)
    ScenarioCharacterNameExcel.AddNicknameKR(builder, NicknameKR_off)
    ScenarioCharacterNameExcel.AddNameJP(builder, NameJP_off)
    ScenarioCharacterNameExcel.AddNicknameJP(builder, NicknameJP_off)
    ScenarioCharacterNameExcel.AddShape(builder, Shape_val)
    ScenarioCharacterNameExcel.AddSpinePrefabName(builder, SpinePrefabName_off)
    ScenarioCharacterNameExcel.AddSmallPortrait(builder, SmallPortrait_off)
    return ScenarioCharacterNameExcel.End(builder)

def pack_ScenarioCharacterSituationSetExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioCharacterSituationSet") if encrypt else None
    Face_off = builder.CreateString(encrypt_string(data.get('Face', ''), password))
    Behavior_off = builder.CreateString(encrypt_string(data.get('Behavior', ''), password))
    Action_off = builder.CreateString(encrypt_string(data.get('Action', ''), password))
    Shape_off = builder.CreateString(encrypt_string(data.get('Shape', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    Effect_val = convert_uint(data.get('Effect', 0), password)
    Emotion_val = convert_uint(data.get('Emotion', 0), password)
    ScenarioCharacterSituationSetExcel.Start(builder)
    ScenarioCharacterSituationSetExcel.AddName(builder, Name_val)
    ScenarioCharacterSituationSetExcel.AddFace(builder, Face_off)
    ScenarioCharacterSituationSetExcel.AddBehavior(builder, Behavior_off)
    ScenarioCharacterSituationSetExcel.AddAction(builder, Action_off)
    ScenarioCharacterSituationSetExcel.AddShape(builder, Shape_off)
    ScenarioCharacterSituationSetExcel.AddEffect(builder, Effect_val)
    ScenarioCharacterSituationSetExcel.AddEmotion(builder, Emotion_val)
    return ScenarioCharacterSituationSetExcel.End(builder)

def pack_ScenarioContentCollectionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioContentCollection") if encrypt else None
    EmblemResource_off = builder.CreateString(encrypt_string(data.get('EmblemResource', ''), password))
    ThumbResource_off = builder.CreateString(encrypt_string(data.get('ThumbResource', ''), password))
    FullResource_off = builder.CreateString(encrypt_string(data.get('FullResource', ''), password))
    SubNameLocalizeCodeId_off = builder.CreateString(encrypt_string(data.get('SubNameLocalizeCodeId', ''), password))
    UnlockConditionParameter_vec = 0
    if 'UnlockConditionParameter' in data:
        UnlockConditionParameter_items = data['UnlockConditionParameter']
        ScenarioContentCollectionExcel.StartUnlockConditionParameterVector(builder, len(UnlockConditionParameter_items))
        for item in reversed(UnlockConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        UnlockConditionParameter_vec = builder.EndVector(len(UnlockConditionParameter_items))
    Id_val = convert_long(data.get('Id', 0), password)
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    UnlockConditionType_val = convert_int(getattr(CollectionUnlockType, data.get('UnlockConditionType', 0)), password)
    MultipleConditionCheckType_val = convert_int(getattr(MultipleConditionCheckType, data.get('MultipleConditionCheckType', 0)), password)
    UnlockConditionCount_val = convert_long(data.get('UnlockConditionCount', 0), password)
    IsObject_val = data.get('IsObject', 0)
    IsHorizon_val = data.get('IsHorizon', 0)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    ScenarioContentCollectionExcel.Start(builder)
    ScenarioContentCollectionExcel.AddId(builder, Id_val)
    ScenarioContentCollectionExcel.AddGroupId(builder, GroupId_val)
    ScenarioContentCollectionExcel.AddUnlockConditionType(builder, UnlockConditionType_val)
    ScenarioContentCollectionExcel.AddUnlockConditionParameter(builder, UnlockConditionParameter_vec)
    ScenarioContentCollectionExcel.AddMultipleConditionCheckType(builder, MultipleConditionCheckType_val)
    ScenarioContentCollectionExcel.AddUnlockConditionCount(builder, UnlockConditionCount_val)
    ScenarioContentCollectionExcel.AddIsObject(builder, IsObject_val)
    ScenarioContentCollectionExcel.AddIsHorizon(builder, IsHorizon_val)
    ScenarioContentCollectionExcel.AddEmblemResource(builder, EmblemResource_off)
    ScenarioContentCollectionExcel.AddThumbResource(builder, ThumbResource_off)
    ScenarioContentCollectionExcel.AddFullResource(builder, FullResource_off)
    ScenarioContentCollectionExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    ScenarioContentCollectionExcel.AddSubNameLocalizeCodeId(builder, SubNameLocalizeCodeId_off)
    return ScenarioContentCollectionExcel.End(builder)

def pack_ScenarioEffectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioEffect") if encrypt else None
    EffectName_off = builder.CreateString(encrypt_string(data.get('EffectName', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    ScenarioEffectExcel.Start(builder)
    ScenarioEffectExcel.AddEffectName(builder, EffectName_off)
    ScenarioEffectExcel.AddName(builder, Name_val)
    return ScenarioEffectExcel.End(builder)

def pack_ScenarioModeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioMode") if encrypt else None
    ExposedTime_off = builder.CreateString(encrypt_string(data.get('ExposedTime', ''), password))
    EventIconParcelPath_off = builder.CreateString(encrypt_string(data.get('EventIconParcelPath', ''), password))
    CompleteReportEventName_off = builder.CreateString(encrypt_string(data.get('CompleteReportEventName', ''), password))
    FrontScenarioGroupId_vec = 0
    if 'FrontScenarioGroupId' in data:
        FrontScenarioGroupId_items = data['FrontScenarioGroupId']
        ScenarioModeExcel.StartFrontScenarioGroupIdVector(builder, len(FrontScenarioGroupId_items))
        for item in reversed(FrontScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        FrontScenarioGroupId_vec = builder.EndVector(len(FrontScenarioGroupId_items))
    BackScenarioGroupId_vec = 0
    if 'BackScenarioGroupId' in data:
        BackScenarioGroupId_items = data['BackScenarioGroupId']
        ScenarioModeExcel.StartBackScenarioGroupIdVector(builder, len(BackScenarioGroupId_items))
        for item in reversed(BackScenarioGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        BackScenarioGroupId_vec = builder.EndVector(len(BackScenarioGroupId_items))
    ClearedModeId_vec = 0
    if 'ClearedModeId' in data:
        ClearedModeId_items = data['ClearedModeId']
        ScenarioModeExcel.StartClearedModeIdVector(builder, len(ClearedModeId_items))
        for item in reversed(ClearedModeId_items):
            builder.PrependInt64(convert_long(item, password))
        ClearedModeId_vec = builder.EndVector(len(ClearedModeId_items))
    ModeId_val = convert_long(data.get('ModeId', 0), password)
    ModeType_val = convert_int(getattr(ScenarioModeTypes, data.get('ModeType', 0)), password)
    SubType_val = convert_int(getattr(ScenarioModeSubTypes, data.get('SubType', 0)), password)
    VolumeId_val = convert_long(data.get('VolumeId', 0), password)
    ChapterId_val = convert_long(data.get('ChapterId', 0), password)
    EpisodeId_val = convert_long(data.get('EpisodeId', 0), password)
    Hide_val = data.get('Hide', 0)
    Open_val = data.get('Open', 0)
    IsContinue_val = data.get('IsContinue', 0)
    EpisodeContinueModeId_val = convert_long(data.get('EpisodeContinueModeId', 0), password)
    StrategyId_val = convert_long(data.get('StrategyId', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    IsDefeatBattle_val = data.get('IsDefeatBattle', 0)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    ScenarioModeRewardId_val = convert_long(data.get('ScenarioModeRewardId', 0), password)
    IsScenarioSpecialReward_val = data.get('IsScenarioSpecialReward', 0)
    AccountLevelLimit_val = convert_long(data.get('AccountLevelLimit', 0), password)
    ClearedStageId_val = convert_long(data.get('ClearedStageId', 0), password)
    NeedClub_val = convert_int(getattr(Club, data.get('NeedClub', 0)), password)
    NeedClubStudentCount_val = convert_int(data.get('NeedClubStudentCount', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EventContentType_val = convert_int(getattr(EventContentType, data.get('EventContentType', 0)), password)
    EventContentCondition_val = convert_long(data.get('EventContentCondition', 0), password)
    EventContentConditionGroup_val = convert_long(data.get('EventContentConditionGroup', 0), password)
    MapDifficulty_val = convert_int(getattr(StageDifficulty, data.get('MapDifficulty', 0)), password)
    StepIndex_val = convert_int(data.get('StepIndex', 0), password)
    RecommendLevel_val = convert_int(data.get('RecommendLevel', 0), password)
    EventBannerTitle_val = convert_uint(data.get('EventBannerTitle', 0), password)
    Lof_val = data.get('Lof', 0)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    CollectionGroupId_val = convert_long(data.get('CollectionGroupId', 0), password)
    ScenarioModeExcel.Start(builder)
    ScenarioModeExcel.AddModeId(builder, ModeId_val)
    ScenarioModeExcel.AddModeType(builder, ModeType_val)
    ScenarioModeExcel.AddSubType(builder, SubType_val)
    ScenarioModeExcel.AddVolumeId(builder, VolumeId_val)
    ScenarioModeExcel.AddChapterId(builder, ChapterId_val)
    ScenarioModeExcel.AddEpisodeId(builder, EpisodeId_val)
    ScenarioModeExcel.AddExposedTime(builder, ExposedTime_off)
    ScenarioModeExcel.AddHide(builder, Hide_val)
    ScenarioModeExcel.AddOpen(builder, Open_val)
    ScenarioModeExcel.AddIsContinue(builder, IsContinue_val)
    ScenarioModeExcel.AddEpisodeContinueModeId(builder, EpisodeContinueModeId_val)
    ScenarioModeExcel.AddFrontScenarioGroupId(builder, FrontScenarioGroupId_vec)
    ScenarioModeExcel.AddStrategyId(builder, StrategyId_val)
    ScenarioModeExcel.AddGroundId(builder, GroundId_val)
    ScenarioModeExcel.AddIsDefeatBattle(builder, IsDefeatBattle_val)
    ScenarioModeExcel.AddBattleDuration(builder, BattleDuration_val)
    ScenarioModeExcel.AddBackScenarioGroupId(builder, BackScenarioGroupId_vec)
    ScenarioModeExcel.AddClearedModeId(builder, ClearedModeId_vec)
    ScenarioModeExcel.AddScenarioModeRewardId(builder, ScenarioModeRewardId_val)
    ScenarioModeExcel.AddIsScenarioSpecialReward(builder, IsScenarioSpecialReward_val)
    ScenarioModeExcel.AddAccountLevelLimit(builder, AccountLevelLimit_val)
    ScenarioModeExcel.AddClearedStageId(builder, ClearedStageId_val)
    ScenarioModeExcel.AddNeedClub(builder, NeedClub_val)
    ScenarioModeExcel.AddNeedClubStudentCount(builder, NeedClubStudentCount_val)
    ScenarioModeExcel.AddEventContentId(builder, EventContentId_val)
    ScenarioModeExcel.AddEventContentType(builder, EventContentType_val)
    ScenarioModeExcel.AddEventContentCondition(builder, EventContentCondition_val)
    ScenarioModeExcel.AddEventContentConditionGroup(builder, EventContentConditionGroup_val)
    ScenarioModeExcel.AddMapDifficulty(builder, MapDifficulty_val)
    ScenarioModeExcel.AddStepIndex(builder, StepIndex_val)
    ScenarioModeExcel.AddRecommendLevel(builder, RecommendLevel_val)
    ScenarioModeExcel.AddEventIconParcelPath(builder, EventIconParcelPath_off)
    ScenarioModeExcel.AddEventBannerTitle(builder, EventBannerTitle_val)
    ScenarioModeExcel.AddLof(builder, Lof_val)
    ScenarioModeExcel.AddStageTopography(builder, StageTopography_val)
    ScenarioModeExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    ScenarioModeExcel.AddCompleteReportEventName(builder, CompleteReportEventName_off)
    ScenarioModeExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    ScenarioModeExcel.AddCollectionGroupId(builder, CollectionGroupId_val)
    return ScenarioModeExcel.End(builder)

def pack_ScenarioModeRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioModeReward") if encrypt else None
    ScenarioModeRewardId_val = convert_long(data.get('ScenarioModeRewardId', 0), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardProb_val = convert_int(data.get('RewardProb', 0), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_int(data.get('RewardParcelAmount', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    ScenarioModeRewardExcel.Start(builder)
    ScenarioModeRewardExcel.AddScenarioModeRewardId(builder, ScenarioModeRewardId_val)
    ScenarioModeRewardExcel.AddRewardTag(builder, RewardTag_val)
    ScenarioModeRewardExcel.AddRewardProb(builder, RewardProb_val)
    ScenarioModeRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    ScenarioModeRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    ScenarioModeRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    ScenarioModeRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return ScenarioModeRewardExcel.End(builder)

def pack_ScenarioResourceInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioResourceInfo") if encrypt else None
    AudioName_off = builder.CreateString(encrypt_string(data.get('AudioName', ''), password))
    SpinePath_off = builder.CreateString(encrypt_string(data.get('SpinePath', ''), password))
    LobbyAniPath_off = builder.CreateString(encrypt_string(data.get('LobbyAniPath', ''), password))
    MovieCGPath_off = builder.CreateString(encrypt_string(data.get('MovieCGPath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    ScenarioModeId_val = convert_long(data.get('ScenarioModeId', 0), password)
    PriorityOrder_val = convert_long(data.get('PriorityOrder', 0), password)
    PVDisplayOrder_val = convert_long(data.get('PVDisplayOrder', 0), password)
    VideoId_val = convert_long(data.get('VideoId', 0), password)
    BgmId_val = convert_long(data.get('BgmId', 0), password)
    Ratio_val = convert_int(data.get('Ratio', 0), password)
    LocalizeId_val = convert_uint(data.get('LocalizeId', 0), password)
    ScenarioResourceInfoExcel.Start(builder)
    ScenarioResourceInfoExcel.AddId(builder, Id_val)
    ScenarioResourceInfoExcel.AddScenarioModeId(builder, ScenarioModeId_val)
    ScenarioResourceInfoExcel.AddPriorityOrder(builder, PriorityOrder_val)
    ScenarioResourceInfoExcel.AddPVDisplayOrder(builder, PVDisplayOrder_val)
    ScenarioResourceInfoExcel.AddVideoId(builder, VideoId_val)
    ScenarioResourceInfoExcel.AddBgmId(builder, BgmId_val)
    ScenarioResourceInfoExcel.AddAudioName(builder, AudioName_off)
    ScenarioResourceInfoExcel.AddSpinePath(builder, SpinePath_off)
    ScenarioResourceInfoExcel.AddRatio(builder, Ratio_val)
    ScenarioResourceInfoExcel.AddLobbyAniPath(builder, LobbyAniPath_off)
    ScenarioResourceInfoExcel.AddMovieCGPath(builder, MovieCGPath_off)
    ScenarioResourceInfoExcel.AddLocalizeId(builder, LocalizeId_val)
    return ScenarioResourceInfoExcel.End(builder)

def pack_ScenarioScriptExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioScript") if encrypt else None
    Sound_off = builder.CreateString(encrypt_string(data.get('Sound', ''), password))
    PopupFileName_off = builder.CreateString(encrypt_string(data.get('PopupFileName', ''), password))
    ScriptKr_off = builder.CreateString(encrypt_string(data.get('ScriptKr', ''), password))
    TextJp_off = builder.CreateString(encrypt_string(data.get('TextJp', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    SelectionGroup_val = convert_long(data.get('SelectionGroup', 0), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    Transition_val = convert_uint(data.get('Transition', 0), password)
    BGName_val = convert_uint(data.get('BGName', 0), password)
    BGEffect_val = convert_uint(data.get('BGEffect', 0), password)
    VoiceId_val = convert_uint(data.get('VoiceId', 0), password)
    ScenarioScriptExcel.Start(builder)
    ScenarioScriptExcel.AddGroupId(builder, GroupId_val)
    ScenarioScriptExcel.AddSelectionGroup(builder, SelectionGroup_val)
    ScenarioScriptExcel.AddBGMId(builder, BGMId_val)
    ScenarioScriptExcel.AddSound(builder, Sound_off)
    ScenarioScriptExcel.AddTransition(builder, Transition_val)
    ScenarioScriptExcel.AddBGName(builder, BGName_val)
    ScenarioScriptExcel.AddBGEffect(builder, BGEffect_val)
    ScenarioScriptExcel.AddPopupFileName(builder, PopupFileName_off)
    ScenarioScriptExcel.AddScriptKr(builder, ScriptKr_off)
    ScenarioScriptExcel.AddTextJp(builder, TextJp_off)
    ScenarioScriptExcel.AddVoiceId(builder, VoiceId_val)
    return ScenarioScriptExcel.End(builder)

def pack_ScenarioTransitionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ScenarioTransition") if encrypt else None
    TransitionOut_off = builder.CreateString(encrypt_string(data.get('TransitionOut', ''), password))
    TransitionOutResource_off = builder.CreateString(encrypt_string(data.get('TransitionOutResource', ''), password))
    TransitionIn_off = builder.CreateString(encrypt_string(data.get('TransitionIn', ''), password))
    TransitionInResource_off = builder.CreateString(encrypt_string(data.get('TransitionInResource', ''), password))
    Name_val = convert_uint(data.get('Name', 0), password)
    TransitionOutDuration_val = convert_long(data.get('TransitionOutDuration', 0), password)
    TransitionInDuration_val = convert_long(data.get('TransitionInDuration', 0), password)
    ScenarioTransitionExcel.Start(builder)
    ScenarioTransitionExcel.AddName(builder, Name_val)
    ScenarioTransitionExcel.AddTransitionOut(builder, TransitionOut_off)
    ScenarioTransitionExcel.AddTransitionOutDuration(builder, TransitionOutDuration_val)
    ScenarioTransitionExcel.AddTransitionOutResource(builder, TransitionOutResource_off)
    ScenarioTransitionExcel.AddTransitionIn(builder, TransitionIn_off)
    ScenarioTransitionExcel.AddTransitionInDuration(builder, TransitionInDuration_val)
    ScenarioTransitionExcel.AddTransitionInResource(builder, TransitionInResource_off)
    return ScenarioTransitionExcel.End(builder)

def pack_SchoolDungeonRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SchoolDungeonReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DungeonType_val = convert_int(getattr(SchoolDungeonType, data.get('DungeonType', 0)), password)
    RewardTag_val = convert_int(getattr(RewardTag, data.get('RewardTag', 0)), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    RewardParcelProbability_val = convert_long(data.get('RewardParcelProbability', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    SchoolDungeonRewardExcel.Start(builder)
    SchoolDungeonRewardExcel.AddGroupId(builder, GroupId_val)
    SchoolDungeonRewardExcel.AddDungeonType(builder, DungeonType_val)
    SchoolDungeonRewardExcel.AddRewardTag(builder, RewardTag_val)
    SchoolDungeonRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    SchoolDungeonRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    SchoolDungeonRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    SchoolDungeonRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability_val)
    SchoolDungeonRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    return SchoolDungeonRewardExcel.End(builder)

def pack_SchoolDungeonStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SchoolDungeonStage") if encrypt else None
    StageEnterCostType_vec = 0
    if 'StageEnterCostType' in data:
        StageEnterCostType_items = data['StageEnterCostType']
        SchoolDungeonStageExcel.StartStageEnterCostTypeVector(builder, len(StageEnterCostType_items))
        for item in reversed(StageEnterCostType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        StageEnterCostType_vec = builder.EndVector(len(StageEnterCostType_items))
    StageEnterCostId_vec = 0
    if 'StageEnterCostId' in data:
        StageEnterCostId_items = data['StageEnterCostId']
        SchoolDungeonStageExcel.StartStageEnterCostIdVector(builder, len(StageEnterCostId_items))
        for item in reversed(StageEnterCostId_items):
            builder.PrependInt64(convert_long(item, password))
        StageEnterCostId_vec = builder.EndVector(len(StageEnterCostId_items))
    StageEnterCostAmount_vec = 0
    if 'StageEnterCostAmount' in data:
        StageEnterCostAmount_items = data['StageEnterCostAmount']
        SchoolDungeonStageExcel.StartStageEnterCostAmountVector(builder, len(StageEnterCostAmount_items))
        for item in reversed(StageEnterCostAmount_items):
            builder.PrependInt64(convert_long(item, password))
        StageEnterCostAmount_vec = builder.EndVector(len(StageEnterCostAmount_items))
    StageEnterCostMinimumAmount_vec = 0
    if 'StageEnterCostMinimumAmount' in data:
        StageEnterCostMinimumAmount_items = data['StageEnterCostMinimumAmount']
        SchoolDungeonStageExcel.StartStageEnterCostMinimumAmountVector(builder, len(StageEnterCostMinimumAmount_items))
        for item in reversed(StageEnterCostMinimumAmount_items):
            builder.PrependInt64(convert_long(item, password))
        StageEnterCostMinimumAmount_vec = builder.EndVector(len(StageEnterCostMinimumAmount_items))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        SchoolDungeonStageExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        SchoolDungeonStageExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    StageId_val = convert_long(data.get('StageId', 0), password)
    DungeonType_val = convert_int(getattr(SchoolDungeonType, data.get('DungeonType', 0)), password)
    Difficulty_val = convert_int(data.get('Difficulty', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    GroundId_val = convert_int(data.get('GroundId', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_long(data.get('RecommandLevel', 0), password)
    StageRewardId_val = convert_long(data.get('StageRewardId', 0), password)
    PlayTimeLimitInSeconds_val = convert_long(data.get('PlayTimeLimitInSeconds', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    SchoolDungeonStageExcel.Start(builder)
    SchoolDungeonStageExcel.AddStageId(builder, StageId_val)
    SchoolDungeonStageExcel.AddDungeonType(builder, DungeonType_val)
    SchoolDungeonStageExcel.AddDifficulty(builder, Difficulty_val)
    SchoolDungeonStageExcel.AddBattleDuration(builder, BattleDuration_val)
    SchoolDungeonStageExcel.AddPrevStageId(builder, PrevStageId_val)
    SchoolDungeonStageExcel.AddStageEnterCostType(builder, StageEnterCostType_vec)
    SchoolDungeonStageExcel.AddStageEnterCostId(builder, StageEnterCostId_vec)
    SchoolDungeonStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_vec)
    SchoolDungeonStageExcel.AddStageEnterCostMinimumAmount(builder, StageEnterCostMinimumAmount_vec)
    SchoolDungeonStageExcel.AddGroundId(builder, GroundId_val)
    SchoolDungeonStageExcel.AddStarGoal(builder, StarGoal_vec)
    SchoolDungeonStageExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    SchoolDungeonStageExcel.AddStageTopography(builder, StageTopography_val)
    SchoolDungeonStageExcel.AddRecommandLevel(builder, RecommandLevel_val)
    SchoolDungeonStageExcel.AddStageRewardId(builder, StageRewardId_val)
    SchoolDungeonStageExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds_val)
    SchoolDungeonStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return SchoolDungeonStageExcel.End(builder)

def pack_ServiceActionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ServiceAction") if encrypt else None
    ServiceActionType_val = convert_int(getattr(ServiceActionType, data.get('ServiceActionType', 0)), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    GoodsId_val = convert_long(data.get('GoodsId', 0), password)
    ServiceActionExcel.Start(builder)
    ServiceActionExcel.AddServiceActionType(builder, ServiceActionType_val)
    ServiceActionExcel.AddIsLegacy(builder, IsLegacy_val)
    ServiceActionExcel.AddGoodsId(builder, GoodsId_val)
    return ServiceActionExcel.End(builder)

def pack_ShiftingCraftRecipeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShiftingCraftRecipe") if encrypt else None
    IngredientTag_vec = 0
    if 'IngredientTag' in data:
        IngredientTag_items = data['IngredientTag']
        ShiftingCraftRecipeExcel.StartIngredientTagVector(builder, len(IngredientTag_items))
        for item in reversed(IngredientTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        IngredientTag_vec = builder.EndVector(len(IngredientTag_items))
    Id_val = convert_long(data.get('Id', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    NotificationId_val = convert_int(data.get('NotificationId', 0), password)
    ResultParcel_val = convert_int(getattr(ParcelType, data.get('ResultParcel', 0)), password)
    ResultId_val = convert_long(data.get('ResultId', 0), password)
    ResultAmount_val = convert_long(data.get('ResultAmount', 0), password)
    RequireItemId_val = convert_long(data.get('RequireItemId', 0), password)
    RequireItemAmount_val = convert_long(data.get('RequireItemAmount', 0), password)
    RequireGold_val = convert_long(data.get('RequireGold', 0), password)
    IngredientExp_val = convert_long(data.get('IngredientExp', 0), password)
    ShiftingCraftRecipeExcel.Start(builder)
    ShiftingCraftRecipeExcel.AddId(builder, Id_val)
    ShiftingCraftRecipeExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShiftingCraftRecipeExcel.AddNotificationId(builder, NotificationId_val)
    ShiftingCraftRecipeExcel.AddResultParcel(builder, ResultParcel_val)
    ShiftingCraftRecipeExcel.AddResultId(builder, ResultId_val)
    ShiftingCraftRecipeExcel.AddResultAmount(builder, ResultAmount_val)
    ShiftingCraftRecipeExcel.AddRequireItemId(builder, RequireItemId_val)
    ShiftingCraftRecipeExcel.AddRequireItemAmount(builder, RequireItemAmount_val)
    ShiftingCraftRecipeExcel.AddRequireGold(builder, RequireGold_val)
    ShiftingCraftRecipeExcel.AddIngredientTag(builder, IngredientTag_vec)
    ShiftingCraftRecipeExcel.AddIngredientExp(builder, IngredientExp_val)
    return ShiftingCraftRecipeExcel.End(builder)

def pack_ShopCashExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopCash") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    SalePeriodFrom_off = builder.CreateString(encrypt_string(data.get('SalePeriodFrom', ''), password))
    SalePeriodTo_off = builder.CreateString(encrypt_string(data.get('SalePeriodTo', ''), password))
    PurchaseReportEventName_off = builder.CreateString(encrypt_string(data.get('PurchaseReportEventName', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    CashProductId_val = convert_long(data.get('CashProductId', 0), password)
    PackageType_val = convert_int(getattr(PurchaseSourceType, data.get('PackageType', 0)), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    RenewalDisplayOrder_val = convert_long(data.get('RenewalDisplayOrder', 0), password)
    CategoryType_val = convert_int(getattr(ProductCategory, data.get('CategoryType', 0)), password)
    DisplayTag_val = convert_int(getattr(ProductDisplayTag, data.get('DisplayTag', 0)), password)
    PeriodTag_val = data.get('PeriodTag', 0)
    AccountLevelLimit_val = convert_long(data.get('AccountLevelLimit', 0), password)
    AccountLevelHide_val = data.get('AccountLevelHide', 0)
    ClearMissionLimit_val = convert_long(data.get('ClearMissionLimit', 0), password)
    ClearMissionHide_val = data.get('ClearMissionHide', 0)
    ShopCashExcel.Start(builder)
    ShopCashExcel.AddId(builder, Id_val)
    ShopCashExcel.AddCashProductId(builder, CashProductId_val)
    ShopCashExcel.AddPackageType(builder, PackageType_val)
    ShopCashExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    ShopCashExcel.AddIconPath(builder, IconPath_off)
    ShopCashExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopCashExcel.AddRenewalDisplayOrder(builder, RenewalDisplayOrder_val)
    ShopCashExcel.AddCategoryType(builder, CategoryType_val)
    ShopCashExcel.AddDisplayTag(builder, DisplayTag_val)
    ShopCashExcel.AddSalePeriodFrom(builder, SalePeriodFrom_off)
    ShopCashExcel.AddSalePeriodTo(builder, SalePeriodTo_off)
    ShopCashExcel.AddPeriodTag(builder, PeriodTag_val)
    ShopCashExcel.AddAccountLevelLimit(builder, AccountLevelLimit_val)
    ShopCashExcel.AddAccountLevelHide(builder, AccountLevelHide_val)
    ShopCashExcel.AddClearMissionLimit(builder, ClearMissionLimit_val)
    ShopCashExcel.AddClearMissionHide(builder, ClearMissionHide_val)
    ShopCashExcel.AddPurchaseReportEventName(builder, PurchaseReportEventName_off)
    return ShopCashExcel.End(builder)

def pack_ShopCashScenarioResourceInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopCashScenarioResourceInfo") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    ScenarioResrouceInfoId_val = convert_long(data.get('ScenarioResrouceInfoId', 0), password)
    ShopCashId_val = convert_long(data.get('ShopCashId', 0), password)
    ShopCashScenarioResourceInfoExcel.Start(builder)
    ShopCashScenarioResourceInfoExcel.AddScenarioResrouceInfoId(builder, ScenarioResrouceInfoId_val)
    ShopCashScenarioResourceInfoExcel.AddShopCashId(builder, ShopCashId_val)
    ShopCashScenarioResourceInfoExcel.AddIconPath(builder, IconPath_off)
    return ShopCashScenarioResourceInfoExcel.End(builder)

def pack_ShopExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Shop") if encrypt else None
    SalePeriodFrom_off = builder.CreateString(encrypt_string(data.get('SalePeriodFrom', ''), password))
    SalePeriodTo_off = builder.CreateString(encrypt_string(data.get('SalePeriodTo', ''), password))
    BuyReportEventName_off = builder.CreateString(encrypt_string(data.get('BuyReportEventName', ''), password))
    GoodsId_vec = 0
    if 'GoodsId' in data:
        GoodsId_items = data['GoodsId']
        ShopExcel.StartGoodsIdVector(builder, len(GoodsId_items))
        for item in reversed(GoodsId_items):
            builder.PrependInt64(convert_long(item, password))
        GoodsId_vec = builder.EndVector(len(GoodsId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    UseBigPopup_val = data.get('UseBigPopup', 0)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    PurchaseCooltimeMin_val = convert_long(data.get('PurchaseCooltimeMin', 0), password)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    PurchaseCountResetType_val = convert_int(getattr(PurchaseCountResetType, data.get('PurchaseCountResetType', 0)), password)
    RestrictBuyWhenInventoryFull_val = data.get('RestrictBuyWhenInventoryFull', 0)
    DisplayTag_val = convert_int(getattr(ProductDisplayTag, data.get('DisplayTag', 0)), password)
    ShopUpdateGroupId_val = convert_int(data.get('ShopUpdateGroupId', 0), password)
    ShopExcel.Start(builder)
    ShopExcel.AddId(builder, Id_val)
    ShopExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    ShopExcel.AddCategoryType(builder, CategoryType_val)
    ShopExcel.AddIsLegacy(builder, IsLegacy_val)
    ShopExcel.AddUseBigPopup(builder, UseBigPopup_val)
    ShopExcel.AddGoodsId(builder, GoodsId_vec)
    ShopExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopExcel.AddSalePeriodFrom(builder, SalePeriodFrom_off)
    ShopExcel.AddSalePeriodTo(builder, SalePeriodTo_off)
    ShopExcel.AddPurchaseCooltimeMin(builder, PurchaseCooltimeMin_val)
    ShopExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    ShopExcel.AddPurchaseCountResetType(builder, PurchaseCountResetType_val)
    ShopExcel.AddBuyReportEventName(builder, BuyReportEventName_off)
    ShopExcel.AddRestrictBuyWhenInventoryFull(builder, RestrictBuyWhenInventoryFull_val)
    ShopExcel.AddDisplayTag(builder, DisplayTag_val)
    ShopExcel.AddShopUpdateGroupId(builder, ShopUpdateGroupId_val)
    return ShopExcel.End(builder)

def pack_ShopFilterClassifiedExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopFilterClassified") if encrypt else None
    Id_val = convert_long(data.get('Id', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    ConsumeParcelType_val = convert_int(getattr(ParcelType, data.get('ConsumeParcelType', 0)), password)
    ConsumeParcelId_val = convert_long(data.get('ConsumeParcelId', 0), password)
    ShopFilterType_val = convert_int(getattr(ShopFilterType, data.get('ShopFilterType', 0)), password)
    GoodsId_val = convert_long(data.get('GoodsId', 0), password)
    ShopFilterClassifiedExcel.Start(builder)
    ShopFilterClassifiedExcel.AddId(builder, Id_val)
    ShopFilterClassifiedExcel.AddCategoryType(builder, CategoryType_val)
    ShopFilterClassifiedExcel.AddConsumeParcelType(builder, ConsumeParcelType_val)
    ShopFilterClassifiedExcel.AddConsumeParcelId(builder, ConsumeParcelId_val)
    ShopFilterClassifiedExcel.AddShopFilterType(builder, ShopFilterType_val)
    ShopFilterClassifiedExcel.AddGoodsId(builder, GoodsId_val)
    return ShopFilterClassifiedExcel.End(builder)

def pack_ShopFreeRecruitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopFreeRecruit") if encrypt else None
    FreeRecruitPeriodFrom_off = builder.CreateString(encrypt_string(data.get('FreeRecruitPeriodFrom', ''), password))
    FreeRecruitPeriodTo_off = builder.CreateString(encrypt_string(data.get('FreeRecruitPeriodTo', ''), password))
    FreeRecruitDecorationImagePath_off = builder.CreateString(encrypt_string(data.get('FreeRecruitDecorationImagePath', ''), password))
    ShopRecruitId_vec = 0
    if 'ShopRecruitId' in data:
        ShopRecruitId_items = data['ShopRecruitId']
        ShopFreeRecruitExcel.StartShopRecruitIdVector(builder, len(ShopRecruitId_items))
        for item in reversed(ShopRecruitId_items):
            builder.PrependInt64(convert_long(item, password))
        ShopRecruitId_vec = builder.EndVector(len(ShopRecruitId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    FreeRecruitType_val = convert_int(getattr(ShopFreeRecruitType, data.get('FreeRecruitType', 0)), password)
    TenRecruitCountOnly_val = data.get('TenRecruitCountOnly', 0)
    ShopFreeRecruitExcel.Start(builder)
    ShopFreeRecruitExcel.AddId(builder, Id_val)
    ShopFreeRecruitExcel.AddFreeRecruitPeriodFrom(builder, FreeRecruitPeriodFrom_off)
    ShopFreeRecruitExcel.AddFreeRecruitPeriodTo(builder, FreeRecruitPeriodTo_off)
    ShopFreeRecruitExcel.AddFreeRecruitType(builder, FreeRecruitType_val)
    ShopFreeRecruitExcel.AddFreeRecruitDecorationImagePath(builder, FreeRecruitDecorationImagePath_off)
    ShopFreeRecruitExcel.AddTenRecruitCountOnly(builder, TenRecruitCountOnly_val)
    ShopFreeRecruitExcel.AddShopRecruitId(builder, ShopRecruitId_vec)
    return ShopFreeRecruitExcel.End(builder)

def pack_ShopFreeRecruitPeriodExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopFreeRecruitPeriod") if encrypt else None
    IntervalDate_off = builder.CreateString(encrypt_string(data.get('IntervalDate', ''), password))
    ShopFreeRecruitId_val = convert_long(data.get('ShopFreeRecruitId', 0), password)
    ShopFreeRecruitIntervalId_val = convert_long(data.get('ShopFreeRecruitIntervalId', 0), password)
    FreeRecruitCount_val = convert_int(data.get('FreeRecruitCount', 0), password)
    ShopFreeRecruitPeriodExcel.Start(builder)
    ShopFreeRecruitPeriodExcel.AddShopFreeRecruitId(builder, ShopFreeRecruitId_val)
    ShopFreeRecruitPeriodExcel.AddShopFreeRecruitIntervalId(builder, ShopFreeRecruitIntervalId_val)
    ShopFreeRecruitPeriodExcel.AddIntervalDate(builder, IntervalDate_off)
    ShopFreeRecruitPeriodExcel.AddFreeRecruitCount(builder, FreeRecruitCount_val)
    return ShopFreeRecruitPeriodExcel.End(builder)

def pack_ShopInfoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopInfo") if encrypt else None
    OpenPeriodFrom_off = builder.CreateString(encrypt_string(data.get('OpenPeriodFrom', ''), password))
    OpenPeriodTo_off = builder.CreateString(encrypt_string(data.get('OpenPeriodTo', ''), password))
    RefreshPeriodBaseTime_off = builder.CreateString(encrypt_string(data.get('RefreshPeriodBaseTime', ''), password))
    ShopProductUpdateTime_off = builder.CreateString(encrypt_string(data.get('ShopProductUpdateTime', ''), password))
    CostParcelType_vec = 0
    if 'CostParcelType' in data:
        CostParcelType_items = data['CostParcelType']
        ShopInfoExcel.StartCostParcelTypeVector(builder, len(CostParcelType_items))
        for item in reversed(CostParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        CostParcelType_vec = builder.EndVector(len(CostParcelType_items))
    CostParcelId_vec = 0
    if 'CostParcelId' in data:
        CostParcelId_items = data['CostParcelId']
        ShopInfoExcel.StartCostParcelIdVector(builder, len(CostParcelId_items))
        for item in reversed(CostParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        CostParcelId_vec = builder.EndVector(len(CostParcelId_items))
    GoodsId_vec = 0
    if 'GoodsId' in data:
        GoodsId_items = data['GoodsId']
        ShopInfoExcel.StartGoodsIdVector(builder, len(GoodsId_items))
        for item in reversed(GoodsId_items):
            builder.PrependInt64(convert_long(item, password))
        GoodsId_vec = builder.EndVector(len(GoodsId_items))
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    IsRefresh_val = data.get('IsRefresh', 0)
    IsSoldOutDimmed_val = data.get('IsSoldOutDimmed', 0)
    AutoRefreshCoolTime_val = convert_long(data.get('AutoRefreshCoolTime', 0), password)
    ShopRefresherType_val = convert_int(getattr(ShopRefresherType, data.get('ShopRefresherType', 0)), password)
    ShopRefreshPeriodType_val = convert_int(getattr(ShopRefreshPeriodType, data.get('ShopRefreshPeriodType', 0)), password)
    RefreshAbleCount_val = convert_long(data.get('RefreshAbleCount', 0), password)
    DisplayParcelType_val = convert_int(getattr(ParcelType, data.get('DisplayParcelType', 0)), password)
    DisplayParcelId_val = convert_long(data.get('DisplayParcelId', 0), password)
    IsShopVisible_val = data.get('IsShopVisible', 0)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    ShopUpdateDate_val = convert_int(data.get('ShopUpdateDate', 0), password)
    ShopUpdateGroupId1_val = convert_int(data.get('ShopUpdateGroupId1', 0), password)
    ShopUpdateGroupId2_val = convert_int(data.get('ShopUpdateGroupId2', 0), password)
    ShopUpdateGroupId3_val = convert_int(data.get('ShopUpdateGroupId3', 0), password)
    ShopUpdateGroupId4_val = convert_int(data.get('ShopUpdateGroupId4', 0), password)
    ShopUpdateGroupId5_val = convert_int(data.get('ShopUpdateGroupId5', 0), password)
    ShopUpdateGroupId6_val = convert_int(data.get('ShopUpdateGroupId6', 0), password)
    ShopUpdateGroupId7_val = convert_int(data.get('ShopUpdateGroupId7', 0), password)
    ShopUpdateGroupId8_val = convert_int(data.get('ShopUpdateGroupId8', 0), password)
    ShopUpdateGroupId9_val = convert_int(data.get('ShopUpdateGroupId9', 0), password)
    ShopUpdateGroupId10_val = convert_int(data.get('ShopUpdateGroupId10', 0), password)
    ShopUpdateGroupId11_val = convert_int(data.get('ShopUpdateGroupId11', 0), password)
    ShopUpdateGroupId12_val = convert_int(data.get('ShopUpdateGroupId12', 0), password)
    ShopInfoExcel.Start(builder)
    ShopInfoExcel.AddCategoryType(builder, CategoryType_val)
    ShopInfoExcel.AddIsRefresh(builder, IsRefresh_val)
    ShopInfoExcel.AddIsSoldOutDimmed(builder, IsSoldOutDimmed_val)
    ShopInfoExcel.AddCostParcelType(builder, CostParcelType_vec)
    ShopInfoExcel.AddCostParcelId(builder, CostParcelId_vec)
    ShopInfoExcel.AddAutoRefreshCoolTime(builder, AutoRefreshCoolTime_val)
    ShopInfoExcel.AddShopRefresherType(builder, ShopRefresherType_val)
    ShopInfoExcel.AddShopRefreshPeriodType(builder, ShopRefreshPeriodType_val)
    ShopInfoExcel.AddRefreshAbleCount(builder, RefreshAbleCount_val)
    ShopInfoExcel.AddGoodsId(builder, GoodsId_vec)
    ShopInfoExcel.AddOpenPeriodFrom(builder, OpenPeriodFrom_off)
    ShopInfoExcel.AddOpenPeriodTo(builder, OpenPeriodTo_off)
    ShopInfoExcel.AddRefreshPeriodBaseTime(builder, RefreshPeriodBaseTime_off)
    ShopInfoExcel.AddShopProductUpdateTime(builder, ShopProductUpdateTime_off)
    ShopInfoExcel.AddDisplayParcelType(builder, DisplayParcelType_val)
    ShopInfoExcel.AddDisplayParcelId(builder, DisplayParcelId_val)
    ShopInfoExcel.AddIsShopVisible(builder, IsShopVisible_val)
    ShopInfoExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopInfoExcel.AddShopUpdateDate(builder, ShopUpdateDate_val)
    ShopInfoExcel.AddShopUpdateGroupId1(builder, ShopUpdateGroupId1_val)
    ShopInfoExcel.AddShopUpdateGroupId2(builder, ShopUpdateGroupId2_val)
    ShopInfoExcel.AddShopUpdateGroupId3(builder, ShopUpdateGroupId3_val)
    ShopInfoExcel.AddShopUpdateGroupId4(builder, ShopUpdateGroupId4_val)
    ShopInfoExcel.AddShopUpdateGroupId5(builder, ShopUpdateGroupId5_val)
    ShopInfoExcel.AddShopUpdateGroupId6(builder, ShopUpdateGroupId6_val)
    ShopInfoExcel.AddShopUpdateGroupId7(builder, ShopUpdateGroupId7_val)
    ShopInfoExcel.AddShopUpdateGroupId8(builder, ShopUpdateGroupId8_val)
    ShopInfoExcel.AddShopUpdateGroupId9(builder, ShopUpdateGroupId9_val)
    ShopInfoExcel.AddShopUpdateGroupId10(builder, ShopUpdateGroupId10_val)
    ShopInfoExcel.AddShopUpdateGroupId11(builder, ShopUpdateGroupId11_val)
    ShopInfoExcel.AddShopUpdateGroupId12(builder, ShopUpdateGroupId12_val)
    return ShopInfoExcel.End(builder)

def pack_ShopRecruitExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopRecruit") if encrypt else None
    GoodsDevName_off = builder.CreateString(encrypt_string(data.get('GoodsDevName', ''), password))
    GachaBannerPath_off = builder.CreateString(encrypt_string(data.get('GachaBannerPath', ''), password))
    SalePeriodFrom_off = builder.CreateString(encrypt_string(data.get('SalePeriodFrom', ''), password))
    SalePeriodTo_off = builder.CreateString(encrypt_string(data.get('SalePeriodTo', ''), password))
    VideoId_vec = 0
    if 'VideoId' in data:
        VideoId_items = data['VideoId']
        ShopRecruitExcel.StartVideoIdVector(builder, len(VideoId_items))
        for item in reversed(VideoId_items):
            builder.PrependInt64(convert_long(item, password))
        VideoId_vec = builder.EndVector(len(VideoId_items))
    InfoCharacterId_vec = 0
    if 'InfoCharacterId' in data:
        InfoCharacterId_items = data['InfoCharacterId']
        ShopRecruitExcel.StartInfoCharacterIdVector(builder, len(InfoCharacterId_items))
        for item in reversed(InfoCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        InfoCharacterId_vec = builder.EndVector(len(InfoCharacterId_items))
    Id_val = convert_long(data.get('Id', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    OneGachaGoodsId_val = convert_long(data.get('OneGachaGoodsId', 0), password)
    TenGachaGoodsId_val = convert_long(data.get('TenGachaGoodsId', 0), password)
    DisplayTag_val = convert_int(getattr(GachaDisplayTag, data.get('DisplayTag', 0)), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    LinkedRobbyBannerId_val = convert_long(data.get('LinkedRobbyBannerId', 0), password)
    SalePeriodVisible_val = data.get('SalePeriodVisible', 0)
    RecruitCoinId_val = convert_long(data.get('RecruitCoinId', 0), password)
    RecruitSellectionShopId_val = convert_long(data.get('RecruitSellectionShopId', 0), password)
    PurchaseCooltimeMin_val = convert_long(data.get('PurchaseCooltimeMin', 0), password)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    PurchaseCountResetType_val = convert_int(getattr(PurchaseCountResetType, data.get('PurchaseCountResetType', 0)), password)
    IsNewbie_val = data.get('IsNewbie', 0)
    IsSelectRecruit_val = data.get('IsSelectRecruit', 0)
    DirectPayInvisibleTokenId_val = convert_long(data.get('DirectPayInvisibleTokenId', 0), password)
    DirectPayAndroidShopCashId_val = convert_long(data.get('DirectPayAndroidShopCashId', 0), password)
    DirectPayAppleShopCashId_val = convert_long(data.get('DirectPayAppleShopCashId', 0), password)
    SelectAbleGachaGroupId_val = convert_long(data.get('SelectAbleGachaGroupId', 0), password)
    MaxSelectCharacterNum_val = convert_long(data.get('MaxSelectCharacterNum', 0), password)
    ShopRecruitExcel.Start(builder)
    ShopRecruitExcel.AddId(builder, Id_val)
    ShopRecruitExcel.AddCategoryType(builder, CategoryType_val)
    ShopRecruitExcel.AddIsLegacy(builder, IsLegacy_val)
    ShopRecruitExcel.AddOneGachaGoodsId(builder, OneGachaGoodsId_val)
    ShopRecruitExcel.AddTenGachaGoodsId(builder, TenGachaGoodsId_val)
    ShopRecruitExcel.AddGoodsDevName(builder, GoodsDevName_off)
    ShopRecruitExcel.AddDisplayTag(builder, DisplayTag_val)
    ShopRecruitExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopRecruitExcel.AddGachaBannerPath(builder, GachaBannerPath_off)
    ShopRecruitExcel.AddVideoId(builder, VideoId_vec)
    ShopRecruitExcel.AddLinkedRobbyBannerId(builder, LinkedRobbyBannerId_val)
    ShopRecruitExcel.AddInfoCharacterId(builder, InfoCharacterId_vec)
    ShopRecruitExcel.AddSalePeriodVisible(builder, SalePeriodVisible_val)
    ShopRecruitExcel.AddSalePeriodFrom(builder, SalePeriodFrom_off)
    ShopRecruitExcel.AddSalePeriodTo(builder, SalePeriodTo_off)
    ShopRecruitExcel.AddRecruitCoinId(builder, RecruitCoinId_val)
    ShopRecruitExcel.AddRecruitSellectionShopId(builder, RecruitSellectionShopId_val)
    ShopRecruitExcel.AddPurchaseCooltimeMin(builder, PurchaseCooltimeMin_val)
    ShopRecruitExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    ShopRecruitExcel.AddPurchaseCountResetType(builder, PurchaseCountResetType_val)
    ShopRecruitExcel.AddIsNewbie(builder, IsNewbie_val)
    ShopRecruitExcel.AddIsSelectRecruit(builder, IsSelectRecruit_val)
    ShopRecruitExcel.AddDirectPayInvisibleTokenId(builder, DirectPayInvisibleTokenId_val)
    ShopRecruitExcel.AddDirectPayAndroidShopCashId(builder, DirectPayAndroidShopCashId_val)
    ShopRecruitExcel.AddDirectPayAppleShopCashId(builder, DirectPayAppleShopCashId_val)
    ShopRecruitExcel.AddSelectAbleGachaGroupId(builder, SelectAbleGachaGroupId_val)
    ShopRecruitExcel.AddMaxSelectCharacterNum(builder, MaxSelectCharacterNum_val)
    return ShopRecruitExcel.End(builder)

def pack_ShopRefreshExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopRefresh") if encrypt else None
    BuyReportEventName_off = builder.CreateString(encrypt_string(data.get('BuyReportEventName', ''), password))
    ProductUpdateTime_off = builder.CreateString(encrypt_string(data.get('ProductUpdateTime', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeEtcId_val = convert_uint(data.get('LocalizeEtcId', 0), password)
    IsLegacy_val = data.get('IsLegacy', 0)
    GoodsId_val = convert_long(data.get('GoodsId', 0), password)
    IsBundle_val = data.get('IsBundle', 0)
    ShopPurchasePopupType_val = convert_int(getattr(ShopPurchasePopupType, data.get('ShopPurchasePopupType', 0)), password)
    VisibleAmount_val = convert_long(data.get('VisibleAmount', 0), password)
    PurchaseCountLimit_val = convert_long(data.get('PurchaseCountLimit', 0), password)
    DisplayOrder_val = convert_long(data.get('DisplayOrder', 0), password)
    CategoryType_val = convert_int(getattr(ShopCategoryType, data.get('CategoryType', 0)), password)
    RefreshGroup_val = convert_int(data.get('RefreshGroup', 0), password)
    Prob_val = convert_int(data.get('Prob', 0), password)
    DisplayTag_val = convert_int(getattr(ProductDisplayTag, data.get('DisplayTag', 0)), password)
    ShopRefreshExcel.Start(builder)
    ShopRefreshExcel.AddId(builder, Id_val)
    ShopRefreshExcel.AddLocalizeEtcId(builder, LocalizeEtcId_val)
    ShopRefreshExcel.AddIsLegacy(builder, IsLegacy_val)
    ShopRefreshExcel.AddGoodsId(builder, GoodsId_val)
    ShopRefreshExcel.AddIsBundle(builder, IsBundle_val)
    ShopRefreshExcel.AddShopPurchasePopupType(builder, ShopPurchasePopupType_val)
    ShopRefreshExcel.AddVisibleAmount(builder, VisibleAmount_val)
    ShopRefreshExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit_val)
    ShopRefreshExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopRefreshExcel.AddCategoryType(builder, CategoryType_val)
    ShopRefreshExcel.AddRefreshGroup(builder, RefreshGroup_val)
    ShopRefreshExcel.AddProb(builder, Prob_val)
    ShopRefreshExcel.AddBuyReportEventName(builder, BuyReportEventName_off)
    ShopRefreshExcel.AddProductUpdateTime(builder, ProductUpdateTime_off)
    ShopRefreshExcel.AddDisplayTag(builder, DisplayTag_val)
    return ShopRefreshExcel.End(builder)

def pack_ShopTabGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShopTabGroup") if encrypt else None
    ShopCategoryTypes_vec = 0
    if 'ShopCategoryTypes' in data:
        ShopCategoryTypes_items = data['ShopCategoryTypes']
        ShopTabGroupExcel.StartShopCategoryTypesVector(builder, len(ShopCategoryTypes_items))
        for item in reversed(ShopCategoryTypes_items):
            builder.PrependInt32(convert_int(getattr(ShopCategoryType, item), password))
        ShopCategoryTypes_vec = builder.EndVector(len(ShopCategoryTypes_items))
    Id_val = convert_long(data.get('Id', 0), password)
    ShopGroupType_val = convert_int(getattr(ShopGroupType, data.get('ShopGroupType', 0)), password)
    DisplayOrder_val = convert_int(data.get('DisplayOrder', 0), password)
    ShopTabGroupExcel.Start(builder)
    ShopTabGroupExcel.AddId(builder, Id_val)
    ShopTabGroupExcel.AddShopGroupType(builder, ShopGroupType_val)
    ShopTabGroupExcel.AddDisplayOrder(builder, DisplayOrder_val)
    ShopTabGroupExcel.AddShopCategoryTypes(builder, ShopCategoryTypes_vec)
    return ShopTabGroupExcel.End(builder)

def pack_ShortcutTypeExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("ShortcutType") if encrypt else None
    ContentType_vec = 0
    if 'ContentType' in data:
        ContentType_items = data['ContentType']
        ShortcutTypeExcel.StartContentTypeVector(builder, len(ContentType_items))
        for item in reversed(ContentType_items):
            builder.PrependInt32(convert_int(getattr(ShortcutContentType, item), password))
        ContentType_vec = builder.EndVector(len(ContentType_items))
    Id_val = convert_long(data.get('Id', 0), password)
    IsAscending_val = data.get('IsAscending', 0)
    ShortcutTypeExcel.Start(builder)
    ShortcutTypeExcel.AddId(builder, Id_val)
    ShortcutTypeExcel.AddIsAscending(builder, IsAscending_val)
    ShortcutTypeExcel.AddContentType(builder, ContentType_vec)
    return ShortcutTypeExcel.End(builder)

def pack_SkillAdditionalTooltipExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SkillAdditionalTooltip") if encrypt else None
    AdditionalSkillGroupId_off = builder.CreateString(encrypt_string(data.get('AdditionalSkillGroupId', ''), password))
    ShowSkillSlot_off = builder.CreateString(encrypt_string(data.get('ShowSkillSlot', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    SkillAdditionalTooltipExcel.Start(builder)
    SkillAdditionalTooltipExcel.AddGroupId(builder, GroupId_val)
    SkillAdditionalTooltipExcel.AddAdditionalSkillGroupId(builder, AdditionalSkillGroupId_off)
    SkillAdditionalTooltipExcel.AddShowSkillSlot(builder, ShowSkillSlot_off)
    return SkillAdditionalTooltipExcel.End(builder)

def pack_SkillExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Skill") if encrypt else None
    GroupId_off = builder.CreateString(encrypt_string(data.get('GroupId', ''), password))
    SkillDataKey_off = builder.CreateString(encrypt_string(data.get('SkillDataKey', ''), password))
    VisualDataKey_off = builder.CreateString(encrypt_string(data.get('VisualDataKey', ''), password))
    IconName_off = builder.CreateString(encrypt_string(data.get('IconName', ''), password))
    TextureSkillCardForFormConversion_off = builder.CreateString(encrypt_string(data.get('TextureSkillCardForFormConversion', ''), password))
    SkillCardLabelPath_off = builder.CreateString(encrypt_string(data.get('SkillCardLabelPath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    LocalizeSkillId_val = convert_uint(data.get('LocalizeSkillId', 0), password)
    Level_val = convert_int(data.get('Level', 0), password)
    SkillCost_val = convert_int(data.get('SkillCost', 0), password)
    ExtraSkillCost_val = convert_int(data.get('ExtraSkillCost', 0), password)
    EnemySkillCost_val = convert_int(data.get('EnemySkillCost', 0), password)
    ExtraEnemySkillCost_val = convert_int(data.get('ExtraEnemySkillCost', 0), password)
    NPCSkillCost_val = convert_int(data.get('NPCSkillCost', 0), password)
    ExtraNPCSkillCost_val = convert_int(data.get('ExtraNPCSkillCost', 0), password)
    BulletType_val = convert_int(getattr(BulletType, data.get('BulletType', 0)), password)
    StartCoolTime_val = convert_int(data.get('StartCoolTime', 0), password)
    CoolTime_val = convert_int(data.get('CoolTime', 0), password)
    EnemyStartCoolTime_val = convert_int(data.get('EnemyStartCoolTime', 0), password)
    EnemyCoolTime_val = convert_int(data.get('EnemyCoolTime', 0), password)
    NPCStartCoolTime_val = convert_int(data.get('NPCStartCoolTime', 0), password)
    NPCCoolTime_val = convert_int(data.get('NPCCoolTime', 0), password)
    UseAtg_val = convert_int(data.get('UseAtg', 0), password)
    RequireCharacterLevel_val = convert_int(data.get('RequireCharacterLevel', 0), password)
    RequireLevelUpMaterial_val = convert_long(data.get('RequireLevelUpMaterial', 0), password)
    IsShowInfo_val = data.get('IsShowInfo', 0)
    IsShowSpeechbubble_val = data.get('IsShowSpeechbubble', 0)
    PublicSpeechDuration_val = convert_int(data.get('PublicSpeechDuration', 0), password)
    AdditionalToolTipId_val = convert_long(data.get('AdditionalToolTipId', 0), password)
    SelectExSkillToolTipId_val = convert_long(data.get('SelectExSkillToolTipId', 0), password)
    SkillExcel.Start(builder)
    SkillExcel.AddId(builder, Id_val)
    SkillExcel.AddLocalizeSkillId(builder, LocalizeSkillId_val)
    SkillExcel.AddGroupId(builder, GroupId_off)
    SkillExcel.AddSkillDataKey(builder, SkillDataKey_off)
    SkillExcel.AddVisualDataKey(builder, VisualDataKey_off)
    SkillExcel.AddLevel(builder, Level_val)
    SkillExcel.AddSkillCost(builder, SkillCost_val)
    SkillExcel.AddExtraSkillCost(builder, ExtraSkillCost_val)
    SkillExcel.AddEnemySkillCost(builder, EnemySkillCost_val)
    SkillExcel.AddExtraEnemySkillCost(builder, ExtraEnemySkillCost_val)
    SkillExcel.AddNPCSkillCost(builder, NPCSkillCost_val)
    SkillExcel.AddExtraNPCSkillCost(builder, ExtraNPCSkillCost_val)
    SkillExcel.AddBulletType(builder, BulletType_val)
    SkillExcel.AddStartCoolTime(builder, StartCoolTime_val)
    SkillExcel.AddCoolTime(builder, CoolTime_val)
    SkillExcel.AddEnemyStartCoolTime(builder, EnemyStartCoolTime_val)
    SkillExcel.AddEnemyCoolTime(builder, EnemyCoolTime_val)
    SkillExcel.AddNPCStartCoolTime(builder, NPCStartCoolTime_val)
    SkillExcel.AddNPCCoolTime(builder, NPCCoolTime_val)
    SkillExcel.AddUseAtg(builder, UseAtg_val)
    SkillExcel.AddRequireCharacterLevel(builder, RequireCharacterLevel_val)
    SkillExcel.AddRequireLevelUpMaterial(builder, RequireLevelUpMaterial_val)
    SkillExcel.AddIconName(builder, IconName_off)
    SkillExcel.AddIsShowInfo(builder, IsShowInfo_val)
    SkillExcel.AddIsShowSpeechbubble(builder, IsShowSpeechbubble_val)
    SkillExcel.AddPublicSpeechDuration(builder, PublicSpeechDuration_val)
    SkillExcel.AddAdditionalToolTipId(builder, AdditionalToolTipId_val)
    SkillExcel.AddSelectExSkillToolTipId(builder, SelectExSkillToolTipId_val)
    SkillExcel.AddTextureSkillCardForFormConversion(builder, TextureSkillCardForFormConversion_off)
    SkillExcel.AddSkillCardLabelPath(builder, SkillCardLabelPath_off)
    return SkillExcel.End(builder)

def pack_SkillSelectExTooltipExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SkillSelectExTooltip") if encrypt else None
    SelectableExSkillGroupId_off = builder.CreateString(encrypt_string(data.get('SelectableExSkillGroupId', ''), password))
    SkillUseConditionLocalizeId_off = builder.CreateString(encrypt_string(data.get('SkillUseConditionLocalizeId', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    SkillSelectExTooltipExcel.Start(builder)
    SkillSelectExTooltipExcel.AddGroupId(builder, GroupId_val)
    SkillSelectExTooltipExcel.AddSelectableExSkillGroupId(builder, SelectableExSkillGroupId_off)
    SkillSelectExTooltipExcel.AddSkillUseConditionLocalizeId(builder, SkillUseConditionLocalizeId_off)
    return SkillSelectExTooltipExcel.End(builder)

def pack_SoundUIExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SoundUI") if encrypt else None
    SoundUniqueId_off = builder.CreateString(encrypt_string(data.get('SoundUniqueId', ''), password))
    Path_off = builder.CreateString(encrypt_string(data.get('Path', ''), password))
    ID_val = convert_long(data.get('ID', 0), password)
    SoundUIExcel.Start(builder)
    SoundUIExcel.AddID(builder, ID_val)
    SoundUIExcel.AddSoundUniqueId(builder, SoundUniqueId_off)
    SoundUIExcel.AddPath(builder, Path_off)
    return SoundUIExcel.End(builder)

def pack_SpineLipsyncExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("SpineLipsync") if encrypt else None
    AnimJson_off = builder.CreateString(encrypt_string(data.get('AnimJson', ''), password))
    VoiceId_val = convert_uint(data.get('VoiceId', 0), password)
    SpineLipsyncExcel.Start(builder)
    SpineLipsyncExcel.AddVoiceId(builder, VoiceId_val)
    SpineLipsyncExcel.AddAnimJson(builder, AnimJson_off)
    return SpineLipsyncExcel.End(builder)

def pack_StatLevelInterpolationExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StatLevelInterpolation") if encrypt else None
    StatTypeIndex_vec = 0
    if 'StatTypeIndex' in data:
        StatTypeIndex_items = data['StatTypeIndex']
        StatLevelInterpolationExcel.StartStatTypeIndexVector(builder, len(StatTypeIndex_items))
        for item in reversed(StatTypeIndex_items):
            builder.PrependInt64(convert_long(item, password))
        StatTypeIndex_vec = builder.EndVector(len(StatTypeIndex_items))
    Level_val = convert_long(data.get('Level', 0), password)
    StatLevelInterpolationExcel.Start(builder)
    StatLevelInterpolationExcel.AddLevel(builder, Level_val)
    StatLevelInterpolationExcel.AddStatTypeIndex(builder, StatTypeIndex_vec)
    return StatLevelInterpolationExcel.End(builder)

def pack_StickerGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StickerGroup") if encrypt else None
    Layout_off = builder.CreateString(encrypt_string(data.get('Layout', ''), password))
    UniqueLayoutPath_off = builder.CreateString(encrypt_string(data.get('UniqueLayoutPath', ''), password))
    StickerGroupIconpath_off = builder.CreateString(encrypt_string(data.get('StickerGroupIconpath', ''), password))
    StickerGroupCoverpath_off = builder.CreateString(encrypt_string(data.get('StickerGroupCoverpath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    PageCompleteSlot_val = convert_long(data.get('PageCompleteSlot', 0), password)
    PageCompleteRewardParcelType_val = convert_int(getattr(ParcelType, data.get('PageCompleteRewardParcelType', 0)), password)
    PageCompleteRewardParcelId_val = convert_long(data.get('PageCompleteRewardParcelId', 0), password)
    PageCompleteRewardAmount_val = convert_int(data.get('PageCompleteRewardAmount', 0), password)
    LocalizeTitle_val = convert_uint(data.get('LocalizeTitle', 0), password)
    LocalizeDescription_val = convert_uint(data.get('LocalizeDescription', 0), password)
    StickerGroupExcel.Start(builder)
    StickerGroupExcel.AddId(builder, Id_val)
    StickerGroupExcel.AddLayout(builder, Layout_off)
    StickerGroupExcel.AddUniqueLayoutPath(builder, UniqueLayoutPath_off)
    StickerGroupExcel.AddStickerGroupIconpath(builder, StickerGroupIconpath_off)
    StickerGroupExcel.AddPageCompleteSlot(builder, PageCompleteSlot_val)
    StickerGroupExcel.AddPageCompleteRewardParcelType(builder, PageCompleteRewardParcelType_val)
    StickerGroupExcel.AddPageCompleteRewardParcelId(builder, PageCompleteRewardParcelId_val)
    StickerGroupExcel.AddPageCompleteRewardAmount(builder, PageCompleteRewardAmount_val)
    StickerGroupExcel.AddLocalizeTitle(builder, LocalizeTitle_val)
    StickerGroupExcel.AddLocalizeDescription(builder, LocalizeDescription_val)
    StickerGroupExcel.AddStickerGroupCoverpath(builder, StickerGroupCoverpath_off)
    return StickerGroupExcel.End(builder)

def pack_StickerPageContentExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StickerPageContent") if encrypt else None
    PackedStickerIconPath_off = builder.CreateString(encrypt_string(data.get('PackedStickerIconPath', ''), password))
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    StickerDetailPath_off = builder.CreateString(encrypt_string(data.get('StickerDetailPath', ''), password))
    StickerGetConditionParameter_vec = 0
    if 'StickerGetConditionParameter' in data:
        StickerGetConditionParameter_items = data['StickerGetConditionParameter']
        StickerPageContentExcel.StartStickerGetConditionParameterVector(builder, len(StickerGetConditionParameter_items))
        for item in reversed(StickerGetConditionParameter_items):
            builder.PrependInt64(convert_long(item, password))
        StickerGetConditionParameter_vec = builder.EndVector(len(StickerGetConditionParameter_items))
    StickerGetConditionParameterTag_vec = 0
    if 'StickerGetConditionParameterTag' in data:
        StickerGetConditionParameterTag_items = data['StickerGetConditionParameterTag']
        StickerPageContentExcel.StartStickerGetConditionParameterTagVector(builder, len(StickerGetConditionParameterTag_items))
        for item in reversed(StickerGetConditionParameterTag_items):
            builder.PrependInt32(convert_int(getattr(Tag, item), password))
        StickerGetConditionParameterTag_vec = builder.EndVector(len(StickerGetConditionParameterTag_items))
    Id_val = convert_long(data.get('Id', 0), password)
    StickerGroupId_val = convert_long(data.get('StickerGroupId', 0), password)
    StickerPageId_val = convert_long(data.get('StickerPageId', 0), password)
    StickerSlot_val = convert_long(data.get('StickerSlot', 0), password)
    StickerGetConditionType_val = convert_int(getattr(StickerGetConditionType, data.get('StickerGetConditionType', 0)), password)
    StickerCheckPassType_val = convert_int(getattr(StickerCheckPassType, data.get('StickerCheckPassType', 0)), password)
    GetStickerConditionType_val = convert_int(getattr(GetStickerConditionType, data.get('GetStickerConditionType', 0)), password)
    StickerGetConditionCount_val = convert_long(data.get('StickerGetConditionCount', 0), password)
    PackedStickerIconLocalizeEtcId_val = convert_uint(data.get('PackedStickerIconLocalizeEtcId', 0), password)
    StickerPageContentExcel.Start(builder)
    StickerPageContentExcel.AddId(builder, Id_val)
    StickerPageContentExcel.AddStickerGroupId(builder, StickerGroupId_val)
    StickerPageContentExcel.AddStickerPageId(builder, StickerPageId_val)
    StickerPageContentExcel.AddStickerSlot(builder, StickerSlot_val)
    StickerPageContentExcel.AddStickerGetConditionType(builder, StickerGetConditionType_val)
    StickerPageContentExcel.AddStickerCheckPassType(builder, StickerCheckPassType_val)
    StickerPageContentExcel.AddGetStickerConditionType(builder, GetStickerConditionType_val)
    StickerPageContentExcel.AddStickerGetConditionCount(builder, StickerGetConditionCount_val)
    StickerPageContentExcel.AddStickerGetConditionParameter(builder, StickerGetConditionParameter_vec)
    StickerPageContentExcel.AddStickerGetConditionParameterTag(builder, StickerGetConditionParameterTag_vec)
    StickerPageContentExcel.AddPackedStickerIconLocalizeEtcId(builder, PackedStickerIconLocalizeEtcId_val)
    StickerPageContentExcel.AddPackedStickerIconPath(builder, PackedStickerIconPath_off)
    StickerPageContentExcel.AddIconPath(builder, IconPath_off)
    StickerPageContentExcel.AddStickerDetailPath(builder, StickerDetailPath_off)
    return StickerPageContentExcel.End(builder)

def pack_StoryStrategyExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StoryStrategy") if encrypt else None
    Name_off = builder.CreateString(encrypt_string(data.get('Name', ''), password))
    Localize_off = builder.CreateString(encrypt_string(data.get('Localize', ''), password))
    StrategyMap_off = builder.CreateString(encrypt_string(data.get('StrategyMap', ''), password))
    StrategyMapBG_off = builder.CreateString(encrypt_string(data.get('StrategyMapBG', ''), password))
    FirstClearReportEventName_off = builder.CreateString(encrypt_string(data.get('FirstClearReportEventName', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    StageEnterEchelonCount_val = convert_int(data.get('StageEnterEchelonCount', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    WhiteListId_val = convert_long(data.get('WhiteListId', 0), password)
    MaxTurn_val = convert_int(data.get('MaxTurn', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    StrategyEnvironment_val = convert_int(getattr(StrategyEnvironment, data.get('StrategyEnvironment', 0)), password)
    ContentType_val = convert_int(getattr(ContentType, data.get('ContentType', 0)), password)
    BGMId_val = convert_long(data.get('BGMId', 0), password)
    StoryStrategyExcel.Start(builder)
    StoryStrategyExcel.AddId(builder, Id_val)
    StoryStrategyExcel.AddName(builder, Name_off)
    StoryStrategyExcel.AddLocalize(builder, Localize_off)
    StoryStrategyExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount_val)
    StoryStrategyExcel.AddBattleDuration(builder, BattleDuration_val)
    StoryStrategyExcel.AddWhiteListId(builder, WhiteListId_val)
    StoryStrategyExcel.AddStrategyMap(builder, StrategyMap_off)
    StoryStrategyExcel.AddStrategyMapBG(builder, StrategyMapBG_off)
    StoryStrategyExcel.AddMaxTurn(builder, MaxTurn_val)
    StoryStrategyExcel.AddStageTopography(builder, StageTopography_val)
    StoryStrategyExcel.AddStrategyEnvironment(builder, StrategyEnvironment_val)
    StoryStrategyExcel.AddContentType(builder, ContentType_val)
    StoryStrategyExcel.AddBGMId(builder, BGMId_val)
    StoryStrategyExcel.AddFirstClearReportEventName(builder, FirstClearReportEventName_off)
    return StoryStrategyExcel.End(builder)

def pack_StrategyObjectBuffDefineExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("StrategyObjectBuffDefine") if encrypt else None
    SkillGroupId_off = builder.CreateString(encrypt_string(data.get('SkillGroupId', ''), password))
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    StrategyObjectBuffID_val = convert_long(data.get('StrategyObjectBuffID', 0), password)
    StrategyObjectTurn_val = convert_int(data.get('StrategyObjectTurn', 0), password)
    LocalizeCodeId_val = convert_uint(data.get('LocalizeCodeId', 0), password)
    StrategyObjectBuffDefineExcel.Start(builder)
    StrategyObjectBuffDefineExcel.AddStrategyObjectBuffID(builder, StrategyObjectBuffID_val)
    StrategyObjectBuffDefineExcel.AddStrategyObjectTurn(builder, StrategyObjectTurn_val)
    StrategyObjectBuffDefineExcel.AddSkillGroupId(builder, SkillGroupId_off)
    StrategyObjectBuffDefineExcel.AddLocalizeCodeId(builder, LocalizeCodeId_val)
    StrategyObjectBuffDefineExcel.AddIconPath(builder, IconPath_off)
    return StrategyObjectBuffDefineExcel.End(builder)

def pack_TacticalSupportSystemExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticalSupportSystem") if encrypt else None
    ObstacleUniqueName_off = builder.CreateString(encrypt_string(data.get('ObstacleUniqueName', ''), password))
    SummonSkilllGroupId_off = builder.CreateString(encrypt_string(data.get('SummonSkilllGroupId', ''), password))
    GetOnStartEffectPath_off = builder.CreateString(encrypt_string(data.get('GetOnStartEffectPath', ''), password))
    GetOnEndEffectPath_off = builder.CreateString(encrypt_string(data.get('GetOnEndEffectPath', ''), password))
    InteractionStudentExSkillGroupId_off = builder.CreateString(encrypt_string(data.get('InteractionStudentExSkillGroupId', ''), password))
    InteractionSkillCardTexture_off = builder.CreateString(encrypt_string(data.get('InteractionSkillCardTexture', ''), password))
    InteractionSkillSpine_off = builder.CreateString(encrypt_string(data.get('InteractionSkillSpine', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    SummonedTime_val = convert_long(data.get('SummonedTime', 0), password)
    DefaultPersonalityId_val = convert_long(data.get('DefaultPersonalityId', 0), password)
    CanTargeting_val = data.get('CanTargeting', 0)
    CanCover_val = data.get('CanCover', 0)
    ObstacleCoverRange_val = convert_long(data.get('ObstacleCoverRange', 0), password)
    CrashObstacleOBBWidth_val = convert_long(data.get('CrashObstacleOBBWidth', 0), password)
    CrashObstacleOBBHeight_val = convert_long(data.get('CrashObstacleOBBHeight', 0), password)
    IsTSSBlockedNodeCheck_val = data.get('IsTSSBlockedNodeCheck', 0)
    NumberOfUses_val = convert_int(data.get('NumberOfUses', 0), password)
    InventoryOffsetX_val = encrypt_float(data.get('InventoryOffsetX', 0), password)
    InventoryOffsetY_val = encrypt_float(data.get('InventoryOffsetY', 0), password)
    InventoryOffsetZ_val = encrypt_float(data.get('InventoryOffsetZ', 0), password)
    InteractionChar_val = convert_long(data.get('InteractionChar', 0), password)
    CharacterInteractionStartDelay_val = convert_long(data.get('CharacterInteractionStartDelay', 0), password)
    SummonerCharacterId_val = convert_long(data.get('SummonerCharacterId', 0), password)
    InteractionFrame_val = convert_int(data.get('InteractionFrame', 0), password)
    TSAInteractionAddDuration_val = convert_long(data.get('TSAInteractionAddDuration', 0), password)
    RetreatFrame_val = convert_int(data.get('RetreatFrame', 0), password)
    DestroyFrame_val = convert_int(data.get('DestroyFrame', 0), password)
    TacticalSupportSystemExcel.Start(builder)
    TacticalSupportSystemExcel.AddId(builder, Id_val)
    TacticalSupportSystemExcel.AddSummonedTime(builder, SummonedTime_val)
    TacticalSupportSystemExcel.AddDefaultPersonalityId(builder, DefaultPersonalityId_val)
    TacticalSupportSystemExcel.AddCanTargeting(builder, CanTargeting_val)
    TacticalSupportSystemExcel.AddCanCover(builder, CanCover_val)
    TacticalSupportSystemExcel.AddObstacleUniqueName(builder, ObstacleUniqueName_off)
    TacticalSupportSystemExcel.AddObstacleCoverRange(builder, ObstacleCoverRange_val)
    TacticalSupportSystemExcel.AddSummonSkilllGroupId(builder, SummonSkilllGroupId_off)
    TacticalSupportSystemExcel.AddCrashObstacleOBBWidth(builder, CrashObstacleOBBWidth_val)
    TacticalSupportSystemExcel.AddCrashObstacleOBBHeight(builder, CrashObstacleOBBHeight_val)
    TacticalSupportSystemExcel.AddIsTSSBlockedNodeCheck(builder, IsTSSBlockedNodeCheck_val)
    TacticalSupportSystemExcel.AddNumberOfUses(builder, NumberOfUses_val)
    TacticalSupportSystemExcel.AddInventoryOffsetX(builder, InventoryOffsetX_val)
    TacticalSupportSystemExcel.AddInventoryOffsetY(builder, InventoryOffsetY_val)
    TacticalSupportSystemExcel.AddInventoryOffsetZ(builder, InventoryOffsetZ_val)
    TacticalSupportSystemExcel.AddInteractionChar(builder, InteractionChar_val)
    TacticalSupportSystemExcel.AddCharacterInteractionStartDelay(builder, CharacterInteractionStartDelay_val)
    TacticalSupportSystemExcel.AddGetOnStartEffectPath(builder, GetOnStartEffectPath_off)
    TacticalSupportSystemExcel.AddGetOnEndEffectPath(builder, GetOnEndEffectPath_off)
    TacticalSupportSystemExcel.AddSummonerCharacterId(builder, SummonerCharacterId_val)
    TacticalSupportSystemExcel.AddInteractionFrame(builder, InteractionFrame_val)
    TacticalSupportSystemExcel.AddTSAInteractionAddDuration(builder, TSAInteractionAddDuration_val)
    TacticalSupportSystemExcel.AddInteractionStudentExSkillGroupId(builder, InteractionStudentExSkillGroupId_off)
    TacticalSupportSystemExcel.AddInteractionSkillCardTexture(builder, InteractionSkillCardTexture_off)
    TacticalSupportSystemExcel.AddInteractionSkillSpine(builder, InteractionSkillSpine_off)
    TacticalSupportSystemExcel.AddRetreatFrame(builder, RetreatFrame_val)
    TacticalSupportSystemExcel.AddDestroyFrame(builder, DestroyFrame_val)
    return TacticalSupportSystemExcel.End(builder)

def pack_TacticEntityEffectFilterExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticEntityEffectFilter") if encrypt else None
    TargetEffectName_off = builder.CreateString(encrypt_string(data.get('TargetEffectName', ''), password))
    ShowEffectToVehicle_val = data.get('ShowEffectToVehicle', 0)
    ShowEffectToBoss_val = data.get('ShowEffectToBoss', 0)
    TacticEntityEffectFilterExcel.Start(builder)
    TacticEntityEffectFilterExcel.AddTargetEffectName(builder, TargetEffectName_off)
    TacticEntityEffectFilterExcel.AddShowEffectToVehicle(builder, ShowEffectToVehicle_val)
    TacticEntityEffectFilterExcel.AddShowEffectToBoss(builder, ShowEffectToBoss_val)
    return TacticEntityEffectFilterExcel.End(builder)

def pack_TacticSkipExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TacticSkip") if encrypt else None
    LevelDiff_val = convert_int(data.get('LevelDiff', 0), password)
    HPResult_val = convert_long(data.get('HPResult', 0), password)
    TacticSkipExcel.Start(builder)
    TacticSkipExcel.AddLevelDiff(builder, LevelDiff_val)
    TacticSkipExcel.AddHPResult(builder, HPResult_val)
    return TacticSkipExcel.End(builder)

def pack_TerrainAdaptationFactorExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TerrainAdaptationFactor") if encrypt else None
    TerrainAdaptation_val = convert_int(getattr(StageTopography, data.get('TerrainAdaptation', 0)), password)
    TerrainAdaptationStat_val = convert_int(getattr(TerrainAdaptationStat, data.get('TerrainAdaptationStat', 0)), password)
    ShotFactor_val = convert_long(data.get('ShotFactor', 0), password)
    BlockFactor_val = convert_long(data.get('BlockFactor', 0), password)
    AccuracyFactor_val = convert_long(data.get('AccuracyFactor', 0), password)
    DodgeFactor_val = convert_long(data.get('DodgeFactor', 0), password)
    AttackPowerFactor_val = convert_long(data.get('AttackPowerFactor', 0), password)
    TerrainAdaptationFactorExcel.Start(builder)
    TerrainAdaptationFactorExcel.AddTerrainAdaptation(builder, TerrainAdaptation_val)
    TerrainAdaptationFactorExcel.AddTerrainAdaptationStat(builder, TerrainAdaptationStat_val)
    TerrainAdaptationFactorExcel.AddShotFactor(builder, ShotFactor_val)
    TerrainAdaptationFactorExcel.AddBlockFactor(builder, BlockFactor_val)
    TerrainAdaptationFactorExcel.AddAccuracyFactor(builder, AccuracyFactor_val)
    TerrainAdaptationFactorExcel.AddDodgeFactor(builder, DodgeFactor_val)
    TerrainAdaptationFactorExcel.AddAttackPowerFactor(builder, AttackPowerFactor_val)
    return TerrainAdaptationFactorExcel.End(builder)

def pack_TimeAttackDungeonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TimeAttackDungeon") if encrypt else None
    IconPath_off = builder.CreateString(encrypt_string(data.get('IconPath', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    TimeAttackDungeonType_val = convert_int(getattr(TimeAttackDungeonType, data.get('TimeAttackDungeonType', 0)), password)
    LocalizeEtcKey_val = convert_uint(data.get('LocalizeEtcKey', 0), password)
    InformationGroupID_val = convert_long(data.get('InformationGroupID', 0), password)
    TimeAttackDungeonExcel.Start(builder)
    TimeAttackDungeonExcel.AddId(builder, Id_val)
    TimeAttackDungeonExcel.AddTimeAttackDungeonType(builder, TimeAttackDungeonType_val)
    TimeAttackDungeonExcel.AddLocalizeEtcKey(builder, LocalizeEtcKey_val)
    TimeAttackDungeonExcel.AddIconPath(builder, IconPath_off)
    TimeAttackDungeonExcel.AddInformationGroupID(builder, InformationGroupID_val)
    return TimeAttackDungeonExcel.End(builder)

def pack_TimeAttackDungeonGeasExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TimeAttackDungeonGeas") if encrypt else None
    AllyPassiveSkillId_vec = 0
    if 'AllyPassiveSkillId' in data:
        AllyPassiveSkillId_items = data['AllyPassiveSkillId']
        AllyPassiveSkillId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in AllyPassiveSkillId_items]
        TimeAttackDungeonGeasExcel.StartAllyPassiveSkillIdVector(builder, len(AllyPassiveSkillId_str_offsets))
        for offset in reversed(AllyPassiveSkillId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        AllyPassiveSkillId_vec = builder.EndVector(len(AllyPassiveSkillId_items))
    AllyPassiveSkillLevel_vec = 0
    if 'AllyPassiveSkillLevel' in data:
        AllyPassiveSkillLevel_items = data['AllyPassiveSkillLevel']
        TimeAttackDungeonGeasExcel.StartAllyPassiveSkillLevelVector(builder, len(AllyPassiveSkillLevel_items))
        for item in reversed(AllyPassiveSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        AllyPassiveSkillLevel_vec = builder.EndVector(len(AllyPassiveSkillLevel_items))
    EnemyPassiveSkillId_vec = 0
    if 'EnemyPassiveSkillId' in data:
        EnemyPassiveSkillId_items = data['EnemyPassiveSkillId']
        EnemyPassiveSkillId_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in EnemyPassiveSkillId_items]
        TimeAttackDungeonGeasExcel.StartEnemyPassiveSkillIdVector(builder, len(EnemyPassiveSkillId_str_offsets))
        for offset in reversed(EnemyPassiveSkillId_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        EnemyPassiveSkillId_vec = builder.EndVector(len(EnemyPassiveSkillId_items))
    EnemyPassiveSkillLevel_vec = 0
    if 'EnemyPassiveSkillLevel' in data:
        EnemyPassiveSkillLevel_items = data['EnemyPassiveSkillLevel']
        TimeAttackDungeonGeasExcel.StartEnemyPassiveSkillLevelVector(builder, len(EnemyPassiveSkillLevel_items))
        for item in reversed(EnemyPassiveSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        EnemyPassiveSkillLevel_vec = builder.EndVector(len(EnemyPassiveSkillLevel_items))
    GeasIconPath_vec = 0
    if 'GeasIconPath' in data:
        GeasIconPath_items = data['GeasIconPath']
        GeasIconPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in GeasIconPath_items]
        TimeAttackDungeonGeasExcel.StartGeasIconPathVector(builder, len(GeasIconPath_str_offsets))
        for offset in reversed(GeasIconPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        GeasIconPath_vec = builder.EndVector(len(GeasIconPath_items))
    GeasLocalizeEtcKey_vec = 0
    if 'GeasLocalizeEtcKey' in data:
        GeasLocalizeEtcKey_items = data['GeasLocalizeEtcKey']
        TimeAttackDungeonGeasExcel.StartGeasLocalizeEtcKeyVector(builder, len(GeasLocalizeEtcKey_items))
        for item in reversed(GeasLocalizeEtcKey_items):
            builder.PrependUint32(convert_uint(item, password))
        GeasLocalizeEtcKey_vec = builder.EndVector(len(GeasLocalizeEtcKey_items))
    Id_val = convert_long(data.get('Id', 0), password)
    TimeAttackDungeonType_val = convert_int(getattr(TimeAttackDungeonType, data.get('TimeAttackDungeonType', 0)), password)
    LocalizeEtcKey_val = convert_uint(data.get('LocalizeEtcKey', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    ClearDefaultPoint_val = convert_long(data.get('ClearDefaultPoint', 0), password)
    ClearTimeWeightPoint_val = convert_long(data.get('ClearTimeWeightPoint', 0), password)
    TimeWeightConst_val = convert_long(data.get('TimeWeightConst', 0), password)
    Difficulty_val = convert_int(data.get('Difficulty', 0), password)
    RecommandLevel_val = convert_int(data.get('RecommandLevel', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    TimeAttackDungeonGeasExcel.Start(builder)
    TimeAttackDungeonGeasExcel.AddId(builder, Id_val)
    TimeAttackDungeonGeasExcel.AddTimeAttackDungeonType(builder, TimeAttackDungeonType_val)
    TimeAttackDungeonGeasExcel.AddLocalizeEtcKey(builder, LocalizeEtcKey_val)
    TimeAttackDungeonGeasExcel.AddBattleDuration(builder, BattleDuration_val)
    TimeAttackDungeonGeasExcel.AddClearDefaultPoint(builder, ClearDefaultPoint_val)
    TimeAttackDungeonGeasExcel.AddClearTimeWeightPoint(builder, ClearTimeWeightPoint_val)
    TimeAttackDungeonGeasExcel.AddTimeWeightConst(builder, TimeWeightConst_val)
    TimeAttackDungeonGeasExcel.AddDifficulty(builder, Difficulty_val)
    TimeAttackDungeonGeasExcel.AddRecommandLevel(builder, RecommandLevel_val)
    TimeAttackDungeonGeasExcel.AddGroundId(builder, GroundId_val)
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillId_vec)
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevel_vec)
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillId_vec)
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevel_vec)
    TimeAttackDungeonGeasExcel.AddGeasIconPath(builder, GeasIconPath_vec)
    TimeAttackDungeonGeasExcel.AddGeasLocalizeEtcKey(builder, GeasLocalizeEtcKey_vec)
    return TimeAttackDungeonGeasExcel.End(builder)

def pack_TimeAttackDungeonRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TimeAttackDungeonReward") if encrypt else None
    RewardType_vec = 0
    if 'RewardType' in data:
        RewardType_items = data['RewardType']
        TimeAttackDungeonRewardExcel.StartRewardTypeVector(builder, len(RewardType_items))
        for item in reversed(RewardType_items):
            builder.PrependInt32(convert_int(getattr(TimeAttackDungeonRewardType, item), password))
        RewardType_vec = builder.EndVector(len(RewardType_items))
    RewardMinPoint_vec = 0
    if 'RewardMinPoint' in data:
        RewardMinPoint_items = data['RewardMinPoint']
        TimeAttackDungeonRewardExcel.StartRewardMinPointVector(builder, len(RewardMinPoint_items))
        for item in reversed(RewardMinPoint_items):
            builder.PrependInt64(convert_long(item, password))
        RewardMinPoint_vec = builder.EndVector(len(RewardMinPoint_items))
    RewardParcelType_vec = 0
    if 'RewardParcelType' in data:
        RewardParcelType_items = data['RewardParcelType']
        TimeAttackDungeonRewardExcel.StartRewardParcelTypeVector(builder, len(RewardParcelType_items))
        for item in reversed(RewardParcelType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        RewardParcelType_vec = builder.EndVector(len(RewardParcelType_items))
    RewardParcelId_vec = 0
    if 'RewardParcelId' in data:
        RewardParcelId_items = data['RewardParcelId']
        TimeAttackDungeonRewardExcel.StartRewardParcelIdVector(builder, len(RewardParcelId_items))
        for item in reversed(RewardParcelId_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelId_vec = builder.EndVector(len(RewardParcelId_items))
    RewardParcelDefaultAmount_vec = 0
    if 'RewardParcelDefaultAmount' in data:
        RewardParcelDefaultAmount_items = data['RewardParcelDefaultAmount']
        TimeAttackDungeonRewardExcel.StartRewardParcelDefaultAmountVector(builder, len(RewardParcelDefaultAmount_items))
        for item in reversed(RewardParcelDefaultAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelDefaultAmount_vec = builder.EndVector(len(RewardParcelDefaultAmount_items))
    RewardParcelMaxAmount_vec = 0
    if 'RewardParcelMaxAmount' in data:
        RewardParcelMaxAmount_items = data['RewardParcelMaxAmount']
        TimeAttackDungeonRewardExcel.StartRewardParcelMaxAmountVector(builder, len(RewardParcelMaxAmount_items))
        for item in reversed(RewardParcelMaxAmount_items):
            builder.PrependInt64(convert_long(item, password))
        RewardParcelMaxAmount_vec = builder.EndVector(len(RewardParcelMaxAmount_items))
    Id_val = convert_long(data.get('Id', 0), password)
    RewardMaxPoint_val = convert_long(data.get('RewardMaxPoint', 0), password)
    TimeAttackDungeonRewardExcel.Start(builder)
    TimeAttackDungeonRewardExcel.AddId(builder, Id_val)
    TimeAttackDungeonRewardExcel.AddRewardMaxPoint(builder, RewardMaxPoint_val)
    TimeAttackDungeonRewardExcel.AddRewardType(builder, RewardType_vec)
    TimeAttackDungeonRewardExcel.AddRewardMinPoint(builder, RewardMinPoint_vec)
    TimeAttackDungeonRewardExcel.AddRewardParcelType(builder, RewardParcelType_vec)
    TimeAttackDungeonRewardExcel.AddRewardParcelId(builder, RewardParcelId_vec)
    TimeAttackDungeonRewardExcel.AddRewardParcelDefaultAmount(builder, RewardParcelDefaultAmount_vec)
    TimeAttackDungeonRewardExcel.AddRewardParcelMaxAmount(builder, RewardParcelMaxAmount_vec)
    return TimeAttackDungeonRewardExcel.End(builder)

def pack_TimeAttackDungeonSeasonManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TimeAttackDungeonSeasonManage") if encrypt else None
    StartDate_off = builder.CreateString(encrypt_string(data.get('StartDate', ''), password))
    EndNoteLabelStartDate_off = builder.CreateString(encrypt_string(data.get('EndNoteLabelStartDate', ''), password))
    EndDate_off = builder.CreateString(encrypt_string(data.get('EndDate', ''), password))
    DifficultyGeas_vec = 0
    if 'DifficultyGeas' in data:
        DifficultyGeas_items = data['DifficultyGeas']
        TimeAttackDungeonSeasonManageExcel.StartDifficultyGeasVector(builder, len(DifficultyGeas_items))
        for item in reversed(DifficultyGeas_items):
            builder.PrependInt64(convert_long(item, password))
        DifficultyGeas_vec = builder.EndVector(len(DifficultyGeas_items))
    Id_val = convert_long(data.get('Id', 0), password)
    UISlot_val = convert_long(data.get('UISlot', 0), password)
    DungeonId_val = convert_long(data.get('DungeonId', 0), password)
    TimeAttackDungeonRewardId_val = convert_long(data.get('TimeAttackDungeonRewardId', 0), password)
    RoomLifeTimeInSeconds_val = convert_long(data.get('RoomLifeTimeInSeconds', 0), password)
    TimeAttackDungeonSeasonManageExcel.Start(builder)
    TimeAttackDungeonSeasonManageExcel.AddId(builder, Id_val)
    TimeAttackDungeonSeasonManageExcel.AddStartDate(builder, StartDate_off)
    TimeAttackDungeonSeasonManageExcel.AddEndNoteLabelStartDate(builder, EndNoteLabelStartDate_off)
    TimeAttackDungeonSeasonManageExcel.AddEndDate(builder, EndDate_off)
    TimeAttackDungeonSeasonManageExcel.AddUISlot(builder, UISlot_val)
    TimeAttackDungeonSeasonManageExcel.AddDungeonId(builder, DungeonId_val)
    TimeAttackDungeonSeasonManageExcel.AddDifficultyGeas(builder, DifficultyGeas_vec)
    TimeAttackDungeonSeasonManageExcel.AddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId_val)
    TimeAttackDungeonSeasonManageExcel.AddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds_val)
    return TimeAttackDungeonSeasonManageExcel.End(builder)

def pack_ToastExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Toast") if encrypt else None
    Id_val = convert_uint(data.get('Id', 0), password)
    ToastType_val = convert_int(getattr(ToastType, data.get('ToastType', 0)), password)
    MissionId_val = convert_uint(data.get('MissionId', 0), password)
    TextId_val = convert_uint(data.get('TextId', 0), password)
    LifeTime_val = convert_long(data.get('LifeTime', 0), password)
    ToastExcel.Start(builder)
    ToastExcel.AddId(builder, Id_val)
    ToastExcel.AddToastType(builder, ToastType_val)
    ToastExcel.AddMissionId(builder, MissionId_val)
    ToastExcel.AddTextId(builder, TextId_val)
    ToastExcel.AddLifeTime(builder, LifeTime_val)
    return ToastExcel.End(builder)

def pack_TrophyCollectionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TrophyCollection") if encrypt else None
    FurnitureId_vec = 0
    if 'FurnitureId' in data:
        FurnitureId_items = data['FurnitureId']
        TrophyCollectionExcel.StartFurnitureIdVector(builder, len(FurnitureId_items))
        for item in reversed(FurnitureId_items):
            builder.PrependInt64(convert_long(item, password))
        FurnitureId_vec = builder.EndVector(len(FurnitureId_items))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    LocalizeCodeId_val = convert_uint(data.get('LocalizeCodeId', 0), password)
    TrophyCollectionExcel.Start(builder)
    TrophyCollectionExcel.AddGroupId(builder, GroupId_val)
    TrophyCollectionExcel.AddLocalizeCodeId(builder, LocalizeCodeId_val)
    TrophyCollectionExcel.AddFurnitureId(builder, FurnitureId_vec)
    return TrophyCollectionExcel.End(builder)

def pack_TutorialCharacterDialogExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TutorialCharacterDialog") if encrypt else None
    AnimationName_off = builder.CreateString(encrypt_string(data.get('AnimationName', ''), password))
    LocalizeKR_off = builder.CreateString(encrypt_string(data.get('LocalizeKR', ''), password))
    LocalizeJP_off = builder.CreateString(encrypt_string(data.get('LocalizeJP', ''), password))
    TalkId_val = convert_long(data.get('TalkId', 0), password)
    VoiceId_val = convert_uint(data.get('VoiceId', 0), password)
    TutorialCharacterDialogExcel.Start(builder)
    TutorialCharacterDialogExcel.AddTalkId(builder, TalkId_val)
    TutorialCharacterDialogExcel.AddAnimationName(builder, AnimationName_off)
    TutorialCharacterDialogExcel.AddLocalizeKR(builder, LocalizeKR_off)
    TutorialCharacterDialogExcel.AddLocalizeJP(builder, LocalizeJP_off)
    TutorialCharacterDialogExcel.AddVoiceId(builder, VoiceId_val)
    return TutorialCharacterDialogExcel.End(builder)

def pack_TutorialExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Tutorial") if encrypt else None
    CompletionReportEventName_off = builder.CreateString(encrypt_string(data.get('CompletionReportEventName', ''), password))
    UIName_vec = 0
    if 'UIName' in data:
        UIName_items = data['UIName']
        UIName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in UIName_items]
        TutorialExcel.StartUINameVector(builder, len(UIName_str_offsets))
        for offset in reversed(UIName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        UIName_vec = builder.EndVector(len(UIName_items))
    TutorialParentName_vec = 0
    if 'TutorialParentName' in data:
        TutorialParentName_items = data['TutorialParentName']
        TutorialParentName_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in TutorialParentName_items]
        TutorialExcel.StartTutorialParentNameVector(builder, len(TutorialParentName_str_offsets))
        for offset in reversed(TutorialParentName_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        TutorialParentName_vec = builder.EndVector(len(TutorialParentName_items))
    ID_val = convert_long(data.get('ID', 0), password)
    CompulsoryTutorial_val = data.get('CompulsoryTutorial', 0)
    DescriptionTutorial_val = data.get('DescriptionTutorial', 0)
    TutorialStageId_val = convert_long(data.get('TutorialStageId', 0), password)
    TutorialExcel.Start(builder)
    TutorialExcel.AddID(builder, ID_val)
    TutorialExcel.AddCompletionReportEventName(builder, CompletionReportEventName_off)
    TutorialExcel.AddCompulsoryTutorial(builder, CompulsoryTutorial_val)
    TutorialExcel.AddDescriptionTutorial(builder, DescriptionTutorial_val)
    TutorialExcel.AddTutorialStageId(builder, TutorialStageId_val)
    TutorialExcel.AddUIName(builder, UIName_vec)
    TutorialExcel.AddTutorialParentName(builder, TutorialParentName_vec)
    return TutorialExcel.End(builder)

def pack_TutorialFailureImageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("TutorialFailureImage") if encrypt else None
    Type_off = builder.CreateString(encrypt_string(data.get('Type', ''), password))
    ImagePathKr_off = builder.CreateString(encrypt_string(data.get('ImagePathKr', ''), password))
    ImagePathJp_off = builder.CreateString(encrypt_string(data.get('ImagePathJp', ''), password))
    Id_val = convert_long(data.get('Id', 0), password)
    Contents_val = convert_int(getattr(TutorialFailureContentType, data.get('Contents', 0)), password)
    TutorialFailureImageExcel.Start(builder)
    TutorialFailureImageExcel.AddId(builder, Id_val)
    TutorialFailureImageExcel.AddContents(builder, Contents_val)
    TutorialFailureImageExcel.AddType(builder, Type_off)
    TutorialFailureImageExcel.AddImagePathKr(builder, ImagePathKr_off)
    TutorialFailureImageExcel.AddImagePathJp(builder, ImagePathJp_off)
    return TutorialFailureImageExcel.End(builder)

def pack_UnderCoverStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("UnderCoverStage") if encrypt else None
    StageNameFile_off = builder.CreateString(encrypt_string(data.get('StageNameFile', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    StageTryCount_val = convert_int(data.get('StageTryCount', 0), password)
    ApplySkip_val = data.get('ApplySkip', 0)
    SkipCount_val = convert_int(data.get('SkipCount', 0), password)
    ShowClearScene_val = data.get('ShowClearScene', 0)
    StageTips_val = convert_uint(data.get('StageTips', 0), password)
    StageName_val = convert_uint(data.get('StageName', 0), password)
    UnderCoverStageExcel.Start(builder)
    UnderCoverStageExcel.AddGroupId(builder, GroupId_val)
    UnderCoverStageExcel.AddStageNameFile(builder, StageNameFile_off)
    UnderCoverStageExcel.AddStageTryCount(builder, StageTryCount_val)
    UnderCoverStageExcel.AddApplySkip(builder, ApplySkip_val)
    UnderCoverStageExcel.AddSkipCount(builder, SkipCount_val)
    UnderCoverStageExcel.AddShowClearScene(builder, ShowClearScene_val)
    UnderCoverStageExcel.AddStageTips(builder, StageTips_val)
    UnderCoverStageExcel.AddStageName(builder, StageName_val)
    return UnderCoverStageExcel.End(builder)

def pack_VideoExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Video") if encrypt else None
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        VideoExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    VideoPath_vec = 0
    if 'VideoPath' in data:
        VideoPath_items = data['VideoPath']
        VideoPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in VideoPath_items]
        VideoExcel.StartVideoPathVector(builder, len(VideoPath_str_offsets))
        for offset in reversed(VideoPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        VideoPath_vec = builder.EndVector(len(VideoPath_items))
    SoundPath_vec = 0
    if 'SoundPath' in data:
        SoundPath_items = data['SoundPath']
        SoundPath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in SoundPath_items]
        VideoExcel.StartSoundPathVector(builder, len(SoundPath_str_offsets))
        for offset in reversed(SoundPath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        SoundPath_vec = builder.EndVector(len(SoundPath_items))
    SoundVolume_vec = 0
    if 'SoundVolume' in data:
        SoundVolume_items = data['SoundVolume']
        VideoExcel.StartSoundVolumeVector(builder, len(SoundVolume_items))
        for item in reversed(SoundVolume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SoundVolume_vec = builder.EndVector(len(SoundVolume_items))
    Id_val = convert_long(data.get('Id', 0), password)
    VideoExcel.Start(builder)
    VideoExcel.AddId(builder, Id_val)
    VideoExcel.AddNation(builder, Nation_vec)
    VideoExcel.AddVideoPath(builder, VideoPath_vec)
    VideoExcel.AddSoundPath(builder, SoundPath_vec)
    VideoExcel.AddSoundVolume(builder, SoundVolume_vec)
    return VideoExcel.End(builder)

def pack_VoiceCommonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("VoiceCommon") if encrypt else None
    VoiceHash_vec = 0
    if 'VoiceHash' in data:
        VoiceHash_items = data['VoiceHash']
        VoiceCommonExcel.StartVoiceHashVector(builder, len(VoiceHash_items))
        for item in reversed(VoiceHash_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceHash_vec = builder.EndVector(len(VoiceHash_items))
    VoiceEvent_val = convert_int(getattr(VoiceEvent, data.get('VoiceEvent', 0)), password)
    Rate_val = convert_long(data.get('Rate', 0), password)
    VoiceCommonExcel.Start(builder)
    VoiceCommonExcel.AddVoiceEvent(builder, VoiceEvent_val)
    VoiceCommonExcel.AddRate(builder, Rate_val)
    VoiceCommonExcel.AddVoiceHash(builder, VoiceHash_vec)
    return VoiceCommonExcel.End(builder)

def pack_VoiceExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("Voice") if encrypt else None
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        VoiceExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    Path_vec = 0
    if 'Path' in data:
        Path_items = data['Path']
        Path_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in Path_items]
        VoiceExcel.StartPathVector(builder, len(Path_str_offsets))
        for offset in reversed(Path_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        Path_vec = builder.EndVector(len(Path_items))
    Volume_vec = 0
    if 'Volume' in data:
        Volume_items = data['Volume']
        VoiceExcel.StartVolumeVector(builder, len(Volume_items))
        for item in reversed(Volume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        Volume_vec = builder.EndVector(len(Volume_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    Id_val = convert_uint(data.get('Id', 0), password)
    VoiceExcel.Start(builder)
    VoiceExcel.AddUniqueId(builder, UniqueId_val)
    VoiceExcel.AddId(builder, Id_val)
    VoiceExcel.AddNation(builder, Nation_vec)
    VoiceExcel.AddPath(builder, Path_vec)
    VoiceExcel.AddVolume(builder, Volume_vec)
    return VoiceExcel.End(builder)

def pack_VoiceLogicEffectExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("VoiceLogicEffect") if encrypt else None
    VoiceHash_vec = 0
    if 'VoiceHash' in data:
        VoiceHash_items = data['VoiceHash']
        VoiceLogicEffectExcel.StartVoiceHashVector(builder, len(VoiceHash_items))
        for item in reversed(VoiceHash_items):
            builder.PrependUint32(convert_uint(item, password))
        VoiceHash_vec = builder.EndVector(len(VoiceHash_items))
    LogicEffectNameHash_val = convert_uint(data.get('LogicEffectNameHash', 0), password)
    Self_val = data.get('Self', 0)
    Priority_val = convert_int(data.get('Priority', 0), password)
    VoiceId_val = convert_uint(data.get('VoiceId', 0), password)
    VoiceLogicEffectExcel.Start(builder)
    VoiceLogicEffectExcel.AddLogicEffectNameHash(builder, LogicEffectNameHash_val)
    VoiceLogicEffectExcel.AddSelf(builder, Self_val)
    VoiceLogicEffectExcel.AddPriority(builder, Priority_val)
    VoiceLogicEffectExcel.AddVoiceHash(builder, VoiceHash_vec)
    VoiceLogicEffectExcel.AddVoiceId(builder, VoiceId_val)
    return VoiceLogicEffectExcel.End(builder)

def pack_VoiceRoomExceptionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("VoiceRoomException") if encrypt else None
    CostumeUniqueId_val = convert_long(data.get('CostumeUniqueId', 0), password)
    LinkedCharacterVoicePrintType_val = convert_int(getattr(CVPrintType, data.get('LinkedCharacterVoicePrintType', 0)), password)
    LinkedCostumeUniqueId_val = convert_long(data.get('LinkedCostumeUniqueId', 0), password)
    VoiceRoomExceptionExcel.Start(builder)
    VoiceRoomExceptionExcel.AddCostumeUniqueId(builder, CostumeUniqueId_val)
    VoiceRoomExceptionExcel.AddLinkedCharacterVoicePrintType(builder, LinkedCharacterVoicePrintType_val)
    VoiceRoomExceptionExcel.AddLinkedCostumeUniqueId(builder, LinkedCostumeUniqueId_val)
    return VoiceRoomExceptionExcel.End(builder)

def pack_VoiceSpineExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("VoiceSpine") if encrypt else None
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        VoiceSpineExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    Path_vec = 0
    if 'Path' in data:
        Path_items = data['Path']
        Path_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in Path_items]
        VoiceSpineExcel.StartPathVector(builder, len(Path_str_offsets))
        for offset in reversed(Path_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        Path_vec = builder.EndVector(len(Path_items))
    SoundVolume_vec = 0
    if 'SoundVolume' in data:
        SoundVolume_items = data['SoundVolume']
        VoiceSpineExcel.StartSoundVolumeVector(builder, len(SoundVolume_items))
        for item in reversed(SoundVolume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SoundVolume_vec = builder.EndVector(len(SoundVolume_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    Id_val = convert_uint(data.get('Id', 0), password)
    VoiceSpineExcel.Start(builder)
    VoiceSpineExcel.AddUniqueId(builder, UniqueId_val)
    VoiceSpineExcel.AddId(builder, Id_val)
    VoiceSpineExcel.AddNation(builder, Nation_vec)
    VoiceSpineExcel.AddPath(builder, Path_vec)
    VoiceSpineExcel.AddSoundVolume(builder, SoundVolume_vec)
    return VoiceSpineExcel.End(builder)

def pack_VoiceTimelineExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("VoiceTimeline") if encrypt else None
    Nation_vec = 0
    if 'Nation' in data:
        Nation_items = data['Nation']
        VoiceTimelineExcel.StartNationVector(builder, len(Nation_items))
        for item in reversed(Nation_items):
            builder.PrependInt32(convert_int(getattr(Nation, item), password))
        Nation_vec = builder.EndVector(len(Nation_items))
    Path_vec = 0
    if 'Path' in data:
        Path_items = data['Path']
        Path_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in Path_items]
        VoiceTimelineExcel.StartPathVector(builder, len(Path_str_offsets))
        for offset in reversed(Path_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        Path_vec = builder.EndVector(len(Path_items))
    SoundVolume_vec = 0
    if 'SoundVolume' in data:
        SoundVolume_items = data['SoundVolume']
        VoiceTimelineExcel.StartSoundVolumeVector(builder, len(SoundVolume_items))
        for item in reversed(SoundVolume_items):
            builder.PrependFloat32(encrypt_float(item, password))
        SoundVolume_vec = builder.EndVector(len(SoundVolume_items))
    UniqueId_val = convert_long(data.get('UniqueId', 0), password)
    Id_val = convert_uint(data.get('Id', 0), password)
    VoiceTimelineExcel.Start(builder)
    VoiceTimelineExcel.AddUniqueId(builder, UniqueId_val)
    VoiceTimelineExcel.AddId(builder, Id_val)
    VoiceTimelineExcel.AddNation(builder, Nation_vec)
    VoiceTimelineExcel.AddPath(builder, Path_vec)
    VoiceTimelineExcel.AddSoundVolume(builder, SoundVolume_vec)
    return VoiceTimelineExcel.End(builder)

def pack_WeekDungeonExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WeekDungeon") if encrypt else None
    StageEnterCostType_vec = 0
    if 'StageEnterCostType' in data:
        StageEnterCostType_items = data['StageEnterCostType']
        WeekDungeonExcel.StartStageEnterCostTypeVector(builder, len(StageEnterCostType_items))
        for item in reversed(StageEnterCostType_items):
            builder.PrependInt32(convert_int(getattr(ParcelType, item), password))
        StageEnterCostType_vec = builder.EndVector(len(StageEnterCostType_items))
    StageEnterCostId_vec = 0
    if 'StageEnterCostId' in data:
        StageEnterCostId_items = data['StageEnterCostId']
        WeekDungeonExcel.StartStageEnterCostIdVector(builder, len(StageEnterCostId_items))
        for item in reversed(StageEnterCostId_items):
            builder.PrependInt64(convert_long(item, password))
        StageEnterCostId_vec = builder.EndVector(len(StageEnterCostId_items))
    StageEnterCostAmount_vec = 0
    if 'StageEnterCostAmount' in data:
        StageEnterCostAmount_items = data['StageEnterCostAmount']
        WeekDungeonExcel.StartStageEnterCostAmountVector(builder, len(StageEnterCostAmount_items))
        for item in reversed(StageEnterCostAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StageEnterCostAmount_vec = builder.EndVector(len(StageEnterCostAmount_items))
    StarGoal_vec = 0
    if 'StarGoal' in data:
        StarGoal_items = data['StarGoal']
        WeekDungeonExcel.StartStarGoalVector(builder, len(StarGoal_items))
        for item in reversed(StarGoal_items):
            builder.PrependInt32(convert_int(getattr(StarGoalType, item), password))
        StarGoal_vec = builder.EndVector(len(StarGoal_items))
    StarGoalAmount_vec = 0
    if 'StarGoalAmount' in data:
        StarGoalAmount_items = data['StarGoalAmount']
        WeekDungeonExcel.StartStarGoalAmountVector(builder, len(StarGoalAmount_items))
        for item in reversed(StarGoalAmount_items):
            builder.PrependInt32(convert_int(item, password))
        StarGoalAmount_vec = builder.EndVector(len(StarGoalAmount_items))
    GroupBuffID_vec = 0
    if 'GroupBuffID' in data:
        GroupBuffID_items = data['GroupBuffID']
        WeekDungeonExcel.StartGroupBuffIDVector(builder, len(GroupBuffID_items))
        for item in reversed(GroupBuffID_items):
            builder.PrependInt64(convert_long(item, password))
        GroupBuffID_vec = builder.EndVector(len(GroupBuffID_items))
    StageId_val = convert_long(data.get('StageId', 0), password)
    WeekDungeonType_val = convert_int(getattr(WeekDungeonType, data.get('WeekDungeonType', 0)), password)
    Difficulty_val = convert_int(data.get('Difficulty', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    PrevStageId_val = convert_long(data.get('PrevStageId', 0), password)
    GroundId_val = convert_int(data.get('GroundId', 0), password)
    StageTopography_val = convert_int(getattr(StageTopography, data.get('StageTopography', 0)), password)
    RecommandLevel_val = convert_long(data.get('RecommandLevel', 0), password)
    StageRewardId_val = convert_long(data.get('StageRewardId', 0), password)
    PlayTimeLimitInSeconds_val = convert_long(data.get('PlayTimeLimitInSeconds', 0), password)
    BattleRewardExp_val = convert_long(data.get('BattleRewardExp', 0), password)
    BattleRewardPlayerExp_val = convert_long(data.get('BattleRewardPlayerExp', 0), password)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    WeekDungeonExcel.Start(builder)
    WeekDungeonExcel.AddStageId(builder, StageId_val)
    WeekDungeonExcel.AddWeekDungeonType(builder, WeekDungeonType_val)
    WeekDungeonExcel.AddDifficulty(builder, Difficulty_val)
    WeekDungeonExcel.AddBattleDuration(builder, BattleDuration_val)
    WeekDungeonExcel.AddPrevStageId(builder, PrevStageId_val)
    WeekDungeonExcel.AddStageEnterCostType(builder, StageEnterCostType_vec)
    WeekDungeonExcel.AddStageEnterCostId(builder, StageEnterCostId_vec)
    WeekDungeonExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount_vec)
    WeekDungeonExcel.AddGroundId(builder, GroundId_val)
    WeekDungeonExcel.AddStarGoal(builder, StarGoal_vec)
    WeekDungeonExcel.AddStarGoalAmount(builder, StarGoalAmount_vec)
    WeekDungeonExcel.AddStageTopography(builder, StageTopography_val)
    WeekDungeonExcel.AddRecommandLevel(builder, RecommandLevel_val)
    WeekDungeonExcel.AddStageRewardId(builder, StageRewardId_val)
    WeekDungeonExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds_val)
    WeekDungeonExcel.AddBattleRewardExp(builder, BattleRewardExp_val)
    WeekDungeonExcel.AddBattleRewardPlayerExp(builder, BattleRewardPlayerExp_val)
    WeekDungeonExcel.AddGroupBuffID(builder, GroupBuffID_vec)
    WeekDungeonExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return WeekDungeonExcel.End(builder)

def pack_WeekDungeonGroupBuffExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WeekDungeonGroupBuff") if encrypt else None
    SkillGroupId_off = builder.CreateString(encrypt_string(data.get('SkillGroupId', ''), password))
    WeekDungeonBuffId_val = convert_long(data.get('WeekDungeonBuffId', 0), password)
    School_val = convert_int(getattr(School, data.get('School', 0)), password)
    RecommandLocalizeEtcId_val = convert_uint(data.get('RecommandLocalizeEtcId', 0), password)
    FormationLocalizeEtcId_val = convert_uint(data.get('FormationLocalizeEtcId', 0), password)
    WeekDungeonGroupBuffExcel.Start(builder)
    WeekDungeonGroupBuffExcel.AddWeekDungeonBuffId(builder, WeekDungeonBuffId_val)
    WeekDungeonGroupBuffExcel.AddSchool(builder, School_val)
    WeekDungeonGroupBuffExcel.AddRecommandLocalizeEtcId(builder, RecommandLocalizeEtcId_val)
    WeekDungeonGroupBuffExcel.AddFormationLocalizeEtcId(builder, FormationLocalizeEtcId_val)
    WeekDungeonGroupBuffExcel.AddSkillGroupId(builder, SkillGroupId_off)
    return WeekDungeonGroupBuffExcel.End(builder)

def pack_WeekDungeonOpenScheduleExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WeekDungeonOpenSchedule") if encrypt else None
    Open_vec = 0
    if 'Open' in data:
        Open_items = data['Open']
        WeekDungeonOpenScheduleExcel.StartOpenVector(builder, len(Open_items))
        for item in reversed(Open_items):
            builder.PrependInt32(convert_int(getattr(WeekDungeonType, item), password))
        Open_vec = builder.EndVector(len(Open_items))
    WeekDay_val = convert_int(getattr(WeekDay, data.get('WeekDay', 0)), password)
    WeekDungeonOpenScheduleExcel.Start(builder)
    WeekDungeonOpenScheduleExcel.AddWeekDay(builder, WeekDay_val)
    WeekDungeonOpenScheduleExcel.AddOpen(builder, Open_vec)
    return WeekDungeonOpenScheduleExcel.End(builder)

def pack_WeekDungeonRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WeekDungeonReward") if encrypt else None
    DropItemModelPrefabPath_off = builder.CreateString(encrypt_string(data.get('DropItemModelPrefabPath', ''), password))
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    DungeonType_val = convert_int(getattr(WeekDungeonType, data.get('DungeonType', 0)), password)
    RewardParcelType_val = convert_int(getattr(ParcelType, data.get('RewardParcelType', 0)), password)
    RewardParcelId_val = convert_long(data.get('RewardParcelId', 0), password)
    RewardParcelAmount_val = convert_long(data.get('RewardParcelAmount', 0), password)
    RewardParcelProbability_val = convert_long(data.get('RewardParcelProbability', 0), password)
    IsDisplayed_val = data.get('IsDisplayed', 0)
    WeekDungeonRewardExcel.Start(builder)
    WeekDungeonRewardExcel.AddGroupId(builder, GroupId_val)
    WeekDungeonRewardExcel.AddDungeonType(builder, DungeonType_val)
    WeekDungeonRewardExcel.AddRewardParcelType(builder, RewardParcelType_val)
    WeekDungeonRewardExcel.AddRewardParcelId(builder, RewardParcelId_val)
    WeekDungeonRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount_val)
    WeekDungeonRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability_val)
    WeekDungeonRewardExcel.AddIsDisplayed(builder, IsDisplayed_val)
    WeekDungeonRewardExcel.AddDropItemModelPrefabPath(builder, DropItemModelPrefabPath_off)
    return WeekDungeonRewardExcel.End(builder)

def pack_WorldRaidBossGroupExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidBossGroup") if encrypt else None
    WorldBossName_off = builder.CreateString(encrypt_string(data.get('WorldBossName', ''), password))
    WorldBossPopupPortrait_off = builder.CreateString(encrypt_string(data.get('WorldBossPopupPortrait', ''), password))
    WorldBossPopupBG_off = builder.CreateString(encrypt_string(data.get('WorldBossPopupBG', ''), password))
    WorldBossParcelPortrait_off = builder.CreateString(encrypt_string(data.get('WorldBossParcelPortrait', ''), password))
    WorldBossListParcel_off = builder.CreateString(encrypt_string(data.get('WorldBossListParcel', ''), password))
    ExclusiveOperatorBossSpawn_off = builder.CreateString(encrypt_string(data.get('ExclusiveOperatorBossSpawn', ''), password))
    ExclusiveOperatorBossKill_off = builder.CreateString(encrypt_string(data.get('ExclusiveOperatorBossKill', ''), password))
    ExclusiveOperatorScenarioBattle_off = builder.CreateString(encrypt_string(data.get('ExclusiveOperatorScenarioBattle', ''), password))
    ExclusiveOperatorBossDamaged_off = builder.CreateString(encrypt_string(data.get('ExclusiveOperatorBossDamaged', ''), password))
    AnotherBossKilled_vec = 0
    if 'AnotherBossKilled' in data:
        AnotherBossKilled_items = data['AnotherBossKilled']
        WorldRaidBossGroupExcel.StartAnotherBossKilledVector(builder, len(AnotherBossKilled_items))
        for item in reversed(AnotherBossKilled_items):
            builder.PrependInt64(convert_long(item, password))
        AnotherBossKilled_vec = builder.EndVector(len(AnotherBossKilled_items))
    Id_val = convert_long(data.get('Id', 0), password)
    WorldRaidBossGroupId_val = convert_long(data.get('WorldRaidBossGroupId', 0), password)
    WorldBossHP_val = convert_long(data.get('WorldBossHP', 0), password)
    UIHideBeforeSpawn_val = data.get('UIHideBeforeSpawn', 0)
    HideAnotherBossKilled_val = data.get('HideAnotherBossKilled', 0)
    WorldBossClearRewardGroupId_val = convert_long(data.get('WorldBossClearRewardGroupId', 0), password)
    EchelonConstraintGroupId_val = convert_long(data.get('EchelonConstraintGroupId', 0), password)
    BossGroupOpenCondition_val = convert_long(data.get('BossGroupOpenCondition', 0), password)
    WorldRaidBossGroupExcel.Start(builder)
    WorldRaidBossGroupExcel.AddId(builder, Id_val)
    WorldRaidBossGroupExcel.AddWorldRaidBossGroupId(builder, WorldRaidBossGroupId_val)
    WorldRaidBossGroupExcel.AddWorldBossName(builder, WorldBossName_off)
    WorldRaidBossGroupExcel.AddWorldBossPopupPortrait(builder, WorldBossPopupPortrait_off)
    WorldRaidBossGroupExcel.AddWorldBossPopupBG(builder, WorldBossPopupBG_off)
    WorldRaidBossGroupExcel.AddWorldBossParcelPortrait(builder, WorldBossParcelPortrait_off)
    WorldRaidBossGroupExcel.AddWorldBossListParcel(builder, WorldBossListParcel_off)
    WorldRaidBossGroupExcel.AddWorldBossHP(builder, WorldBossHP_val)
    WorldRaidBossGroupExcel.AddUIHideBeforeSpawn(builder, UIHideBeforeSpawn_val)
    WorldRaidBossGroupExcel.AddHideAnotherBossKilled(builder, HideAnotherBossKilled_val)
    WorldRaidBossGroupExcel.AddWorldBossClearRewardGroupId(builder, WorldBossClearRewardGroupId_val)
    WorldRaidBossGroupExcel.AddAnotherBossKilled(builder, AnotherBossKilled_vec)
    WorldRaidBossGroupExcel.AddEchelonConstraintGroupId(builder, EchelonConstraintGroupId_val)
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossSpawn(builder, ExclusiveOperatorBossSpawn_off)
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossKill(builder, ExclusiveOperatorBossKill_off)
    WorldRaidBossGroupExcel.AddExclusiveOperatorScenarioBattle(builder, ExclusiveOperatorScenarioBattle_off)
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossDamaged(builder, ExclusiveOperatorBossDamaged_off)
    WorldRaidBossGroupExcel.AddBossGroupOpenCondition(builder, BossGroupOpenCondition_val)
    return WorldRaidBossGroupExcel.End(builder)

def pack_WorldRaidConditionExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidCondition") if encrypt else None
    AfterWhenDate_off = builder.CreateString(encrypt_string(data.get('AfterWhenDate', ''), password))
    LockUI_vec = 0
    if 'LockUI' in data:
        LockUI_items = data['LockUI']
        LockUI_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in LockUI_items]
        WorldRaidConditionExcel.StartLockUIVector(builder, len(LockUI_str_offsets))
        for offset in reversed(LockUI_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        LockUI_vec = builder.EndVector(len(LockUI_items))
    ScenarioModeId_vec = 0
    if 'ScenarioModeId' in data:
        ScenarioModeId_items = data['ScenarioModeId']
        WorldRaidConditionExcel.StartScenarioModeIdVector(builder, len(ScenarioModeId_items))
        for item in reversed(ScenarioModeId_items):
            builder.PrependInt64(convert_long(item, password))
        ScenarioModeId_vec = builder.EndVector(len(ScenarioModeId_items))
    CampaignStageID_vec = 0
    if 'CampaignStageID' in data:
        CampaignStageID_items = data['CampaignStageID']
        WorldRaidConditionExcel.StartCampaignStageIDVector(builder, len(CampaignStageID_items))
        for item in reversed(CampaignStageID_items):
            builder.PrependInt64(convert_long(item, password))
        CampaignStageID_vec = builder.EndVector(len(CampaignStageID_items))
    WorldRaidBossKill_vec = 0
    if 'WorldRaidBossKill' in data:
        WorldRaidBossKill_items = data['WorldRaidBossKill']
        WorldRaidConditionExcel.StartWorldRaidBossKillVector(builder, len(WorldRaidBossKill_items))
        for item in reversed(WorldRaidBossKill_items):
            builder.PrependInt64(convert_long(item, password))
        WorldRaidBossKill_vec = builder.EndVector(len(WorldRaidBossKill_items))
    Id_val = convert_long(data.get('Id', 0), password)
    HideWhenLocked_val = data.get('HideWhenLocked', 0)
    AccountLevel_val = convert_long(data.get('AccountLevel', 0), password)
    MultipleConditionCheckType_val = convert_int(getattr(MultipleConditionCheckType, data.get('MultipleConditionCheckType', 0)), password)
    WorldRaidConditionExcel.Start(builder)
    WorldRaidConditionExcel.AddId(builder, Id_val)
    WorldRaidConditionExcel.AddLockUI(builder, LockUI_vec)
    WorldRaidConditionExcel.AddHideWhenLocked(builder, HideWhenLocked_val)
    WorldRaidConditionExcel.AddAccountLevel(builder, AccountLevel_val)
    WorldRaidConditionExcel.AddScenarioModeId(builder, ScenarioModeId_vec)
    WorldRaidConditionExcel.AddCampaignStageID(builder, CampaignStageID_vec)
    WorldRaidConditionExcel.AddMultipleConditionCheckType(builder, MultipleConditionCheckType_val)
    WorldRaidConditionExcel.AddAfterWhenDate(builder, AfterWhenDate_off)
    WorldRaidConditionExcel.AddWorldRaidBossKill(builder, WorldRaidBossKill_vec)
    return WorldRaidConditionExcel.End(builder)

def pack_WorldRaidFavorBuffExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidFavorBuff") if encrypt else None
    WorldRaidFavorRank_val = convert_long(data.get('WorldRaidFavorRank', 0), password)
    WorldRaidFavorRankBonus_val = convert_long(data.get('WorldRaidFavorRankBonus', 0), password)
    WorldRaidFavorBuffExcel.Start(builder)
    WorldRaidFavorBuffExcel.AddWorldRaidFavorRank(builder, WorldRaidFavorRank_val)
    WorldRaidFavorBuffExcel.AddWorldRaidFavorRankBonus(builder, WorldRaidFavorRankBonus_val)
    return WorldRaidFavorBuffExcel.End(builder)

def pack_WorldRaidSeasonManageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidSeasonManage") if encrypt else None
    WorldRaidLobbyScene_off = builder.CreateString(encrypt_string(data.get('WorldRaidLobbyScene', ''), password))
    WorldRaidLobbyBanner_off = builder.CreateString(encrypt_string(data.get('WorldRaidLobbyBanner', ''), password))
    WorldRaidLobbyBG_off = builder.CreateString(encrypt_string(data.get('WorldRaidLobbyBG', ''), password))
    WorldRaidUniqueThemeName_off = builder.CreateString(encrypt_string(data.get('WorldRaidUniqueThemeName', ''), password))
    WorldRaidMapEnterOperator_off = builder.CreateString(encrypt_string(data.get('WorldRaidMapEnterOperator', ''), password))
    OpenRaidBossGroupId_vec = 0
    if 'OpenRaidBossGroupId' in data:
        OpenRaidBossGroupId_items = data['OpenRaidBossGroupId']
        WorldRaidSeasonManageExcel.StartOpenRaidBossGroupIdVector(builder, len(OpenRaidBossGroupId_items))
        for item in reversed(OpenRaidBossGroupId_items):
            builder.PrependInt64(convert_long(item, password))
        OpenRaidBossGroupId_vec = builder.EndVector(len(OpenRaidBossGroupId_items))
    BossSpawnTime_vec = 0
    if 'BossSpawnTime' in data:
        BossSpawnTime_items = data['BossSpawnTime']
        BossSpawnTime_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in BossSpawnTime_items]
        WorldRaidSeasonManageExcel.StartBossSpawnTimeVector(builder, len(BossSpawnTime_str_offsets))
        for offset in reversed(BossSpawnTime_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        BossSpawnTime_vec = builder.EndVector(len(BossSpawnTime_items))
    EliminateTime_vec = 0
    if 'EliminateTime' in data:
        EliminateTime_items = data['EliminateTime']
        EliminateTime_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in EliminateTime_items]
        WorldRaidSeasonManageExcel.StartEliminateTimeVector(builder, len(EliminateTime_str_offsets))
        for offset in reversed(EliminateTime_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        EliminateTime_vec = builder.EndVector(len(EliminateTime_items))
    ScenarioOutputConditionId_vec = 0
    if 'ScenarioOutputConditionId' in data:
        ScenarioOutputConditionId_items = data['ScenarioOutputConditionId']
        WorldRaidSeasonManageExcel.StartScenarioOutputConditionIdVector(builder, len(ScenarioOutputConditionId_items))
        for item in reversed(ScenarioOutputConditionId_items):
            builder.PrependInt64(convert_long(item, password))
        ScenarioOutputConditionId_vec = builder.EndVector(len(ScenarioOutputConditionId_items))
    ConditionScenarioGroupid_vec = 0
    if 'ConditionScenarioGroupid' in data:
        ConditionScenarioGroupid_items = data['ConditionScenarioGroupid']
        WorldRaidSeasonManageExcel.StartConditionScenarioGroupidVector(builder, len(ConditionScenarioGroupid_items))
        for item in reversed(ConditionScenarioGroupid_items):
            builder.PrependInt64(convert_long(item, password))
        ConditionScenarioGroupid_vec = builder.EndVector(len(ConditionScenarioGroupid_items))
    SeasonId_val = convert_long(data.get('SeasonId', 0), password)
    EventContentId_val = convert_long(data.get('EventContentId', 0), password)
    EnterTicket_val = convert_int(getattr(CurrencyTypes, data.get('EnterTicket', 0)), password)
    WorldRaidLobbyBannerShow_val = data.get('WorldRaidLobbyBannerShow', 0)
    SeasonOpenCondition_val = convert_long(data.get('SeasonOpenCondition', 0), password)
    WorldRaidLobbyEnterScenario_val = convert_long(data.get('WorldRaidLobbyEnterScenario', 0), password)
    CanPlayNotSeasonTime_val = data.get('CanPlayNotSeasonTime', 0)
    WorldRaidUniqueThemeLobbyUI_val = data.get('WorldRaidUniqueThemeLobbyUI', 0)
    CanWorldRaidGemEnter_val = data.get('CanWorldRaidGemEnter', 0)
    HideWorldRaidTicketUI_val = data.get('HideWorldRaidTicketUI', 0)
    HideWorldRaidBossCompleteRewardUI_val = data.get('HideWorldRaidBossCompleteRewardUI', 0)
    UseWorldRaidCommonToast_val = data.get('UseWorldRaidCommonToast', 0)
    UseFavorRankBuff_val = data.get('UseFavorRankBuff', 0)
    WorldRaidSeasonManageExcel.Start(builder)
    WorldRaidSeasonManageExcel.AddSeasonId(builder, SeasonId_val)
    WorldRaidSeasonManageExcel.AddEventContentId(builder, EventContentId_val)
    WorldRaidSeasonManageExcel.AddEnterTicket(builder, EnterTicket_val)
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyScene(builder, WorldRaidLobbyScene_off)
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBanner(builder, WorldRaidLobbyBanner_off)
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBG(builder, WorldRaidLobbyBG_off)
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBannerShow(builder, WorldRaidLobbyBannerShow_val)
    WorldRaidSeasonManageExcel.AddSeasonOpenCondition(builder, SeasonOpenCondition_val)
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyEnterScenario(builder, WorldRaidLobbyEnterScenario_val)
    WorldRaidSeasonManageExcel.AddCanPlayNotSeasonTime(builder, CanPlayNotSeasonTime_val)
    WorldRaidSeasonManageExcel.AddWorldRaidUniqueThemeLobbyUI(builder, WorldRaidUniqueThemeLobbyUI_val)
    WorldRaidSeasonManageExcel.AddWorldRaidUniqueThemeName(builder, WorldRaidUniqueThemeName_off)
    WorldRaidSeasonManageExcel.AddCanWorldRaidGemEnter(builder, CanWorldRaidGemEnter_val)
    WorldRaidSeasonManageExcel.AddHideWorldRaidTicketUI(builder, HideWorldRaidTicketUI_val)
    WorldRaidSeasonManageExcel.AddHideWorldRaidBossCompleteRewardUI(builder, HideWorldRaidBossCompleteRewardUI_val)
    WorldRaidSeasonManageExcel.AddUseWorldRaidCommonToast(builder, UseWorldRaidCommonToast_val)
    WorldRaidSeasonManageExcel.AddOpenRaidBossGroupId(builder, OpenRaidBossGroupId_vec)
    WorldRaidSeasonManageExcel.AddBossSpawnTime(builder, BossSpawnTime_vec)
    WorldRaidSeasonManageExcel.AddEliminateTime(builder, EliminateTime_vec)
    WorldRaidSeasonManageExcel.AddScenarioOutputConditionId(builder, ScenarioOutputConditionId_vec)
    WorldRaidSeasonManageExcel.AddConditionScenarioGroupid(builder, ConditionScenarioGroupid_vec)
    WorldRaidSeasonManageExcel.AddWorldRaidMapEnterOperator(builder, WorldRaidMapEnterOperator_off)
    WorldRaidSeasonManageExcel.AddUseFavorRankBuff(builder, UseFavorRankBuff_val)
    return WorldRaidSeasonManageExcel.End(builder)

def pack_WorldRaidStageExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidStage") if encrypt else None
    PortraitPath_off = builder.CreateString(encrypt_string(data.get('PortraitPath', ''), password))
    BGPath_off = builder.CreateString(encrypt_string(data.get('BGPath', ''), password))
    VictoryTimelinePath_off = builder.CreateString(encrypt_string(data.get('VictoryTimelinePath', ''), password))
    PhaseChangeTimelinePath_off = builder.CreateString(encrypt_string(data.get('PhaseChangeTimelinePath', ''), password))
    BossCharacterId_vec = 0
    if 'BossCharacterId' in data:
        BossCharacterId_items = data['BossCharacterId']
        WorldRaidStageExcel.StartBossCharacterIdVector(builder, len(BossCharacterId_items))
        for item in reversed(BossCharacterId_items):
            builder.PrependInt64(convert_long(item, password))
        BossCharacterId_vec = builder.EndVector(len(BossCharacterId_items))
    BattleReadyTimelinePath_vec = 0
    if 'BattleReadyTimelinePath' in data:
        BattleReadyTimelinePath_items = data['BattleReadyTimelinePath']
        BattleReadyTimelinePath_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in BattleReadyTimelinePath_items]
        WorldRaidStageExcel.StartBattleReadyTimelinePathVector(builder, len(BattleReadyTimelinePath_str_offsets))
        for offset in reversed(BattleReadyTimelinePath_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        BattleReadyTimelinePath_vec = builder.EndVector(len(BattleReadyTimelinePath_items))
    BattleReadyTimelinePhaseStart_vec = 0
    if 'BattleReadyTimelinePhaseStart' in data:
        BattleReadyTimelinePhaseStart_items = data['BattleReadyTimelinePhaseStart']
        WorldRaidStageExcel.StartBattleReadyTimelinePhaseStartVector(builder, len(BattleReadyTimelinePhaseStart_items))
        for item in reversed(BattleReadyTimelinePhaseStart_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseStart_vec = builder.EndVector(len(BattleReadyTimelinePhaseStart_items))
    BattleReadyTimelinePhaseEnd_vec = 0
    if 'BattleReadyTimelinePhaseEnd' in data:
        BattleReadyTimelinePhaseEnd_items = data['BattleReadyTimelinePhaseEnd']
        WorldRaidStageExcel.StartBattleReadyTimelinePhaseEndVector(builder, len(BattleReadyTimelinePhaseEnd_items))
        for item in reversed(BattleReadyTimelinePhaseEnd_items):
            builder.PrependInt32(convert_int(item, password))
        BattleReadyTimelinePhaseEnd_vec = builder.EndVector(len(BattleReadyTimelinePhaseEnd_items))
    AllyPassiveSkill_vec = 0
    if 'AllyPassiveSkill' in data:
        AllyPassiveSkill_items = data['AllyPassiveSkill']
        AllyPassiveSkill_str_offsets = [builder.CreateString(encrypt_string(item, password)) for item in AllyPassiveSkill_items]
        WorldRaidStageExcel.StartAllyPassiveSkillVector(builder, len(AllyPassiveSkill_str_offsets))
        for offset in reversed(AllyPassiveSkill_str_offsets):
            builder.PrependUOffsetTRelative(offset)
        AllyPassiveSkill_vec = builder.EndVector(len(AllyPassiveSkill_items))
    AllyPassiveSkillLevel_vec = 0
    if 'AllyPassiveSkillLevel' in data:
        AllyPassiveSkillLevel_items = data['AllyPassiveSkillLevel']
        WorldRaidStageExcel.StartAllyPassiveSkillLevelVector(builder, len(AllyPassiveSkillLevel_items))
        for item in reversed(AllyPassiveSkillLevel_items):
            builder.PrependInt32(convert_int(item, password))
        AllyPassiveSkillLevel_vec = builder.EndVector(len(AllyPassiveSkillLevel_items))
    Id_val = convert_long(data.get('Id', 0), password)
    UseBossIndex_val = data.get('UseBossIndex', 0)
    UseBossAIPhaseSync_val = data.get('UseBossAIPhaseSync', 0)
    WorldRaidBossGroupId_val = convert_long(data.get('WorldRaidBossGroupId', 0), password)
    RaidCharacterId_val = convert_long(data.get('RaidCharacterId', 0), password)
    AssistCharacterLimitCount_val = convert_long(data.get('AssistCharacterLimitCount', 0), password)
    WorldRaidDifficulty_val = convert_int(getattr(WorldRaidDifficulty, data.get('WorldRaidDifficulty', 0)), password)
    DifficultyOpenCondition_val = data.get('DifficultyOpenCondition', 0)
    RaidEnterAmount_val = convert_long(data.get('RaidEnterAmount', 0), password)
    ReEnterAmount_val = convert_long(data.get('ReEnterAmount', 0), password)
    BattleDuration_val = convert_long(data.get('BattleDuration', 0), password)
    GroundId_val = convert_long(data.get('GroundId', 0), password)
    RaidBattleEndRewardGroupId_val = convert_long(data.get('RaidBattleEndRewardGroupId', 0), password)
    RaidRewardGroupId_val = convert_long(data.get('RaidRewardGroupId', 0), password)
    TimeLinePhase_val = convert_long(data.get('TimeLinePhase', 0), password)
    EnterScenarioKey_val = convert_long(data.get('EnterScenarioKey', 0), password)
    ClearScenarioKey_val = convert_long(data.get('ClearScenarioKey', 0), password)
    UseFixedEchelon_val = data.get('UseFixedEchelon', 0)
    FixedEchelonId_val = convert_long(data.get('FixedEchelonId', 0), password)
    IsRaidScenarioBattle_val = data.get('IsRaidScenarioBattle', 0)
    ShowSkillCard_val = data.get('ShowSkillCard', 0)
    BossBGInfoKey_val = convert_uint(data.get('BossBGInfoKey', 0), password)
    DamageToWorldBoss_val = convert_long(data.get('DamageToWorldBoss', 0), password)
    SaveCurrentLocalBossHP_val = data.get('SaveCurrentLocalBossHP', 0)
    EchelonExtensionType_val = convert_int(getattr(EchelonExtensionType, data.get('EchelonExtensionType', 0)), password)
    WorldRaidStageExcel.Start(builder)
    WorldRaidStageExcel.AddId(builder, Id_val)
    WorldRaidStageExcel.AddUseBossIndex(builder, UseBossIndex_val)
    WorldRaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync_val)
    WorldRaidStageExcel.AddWorldRaidBossGroupId(builder, WorldRaidBossGroupId_val)
    WorldRaidStageExcel.AddPortraitPath(builder, PortraitPath_off)
    WorldRaidStageExcel.AddBGPath(builder, BGPath_off)
    WorldRaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId_val)
    WorldRaidStageExcel.AddBossCharacterId(builder, BossCharacterId_vec)
    WorldRaidStageExcel.AddAssistCharacterLimitCount(builder, AssistCharacterLimitCount_val)
    WorldRaidStageExcel.AddWorldRaidDifficulty(builder, WorldRaidDifficulty_val)
    WorldRaidStageExcel.AddDifficultyOpenCondition(builder, DifficultyOpenCondition_val)
    WorldRaidStageExcel.AddRaidEnterAmount(builder, RaidEnterAmount_val)
    WorldRaidStageExcel.AddReEnterAmount(builder, ReEnterAmount_val)
    WorldRaidStageExcel.AddBattleDuration(builder, BattleDuration_val)
    WorldRaidStageExcel.AddGroundId(builder, GroundId_val)
    WorldRaidStageExcel.AddRaidBattleEndRewardGroupId(builder, RaidBattleEndRewardGroupId_val)
    WorldRaidStageExcel.AddRaidRewardGroupId(builder, RaidRewardGroupId_val)
    WorldRaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePath_vec)
    WorldRaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStart_vec)
    WorldRaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEnd_vec)
    WorldRaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePath_off)
    WorldRaidStageExcel.AddPhaseChangeTimelinePath(builder, PhaseChangeTimelinePath_off)
    WorldRaidStageExcel.AddTimeLinePhase(builder, TimeLinePhase_val)
    WorldRaidStageExcel.AddEnterScenarioKey(builder, EnterScenarioKey_val)
    WorldRaidStageExcel.AddClearScenarioKey(builder, ClearScenarioKey_val)
    WorldRaidStageExcel.AddUseFixedEchelon(builder, UseFixedEchelon_val)
    WorldRaidStageExcel.AddFixedEchelonId(builder, FixedEchelonId_val)
    WorldRaidStageExcel.AddIsRaidScenarioBattle(builder, IsRaidScenarioBattle_val)
    WorldRaidStageExcel.AddShowSkillCard(builder, ShowSkillCard_val)
    WorldRaidStageExcel.AddBossBGInfoKey(builder, BossBGInfoKey_val)
    WorldRaidStageExcel.AddDamageToWorldBoss(builder, DamageToWorldBoss_val)
    WorldRaidStageExcel.AddAllyPassiveSkill(builder, AllyPassiveSkill_vec)
    WorldRaidStageExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevel_vec)
    WorldRaidStageExcel.AddSaveCurrentLocalBossHP(builder, SaveCurrentLocalBossHP_val)
    WorldRaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType_val)
    return WorldRaidStageExcel.End(builder)

def pack_WorldRaidStageRewardExcel(builder: flatbuffers.Builder, data: dict, encrypt=True) -> int:
    password = create_key("WorldRaidStageReward") if encrypt else None
    GroupId_val = convert_long(data.get('GroupId', 0), password)
    IsClearStageRewardHideInfo_val = data.get('IsClearStageRewardHideInfo', 0)
    ClearStageRewardProb_val = convert_long(data.get('ClearStageRewardProb', 0), password)
    ClearStageRewardParcelType_val = convert_int(getattr(ParcelType, data.get('ClearStageRewardParcelType', 0)), password)
    ClearStageRewardParcelUniqueID_val = convert_long(data.get('ClearStageRewardParcelUniqueID', 0), password)
    ClearStageRewardAmount_val = convert_long(data.get('ClearStageRewardAmount', 0), password)
    WorldRaidStageRewardExcel.Start(builder)
    WorldRaidStageRewardExcel.AddGroupId(builder, GroupId_val)
    WorldRaidStageRewardExcel.AddIsClearStageRewardHideInfo(builder, IsClearStageRewardHideInfo_val)
    WorldRaidStageRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb_val)
    WorldRaidStageRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType_val)
    WorldRaidStageRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID_val)
    WorldRaidStageRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount_val)
    return WorldRaidStageRewardExcel.End(builder)

def pack_BattleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattleExcel(builder, record, encrypt))
    BattleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattleExcelTable.Start(builder)
    BattleExcelTable.AddDataList(builder, data_list)
    return BattleExcelTable.End(builder)

def pack_BossPhaseExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BossPhaseExcel(builder, record, encrypt))
    BossPhaseExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BossPhaseExcelTable.Start(builder)
    BossPhaseExcelTable.AddDataList(builder, data_list)
    return BossPhaseExcelTable.End(builder)

def pack_BuffParticleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BuffParticleExcel(builder, record, encrypt))
    BuffParticleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BuffParticleExcelTable.Start(builder)
    BuffParticleExcelTable.AddDataList(builder, data_list)
    return BuffParticleExcelTable.End(builder)

def pack_CharacterDialogEmojiExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogEmojiExcel(builder, record, encrypt))
    CharacterDialogEmojiExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogEmojiExcelTable.Start(builder)
    CharacterDialogEmojiExcelTable.AddDataList(builder, data_list)
    return CharacterDialogEmojiExcelTable.End(builder)

def pack_CharacterDialogFieldExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogFieldExcel(builder, record, encrypt))
    CharacterDialogFieldExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogFieldExcelTable.Start(builder)
    CharacterDialogFieldExcelTable.AddDataList(builder, data_list)
    return CharacterDialogFieldExcelTable.End(builder)

def pack_ClearDeckRuleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ClearDeckRuleExcel(builder, record, encrypt))
    ClearDeckRuleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ClearDeckRuleExcelTable.Start(builder)
    ClearDeckRuleExcelTable.AddDataList(builder, data_list)
    return ClearDeckRuleExcelTable.End(builder)

def pack_ConquestStepExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestStepExcel(builder, record, encrypt))
    ConquestStepExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestStepExcelTable.Start(builder)
    ConquestStepExcelTable.AddDataList(builder, data_list)
    return ConquestStepExcelTable.End(builder)

def pack_ConstArenaExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstArenaExcel(builder, record, encrypt))
    ConstArenaExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstArenaExcelTable.Start(builder)
    ConstArenaExcelTable.AddDataList(builder, data_list)
    return ConstArenaExcelTable.End(builder)

def pack_ConstAudioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstAudioExcel(builder, record, encrypt))
    ConstAudioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstAudioExcelTable.Start(builder)
    ConstAudioExcelTable.AddDataList(builder, data_list)
    return ConstAudioExcelTable.End(builder)

def pack_ConstCombatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstCombatExcel(builder, record, encrypt))
    ConstCombatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstCombatExcelTable.Start(builder)
    ConstCombatExcelTable.AddDataList(builder, data_list)
    return ConstCombatExcelTable.End(builder)

def pack_ConstCommonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstCommonExcel(builder, record, encrypt))
    ConstCommonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstCommonExcelTable.Start(builder)
    ConstCommonExcelTable.AddDataList(builder, data_list)
    return ConstCommonExcelTable.End(builder)

def pack_ConstConquestExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstConquestExcel(builder, record, encrypt))
    ConstConquestExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstConquestExcelTable.Start(builder)
    ConstConquestExcelTable.AddDataList(builder, data_list)
    return ConstConquestExcelTable.End(builder)

def pack_ConstEventCommonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstEventCommonExcel(builder, record, encrypt))
    ConstEventCommonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstEventCommonExcelTable.Start(builder)
    ConstEventCommonExcelTable.AddDataList(builder, data_list)
    return ConstEventCommonExcelTable.End(builder)

def pack_ConstFieldExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstFieldExcel(builder, record, encrypt))
    ConstFieldExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstFieldExcelTable.Start(builder)
    ConstFieldExcelTable.AddDataList(builder, data_list)
    return ConstFieldExcelTable.End(builder)

def pack_ConstMinigameCCGExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstMinigameCCGExcel(builder, record, encrypt))
    ConstMinigameCCGExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstMinigameCCGExcelTable.Start(builder)
    ConstMinigameCCGExcelTable.AddDataList(builder, data_list)
    return ConstMinigameCCGExcelTable.End(builder)

def pack_ConstMinigameRoadPuzzleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstMinigameRoadPuzzleExcel(builder, record, encrypt))
    ConstMinigameRoadPuzzleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstMinigameRoadPuzzleExcelTable.Start(builder)
    ConstMinigameRoadPuzzleExcelTable.AddDataList(builder, data_list)
    return ConstMinigameRoadPuzzleExcelTable.End(builder)

def pack_ConstMiniGameShootingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstMiniGameShootingExcel(builder, record, encrypt))
    ConstMiniGameShootingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstMiniGameShootingExcelTable.Start(builder)
    ConstMiniGameShootingExcelTable.AddDataList(builder, data_list)
    return ConstMiniGameShootingExcelTable.End(builder)

def pack_ConstMinigameTBGExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstMinigameTBGExcel(builder, record, encrypt))
    ConstMinigameTBGExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstMinigameTBGExcelTable.Start(builder)
    ConstMinigameTBGExcelTable.AddDataList(builder, data_list)
    return ConstMinigameTBGExcelTable.End(builder)

def pack_ConstNewbieContentExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstNewbieContentExcel(builder, record, encrypt))
    ConstNewbieContentExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstNewbieContentExcelTable.Start(builder)
    ConstNewbieContentExcelTable.AddDataList(builder, data_list)
    return ConstNewbieContentExcelTable.End(builder)

def pack_ConstStrategyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConstStrategyExcel(builder, record, encrypt))
    ConstStrategyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConstStrategyExcelTable.Start(builder)
    ConstStrategyExcelTable.AddDataList(builder, data_list)
    return ConstStrategyExcelTable.End(builder)

def pack_CouponStuffExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CouponStuffExcel(builder, record, encrypt))
    CouponStuffExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CouponStuffExcelTable.Start(builder)
    CouponStuffExcelTable.AddDataList(builder, data_list)
    return CouponStuffExcelTable.End(builder)

def pack_DefaultCharacterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DefaultCharacterExcel(builder, record, encrypt))
    DefaultCharacterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DefaultCharacterExcelTable.Start(builder)
    DefaultCharacterExcelTable.AddDataList(builder, data_list)
    return DefaultCharacterExcelTable.End(builder)

def pack_DefaultEchelonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DefaultEchelonExcel(builder, record, encrypt))
    DefaultEchelonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DefaultEchelonExcelTable.Start(builder)
    DefaultEchelonExcelTable.AddDataList(builder, data_list)
    return DefaultEchelonExcelTable.End(builder)

def pack_DefaultFurnitureExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DefaultFurnitureExcel(builder, record, encrypt))
    DefaultFurnitureExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DefaultFurnitureExcelTable.Start(builder)
    DefaultFurnitureExcelTable.AddDataList(builder, data_list)
    return DefaultFurnitureExcelTable.End(builder)

def pack_DefaultMailExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DefaultMailExcel(builder, record, encrypt))
    DefaultMailExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DefaultMailExcelTable.Start(builder)
    DefaultMailExcelTable.AddDataList(builder, data_list)
    return DefaultMailExcelTable.End(builder)

def pack_DefaultParcelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DefaultParcelExcel(builder, record, encrypt))
    DefaultParcelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DefaultParcelExcelTable.Start(builder)
    DefaultParcelExcelTable.AddDataList(builder, data_list)
    return DefaultParcelExcelTable.End(builder)

def pack_EmoticonSpecialExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EmoticonSpecialExcel(builder, record, encrypt))
    EmoticonSpecialExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EmoticonSpecialExcelTable.Start(builder)
    EmoticonSpecialExcelTable.AddDataList(builder, data_list)
    return EmoticonSpecialExcelTable.End(builder)

def pack_EventContentBoxGachaElementExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentBoxGachaElementExcel(builder, record, encrypt))
    EventContentBoxGachaElementExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentBoxGachaElementExcelTable.Start(builder)
    EventContentBoxGachaElementExcelTable.AddDataList(builder, data_list)
    return EventContentBoxGachaElementExcelTable.End(builder)

def pack_EventContentExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentExcel(builder, record, encrypt))
    EventContentExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentExcelTable.Start(builder)
    EventContentExcelTable.AddDataList(builder, data_list)
    return EventContentExcelTable.End(builder)

def pack_FieldContentStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldContentStageExcel(builder, record, encrypt))
    FieldContentStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldContentStageExcelTable.Start(builder)
    FieldContentStageExcelTable.AddDataList(builder, data_list)
    return FieldContentStageExcelTable.End(builder)

def pack_FieldContentStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldContentStageRewardExcel(builder, record, encrypt))
    FieldContentStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldContentStageRewardExcelTable.Start(builder)
    FieldContentStageRewardExcelTable.AddDataList(builder, data_list)
    return FieldContentStageRewardExcelTable.End(builder)

def pack_FieldCurtainCallFreeModeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldCurtainCallFreeModeExcel(builder, record, encrypt))
    FieldCurtainCallFreeModeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldCurtainCallFreeModeExcelTable.Start(builder)
    FieldCurtainCallFreeModeExcelTable.AddDataList(builder, data_list)
    return FieldCurtainCallFreeModeExcelTable.End(builder)

def pack_FieldDateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldDateExcel(builder, record, encrypt))
    FieldDateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldDateExcelTable.Start(builder)
    FieldDateExcelTable.AddDataList(builder, data_list)
    return FieldDateExcelTable.End(builder)

def pack_FieldEvidenceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldEvidenceExcel(builder, record, encrypt))
    FieldEvidenceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldEvidenceExcelTable.Start(builder)
    FieldEvidenceExcelTable.AddDataList(builder, data_list)
    return FieldEvidenceExcelTable.End(builder)

def pack_FieldInteractionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldInteractionExcel(builder, record, encrypt))
    FieldInteractionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldInteractionExcelTable.Start(builder)
    FieldInteractionExcelTable.AddDataList(builder, data_list)
    return FieldInteractionExcelTable.End(builder)

def pack_FieldKeywordExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldKeywordExcel(builder, record, encrypt))
    FieldKeywordExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldKeywordExcelTable.Start(builder)
    FieldKeywordExcelTable.AddDataList(builder, data_list)
    return FieldKeywordExcelTable.End(builder)

def pack_FieldMasteryExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldMasteryExcel(builder, record, encrypt))
    FieldMasteryExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldMasteryExcelTable.Start(builder)
    FieldMasteryExcelTable.AddDataList(builder, data_list)
    return FieldMasteryExcelTable.End(builder)

def pack_FieldMasteryLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldMasteryLevelExcel(builder, record, encrypt))
    FieldMasteryLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldMasteryLevelExcelTable.Start(builder)
    FieldMasteryLevelExcelTable.AddDataList(builder, data_list)
    return FieldMasteryLevelExcelTable.End(builder)

def pack_FieldMasteryManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldMasteryManageExcel(builder, record, encrypt))
    FieldMasteryManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldMasteryManageExcelTable.Start(builder)
    FieldMasteryManageExcelTable.AddDataList(builder, data_list)
    return FieldMasteryManageExcelTable.End(builder)

def pack_FieldQuestExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldQuestExcel(builder, record, encrypt))
    FieldQuestExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldQuestExcelTable.Start(builder)
    FieldQuestExcelTable.AddDataList(builder, data_list)
    return FieldQuestExcelTable.End(builder)

def pack_FieldRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldRewardExcel(builder, record, encrypt))
    FieldRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldRewardExcelTable.Start(builder)
    FieldRewardExcelTable.AddDataList(builder, data_list)
    return FieldRewardExcelTable.End(builder)

def pack_FieldSceneExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldSceneExcel(builder, record, encrypt))
    FieldSceneExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldSceneExcelTable.Start(builder)
    FieldSceneExcelTable.AddDataList(builder, data_list)
    return FieldSceneExcelTable.End(builder)

def pack_FieldSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldSeasonExcel(builder, record, encrypt))
    FieldSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldSeasonExcelTable.Start(builder)
    FieldSeasonExcelTable.AddDataList(builder, data_list)
    return FieldSeasonExcelTable.End(builder)

def pack_FieldStoryStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldStoryStageExcel(builder, record, encrypt))
    FieldStoryStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldStoryStageExcelTable.Start(builder)
    FieldStoryStageExcelTable.AddDataList(builder, data_list)
    return FieldStoryStageExcelTable.End(builder)

def pack_FieldTutorialExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldTutorialExcel(builder, record, encrypt))
    FieldTutorialExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldTutorialExcelTable.Start(builder)
    FieldTutorialExcelTable.AddDataList(builder, data_list)
    return FieldTutorialExcelTable.End(builder)

def pack_FieldWorldMapZoneExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FieldWorldMapZoneExcel(builder, record, encrypt))
    FieldWorldMapZoneExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FieldWorldMapZoneExcelTable.Start(builder)
    FieldWorldMapZoneExcelTable.AddDataList(builder, data_list)
    return FieldWorldMapZoneExcelTable.End(builder)

def pack_GachaSelectPickupGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaSelectPickupGroupExcel(builder, record, encrypt))
    GachaSelectPickupGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaSelectPickupGroupExcelTable.Start(builder)
    GachaSelectPickupGroupExcelTable.AddDataList(builder, data_list)
    return GachaSelectPickupGroupExcelTable.End(builder)

def pack_KnockBackExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_KnockBackExcel(builder, record, encrypt))
    KnockBackExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    KnockBackExcelTable.Start(builder)
    KnockBackExcelTable.AddDataList(builder, data_list)
    return KnockBackExcelTable.End(builder)

def pack_LimitedStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LimitedStageExcel(builder, record, encrypt))
    LimitedStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LimitedStageExcelTable.Start(builder)
    LimitedStageExcelTable.AddDataList(builder, data_list)
    return LimitedStageExcelTable.End(builder)

def pack_LimitedStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LimitedStageRewardExcel(builder, record, encrypt))
    LimitedStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LimitedStageRewardExcelTable.Start(builder)
    LimitedStageRewardExcelTable.AddDataList(builder, data_list)
    return LimitedStageRewardExcelTable.End(builder)

def pack_LimitedStageSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LimitedStageSeasonExcel(builder, record, encrypt))
    LimitedStageSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LimitedStageSeasonExcelTable.Start(builder)
    LimitedStageSeasonExcelTable.AddDataList(builder, data_list)
    return LimitedStageSeasonExcelTable.End(builder)

def pack_LocalizeCCGExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeCCGExcel(builder, record, encrypt))
    LocalizeCCGExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeCCGExcelTable.Start(builder)
    LocalizeCCGExcelTable.AddDataList(builder, data_list)
    return LocalizeCCGExcelTable.End(builder)

def pack_LocalizeFieldExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeFieldExcel(builder, record, encrypt))
    LocalizeFieldExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeFieldExcelTable.Start(builder)
    LocalizeFieldExcelTable.AddDataList(builder, data_list)
    return LocalizeFieldExcelTable.End(builder)

def pack_MinigameCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCardExcel(builder, record, encrypt))
    MinigameCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCardExcelTable.Start(builder)
    MinigameCardExcelTable.AddDataList(builder, data_list)
    return MinigameCardExcelTable.End(builder)

def pack_MinigameRoadExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameRoadExcel(builder, record, encrypt))
    MinigameRoadExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameRoadExcelTable.Start(builder)
    MinigameRoadExcelTable.AddDataList(builder, data_list)
    return MinigameRoadExcelTable.End(builder)

def pack_NormalSkillTemplateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_NormalSkillTemplateExcel(builder, record, encrypt))
    NormalSkillTemplateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    NormalSkillTemplateExcelTable.Start(builder)
    NormalSkillTemplateExcelTable.AddDataList(builder, data_list)
    return NormalSkillTemplateExcelTable.End(builder)

def pack_ObstacleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ObstacleExcel(builder, record, encrypt))
    ObstacleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ObstacleExcelTable.Start(builder)
    ObstacleExcelTable.AddDataList(builder, data_list)
    return ObstacleExcelTable.End(builder)

def pack_ProtocolSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProtocolSettingExcel(builder, record, encrypt))
    ProtocolSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProtocolSettingExcelTable.Start(builder)
    ProtocolSettingExcelTable.AddDataList(builder, data_list)
    return ProtocolSettingExcelTable.End(builder)

def pack_RecipeCraftExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RecipeCraftExcel(builder, record, encrypt))
    RecipeCraftExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RecipeCraftExcelTable.Start(builder)
    RecipeCraftExcelTable.AddDataList(builder, data_list)
    return RecipeCraftExcelTable.End(builder)

def pack_ScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioExcel(builder, record, encrypt))
    ScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioExcelTable.Start(builder)
    ScenarioExcelTable.AddDataList(builder, data_list)
    return ScenarioExcelTable.End(builder)

def pack_ScenarioReplayExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioReplayExcel(builder, record, encrypt))
    ScenarioReplayExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioReplayExcelTable.Start(builder)
    ScenarioReplayExcelTable.AddDataList(builder, data_list)
    return ScenarioReplayExcelTable.End(builder)

def pack_ScenarioScriptField1ExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioScriptField1Excel(builder, record, encrypt))
    ScenarioScriptField1ExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioScriptField1ExcelTable.Start(builder)
    ScenarioScriptField1ExcelTable.AddDataList(builder, data_list)
    return ScenarioScriptField1ExcelTable.End(builder)

def pack_SpecialLobbyIllustExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SpecialLobbyIllustExcel(builder, record, encrypt))
    SpecialLobbyIllustExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SpecialLobbyIllustExcelTable.Start(builder)
    SpecialLobbyIllustExcelTable.AddDataList(builder, data_list)
    return SpecialLobbyIllustExcelTable.End(builder)

def pack_StringTestExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StringTestExcel(builder, record, encrypt))
    StringTestExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StringTestExcelTable.Start(builder)
    StringTestExcelTable.AddDataList(builder, data_list)
    return StringTestExcelTable.End(builder)

def pack_SystemMailExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SystemMailExcel(builder, record, encrypt))
    SystemMailExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SystemMailExcelTable.Start(builder)
    SystemMailExcelTable.AddDataList(builder, data_list)
    return SystemMailExcelTable.End(builder)

def pack_TacticArenaSimulatorSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticArenaSimulatorSettingExcel(builder, record, encrypt))
    TacticArenaSimulatorSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticArenaSimulatorSettingExcelTable.Start(builder)
    TacticArenaSimulatorSettingExcelTable.AddDataList(builder, data_list)
    return TacticArenaSimulatorSettingExcelTable.End(builder)

def pack_TacticDamageSimulatorSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticDamageSimulatorSettingExcel(builder, record, encrypt))
    TacticDamageSimulatorSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticDamageSimulatorSettingExcelTable.Start(builder)
    TacticDamageSimulatorSettingExcelTable.AddDataList(builder, data_list)
    return TacticDamageSimulatorSettingExcelTable.End(builder)

def pack_TacticSimulatorSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticSimulatorSettingExcel(builder, record, encrypt))
    TacticSimulatorSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticSimulatorSettingExcelTable.Start(builder)
    TacticSimulatorSettingExcelTable.AddDataList(builder, data_list)
    return TacticSimulatorSettingExcelTable.End(builder)

def pack_TacticTimeAttackSimulatorConfigExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticTimeAttackSimulatorConfigExcel(builder, record, encrypt))
    TacticTimeAttackSimulatorConfigExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticTimeAttackSimulatorConfigExcelTable.Start(builder)
    TacticTimeAttackSimulatorConfigExcelTable.AddDataList(builder, data_list)
    return TacticTimeAttackSimulatorConfigExcelTable.End(builder)

def pack_TagExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TagExcel(builder, record, encrypt))
    TagExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TagExcelTable.Start(builder)
    TagExcelTable.AddDataList(builder, data_list)
    return TagExcelTable.End(builder)

def pack_TranscendenceRecipeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TranscendenceRecipeExcel(builder, record, encrypt))
    TranscendenceRecipeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TranscendenceRecipeExcelTable.Start(builder)
    TranscendenceRecipeExcelTable.AddDataList(builder, data_list)
    return TranscendenceRecipeExcelTable.End(builder)

def pack_WeekDungeonFindGiftRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WeekDungeonFindGiftRewardExcel(builder, record, encrypt))
    WeekDungeonFindGiftRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WeekDungeonFindGiftRewardExcelTable.Start(builder)
    WeekDungeonFindGiftRewardExcelTable.AddDataList(builder, data_list)
    return WeekDungeonFindGiftRewardExcelTable.End(builder)

def pack_AcademyFavorScheduleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyFavorScheduleExcel(builder, record, encrypt))
    AcademyFavorScheduleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyFavorScheduleExcelTable.Start(builder)
    AcademyFavorScheduleExcelTable.AddDataList(builder, data_list)
    return AcademyFavorScheduleExcelTable.End(builder)

def pack_AcademyLocationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyLocationExcel(builder, record, encrypt))
    AcademyLocationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyLocationExcelTable.Start(builder)
    AcademyLocationExcelTable.AddDataList(builder, data_list)
    return AcademyLocationExcelTable.End(builder)

def pack_AcademyLocationRankExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyLocationRankExcel(builder, record, encrypt))
    AcademyLocationRankExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyLocationRankExcelTable.Start(builder)
    AcademyLocationRankExcelTable.AddDataList(builder, data_list)
    return AcademyLocationRankExcelTable.End(builder)

def pack_AcademyMessangerExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyMessangerExcel(builder, record, encrypt))
    AcademyMessangerExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyMessangerExcelTable.Start(builder)
    AcademyMessangerExcelTable.AddDataList(builder, data_list)
    return AcademyMessangerExcelTable.End(builder)

def pack_AcademyRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyRewardExcel(builder, record, encrypt))
    AcademyRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyRewardExcelTable.Start(builder)
    AcademyRewardExcelTable.AddDataList(builder, data_list)
    return AcademyRewardExcelTable.End(builder)

def pack_AcademyTicketExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyTicketExcel(builder, record, encrypt))
    AcademyTicketExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyTicketExcelTable.Start(builder)
    AcademyTicketExcelTable.AddDataList(builder, data_list)
    return AcademyTicketExcelTable.End(builder)

def pack_AcademyZoneExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AcademyZoneExcel(builder, record, encrypt))
    AcademyZoneExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AcademyZoneExcelTable.Start(builder)
    AcademyZoneExcelTable.AddDataList(builder, data_list)
    return AcademyZoneExcelTable.End(builder)

def pack_AccountLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AccountLevelExcel(builder, record, encrypt))
    AccountLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AccountLevelExcelTable.Start(builder)
    AccountLevelExcelTable.AddDataList(builder, data_list)
    return AccountLevelExcelTable.End(builder)

def pack_AccountLevelRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AccountLevelRewardExcel(builder, record, encrypt))
    AccountLevelRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AccountLevelRewardExcelTable.Start(builder)
    AccountLevelRewardExcelTable.AddDataList(builder, data_list)
    return AccountLevelRewardExcelTable.End(builder)

def pack_ArenaLevelSectionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaLevelSectionExcel(builder, record, encrypt))
    ArenaLevelSectionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaLevelSectionExcelTable.Start(builder)
    ArenaLevelSectionExcelTable.AddDataList(builder, data_list)
    return ArenaLevelSectionExcelTable.End(builder)

def pack_ArenaMapExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaMapExcel(builder, record, encrypt))
    ArenaMapExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaMapExcelTable.Start(builder)
    ArenaMapExcelTable.AddDataList(builder, data_list)
    return ArenaMapExcelTable.End(builder)

def pack_ArenaNPCExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaNPCExcel(builder, record, encrypt))
    ArenaNPCExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaNPCExcelTable.Start(builder)
    ArenaNPCExcelTable.AddDataList(builder, data_list)
    return ArenaNPCExcelTable.End(builder)

def pack_ArenaRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaRewardExcel(builder, record, encrypt))
    ArenaRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaRewardExcelTable.Start(builder)
    ArenaRewardExcelTable.AddDataList(builder, data_list)
    return ArenaRewardExcelTable.End(builder)

def pack_ArenaSeasonCloseRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaSeasonCloseRewardExcel(builder, record, encrypt))
    ArenaSeasonCloseRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaSeasonCloseRewardExcelTable.Start(builder)
    ArenaSeasonCloseRewardExcelTable.AddDataList(builder, data_list)
    return ArenaSeasonCloseRewardExcelTable.End(builder)

def pack_ArenaSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ArenaSeasonExcel(builder, record, encrypt))
    ArenaSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ArenaSeasonExcelTable.Start(builder)
    ArenaSeasonExcelTable.AddDataList(builder, data_list)
    return ArenaSeasonExcelTable.End(builder)

def pack_AssistEchelonTypeConvertExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AssistEchelonTypeConvertExcel(builder, record, encrypt))
    AssistEchelonTypeConvertExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AssistEchelonTypeConvertExcelTable.Start(builder)
    AssistEchelonTypeConvertExcelTable.AddDataList(builder, data_list)
    return AssistEchelonTypeConvertExcelTable.End(builder)

def pack_AssistRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AssistRewardExcel(builder, record, encrypt))
    AssistRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AssistRewardExcelTable.Start(builder)
    AssistRewardExcelTable.AddDataList(builder, data_list)
    return AssistRewardExcelTable.End(builder)

def pack_AssistSlotExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AssistSlotExcel(builder, record, encrypt))
    AssistSlotExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AssistSlotExcelTable.Start(builder)
    AssistSlotExcelTable.AddDataList(builder, data_list)
    return AssistSlotExcelTable.End(builder)

def pack_AttendanceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AttendanceExcel(builder, record, encrypt))
    AttendanceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AttendanceExcelTable.Start(builder)
    AttendanceExcelTable.AddDataList(builder, data_list)
    return AttendanceExcelTable.End(builder)

def pack_AttendanceRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AttendanceRewardExcel(builder, record, encrypt))
    AttendanceRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AttendanceRewardExcelTable.Start(builder)
    AttendanceRewardExcelTable.AddDataList(builder, data_list)
    return AttendanceRewardExcelTable.End(builder)

def pack_AudioAnimatorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_AudioAnimatorExcel(builder, record, encrypt))
    AudioAnimatorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    AudioAnimatorExcelTable.Start(builder)
    AudioAnimatorExcelTable.AddDataList(builder, data_list)
    return AudioAnimatorExcelTable.End(builder)

def pack_BattleLevelFactorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattleLevelFactorExcel(builder, record, encrypt))
    BattleLevelFactorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattleLevelFactorExcelTable.Start(builder)
    BattleLevelFactorExcelTable.AddDataList(builder, data_list)
    return BattleLevelFactorExcelTable.End(builder)

def pack_BattlePassExpLimitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassExpLimitExcel(builder, record, encrypt))
    BattlePassExpLimitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassExpLimitExcelTable.Start(builder)
    BattlePassExpLimitExcelTable.AddDataList(builder, data_list)
    return BattlePassExpLimitExcelTable.End(builder)

def pack_BattlePassFlavorTextExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassFlavorTextExcel(builder, record, encrypt))
    BattlePassFlavorTextExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassFlavorTextExcelTable.Start(builder)
    BattlePassFlavorTextExcelTable.AddDataList(builder, data_list)
    return BattlePassFlavorTextExcelTable.End(builder)

def pack_BattlePassInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassInfoExcel(builder, record, encrypt))
    BattlePassInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassInfoExcelTable.Start(builder)
    BattlePassInfoExcelTable.AddDataList(builder, data_list)
    return BattlePassInfoExcelTable.End(builder)

def pack_BattlePassLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassLevelExcel(builder, record, encrypt))
    BattlePassLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassLevelExcelTable.Start(builder)
    BattlePassLevelExcelTable.AddDataList(builder, data_list)
    return BattlePassLevelExcelTable.End(builder)

def pack_BattlePassMissionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassMissionExcel(builder, record, encrypt))
    BattlePassMissionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassMissionExcelTable.Start(builder)
    BattlePassMissionExcelTable.AddDataList(builder, data_list)
    return BattlePassMissionExcelTable.End(builder)

def pack_BattlePassRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BattlePassRewardExcel(builder, record, encrypt))
    BattlePassRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BattlePassRewardExcelTable.Start(builder)
    BattlePassRewardExcelTable.AddDataList(builder, data_list)
    return BattlePassRewardExcelTable.End(builder)

def pack_BGMExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BGMExcel(builder, record, encrypt))
    BGMExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BGMExcelTable.Start(builder)
    BGMExcelTable.AddDataList(builder, data_list)
    return BGMExcelTable.End(builder)

def pack_BGMRaidExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BGMRaidExcel(builder, record, encrypt))
    BGMRaidExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BGMRaidExcelTable.Start(builder)
    BGMRaidExcelTable.AddDataList(builder, data_list)
    return BGMRaidExcelTable.End(builder)

def pack_BGMUIExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BGMUIExcel(builder, record, encrypt))
    BGMUIExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BGMUIExcelTable.Start(builder)
    BGMUIExcelTable.AddDataList(builder, data_list)
    return BGMUIExcelTable.End(builder)

def pack_BossExternalBTExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BossExternalBTExcel(builder, record, encrypt))
    BossExternalBTExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BossExternalBTExcelTable.Start(builder)
    BossExternalBTExcelTable.AddDataList(builder, data_list)
    return BossExternalBTExcelTable.End(builder)

def pack_BulletArmorDamageFactorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_BulletArmorDamageFactorExcel(builder, record, encrypt))
    BulletArmorDamageFactorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    BulletArmorDamageFactorExcelTable.Start(builder)
    BulletArmorDamageFactorExcelTable.AddDataList(builder, data_list)
    return BulletArmorDamageFactorExcelTable.End(builder)

def pack_CafeInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CafeInfoExcel(builder, record, encrypt))
    CafeInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CafeInfoExcelTable.Start(builder)
    CafeInfoExcelTable.AddDataList(builder, data_list)
    return CafeInfoExcelTable.End(builder)

def pack_CafeInteractionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CafeInteractionExcel(builder, record, encrypt))
    CafeInteractionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CafeInteractionExcelTable.Start(builder)
    CafeInteractionExcelTable.AddDataList(builder, data_list)
    return CafeInteractionExcelTable.End(builder)

def pack_CafeProductionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CafeProductionExcel(builder, record, encrypt))
    CafeProductionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CafeProductionExcelTable.Start(builder)
    CafeProductionExcelTable.AddDataList(builder, data_list)
    return CafeProductionExcelTable.End(builder)

def pack_CafeRankExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CafeRankExcel(builder, record, encrypt))
    CafeRankExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CafeRankExcelTable.Start(builder)
    CafeRankExcelTable.AddDataList(builder, data_list)
    return CafeRankExcelTable.End(builder)

def pack_CameraExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CameraExcel(builder, record, encrypt))
    CameraExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CameraExcelTable.Start(builder)
    CameraExcelTable.AddDataList(builder, data_list)
    return CameraExcelTable.End(builder)

def pack_CampaignChapterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignChapterExcel(builder, record, encrypt))
    CampaignChapterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignChapterExcelTable.Start(builder)
    CampaignChapterExcelTable.AddDataList(builder, data_list)
    return CampaignChapterExcelTable.End(builder)

def pack_CampaignChapterRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignChapterRewardExcel(builder, record, encrypt))
    CampaignChapterRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignChapterRewardExcelTable.Start(builder)
    CampaignChapterRewardExcelTable.AddDataList(builder, data_list)
    return CampaignChapterRewardExcelTable.End(builder)

def pack_CampaignStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignStageExcel(builder, record, encrypt))
    CampaignStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignStageExcelTable.Start(builder)
    CampaignStageExcelTable.AddDataList(builder, data_list)
    return CampaignStageExcelTable.End(builder)

def pack_CampaignStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignStageRewardExcel(builder, record, encrypt))
    CampaignStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignStageRewardExcelTable.Start(builder)
    CampaignStageRewardExcelTable.AddDataList(builder, data_list)
    return CampaignStageRewardExcelTable.End(builder)

def pack_CampaignStrategyObjectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignStrategyObjectExcel(builder, record, encrypt))
    CampaignStrategyObjectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignStrategyObjectExcelTable.Start(builder)
    CampaignStrategyObjectExcelTable.AddDataList(builder, data_list)
    return CampaignStrategyObjectExcelTable.End(builder)

def pack_CampaignUnitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CampaignUnitExcel(builder, record, encrypt))
    CampaignUnitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CampaignUnitExcelTable.Start(builder)
    CampaignUnitExcelTable.AddDataList(builder, data_list)
    return CampaignUnitExcelTable.End(builder)

def pack_CharacterAcademyTagsExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterAcademyTagsExcel(builder, record, encrypt))
    CharacterAcademyTagsExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterAcademyTagsExcelTable.Start(builder)
    CharacterAcademyTagsExcelTable.AddDataList(builder, data_list)
    return CharacterAcademyTagsExcelTable.End(builder)

def pack_CharacterAIExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterAIExcel(builder, record, encrypt))
    CharacterAIExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterAIExcelTable.Start(builder)
    CharacterAIExcelTable.AddDataList(builder, data_list)
    return CharacterAIExcelTable.End(builder)

def pack_CharacterCalculationLimitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterCalculationLimitExcel(builder, record, encrypt))
    CharacterCalculationLimitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterCalculationLimitExcelTable.Start(builder)
    CharacterCalculationLimitExcelTable.AddDataList(builder, data_list)
    return CharacterCalculationLimitExcelTable.End(builder)

def pack_CharacterCombatSkinExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterCombatSkinExcel(builder, record, encrypt))
    CharacterCombatSkinExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterCombatSkinExcelTable.Start(builder)
    CharacterCombatSkinExcelTable.AddDataList(builder, data_list)
    return CharacterCombatSkinExcelTable.End(builder)

def pack_CharacterDialogBattlePassExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogBattlePassExcel(builder, record, encrypt))
    CharacterDialogBattlePassExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogBattlePassExcelTable.Start(builder)
    CharacterDialogBattlePassExcelTable.AddDataList(builder, data_list)
    return CharacterDialogBattlePassExcelTable.End(builder)

def pack_CharacterDialogEmojiExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogEmojiExcel(builder, record, encrypt))
    CharacterDialogEmojiExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogEmojiExcelTable.Start(builder)
    CharacterDialogEmojiExcelTable.AddDataList(builder, data_list)
    return CharacterDialogEmojiExcelTable.End(builder)

def pack_CharacterDialogEventExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogEventExcel(builder, record, encrypt))
    CharacterDialogEventExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogEventExcelTable.Start(builder)
    CharacterDialogEventExcelTable.AddDataList(builder, data_list)
    return CharacterDialogEventExcelTable.End(builder)

def pack_CharacterDialogExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogExcel(builder, record, encrypt))
    CharacterDialogExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogExcelTable.Start(builder)
    CharacterDialogExcelTable.AddDataList(builder, data_list)
    return CharacterDialogExcelTable.End(builder)

def pack_CharacterDialogSubtitleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterDialogSubtitleExcel(builder, record, encrypt))
    CharacterDialogSubtitleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterDialogSubtitleExcelTable.Start(builder)
    CharacterDialogSubtitleExcelTable.AddDataList(builder, data_list)
    return CharacterDialogSubtitleExcelTable.End(builder)

def pack_CharacterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterExcel(builder, record, encrypt))
    CharacterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterExcelTable.Start(builder)
    CharacterExcelTable.AddDataList(builder, data_list)
    return CharacterExcelTable.End(builder)

def pack_CharacterGearExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterGearExcel(builder, record, encrypt))
    CharacterGearExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterGearExcelTable.Start(builder)
    CharacterGearExcelTable.AddDataList(builder, data_list)
    return CharacterGearExcelTable.End(builder)

def pack_CharacterGearLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterGearLevelExcel(builder, record, encrypt))
    CharacterGearLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterGearLevelExcelTable.Start(builder)
    CharacterGearLevelExcelTable.AddDataList(builder, data_list)
    return CharacterGearLevelExcelTable.End(builder)

def pack_CharacterIllustCoordinateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterIllustCoordinateExcel(builder, record, encrypt))
    CharacterIllustCoordinateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterIllustCoordinateExcelTable.Start(builder)
    CharacterIllustCoordinateExcelTable.AddDataList(builder, data_list)
    return CharacterIllustCoordinateExcelTable.End(builder)

def pack_CharacterLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterLevelExcel(builder, record, encrypt))
    CharacterLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterLevelExcelTable.Start(builder)
    CharacterLevelExcelTable.AddDataList(builder, data_list)
    return CharacterLevelExcelTable.End(builder)

def pack_CharacterLevelStatFactorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterLevelStatFactorExcel(builder, record, encrypt))
    CharacterLevelStatFactorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterLevelStatFactorExcelTable.Start(builder)
    CharacterLevelStatFactorExcelTable.AddDataList(builder, data_list)
    return CharacterLevelStatFactorExcelTable.End(builder)

def pack_CharacterPotentialExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterPotentialExcel(builder, record, encrypt))
    CharacterPotentialExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterPotentialExcelTable.Start(builder)
    CharacterPotentialExcelTable.AddDataList(builder, data_list)
    return CharacterPotentialExcelTable.End(builder)

def pack_CharacterPotentialRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterPotentialRewardExcel(builder, record, encrypt))
    CharacterPotentialRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterPotentialRewardExcelTable.Start(builder)
    CharacterPotentialRewardExcelTable.AddDataList(builder, data_list)
    return CharacterPotentialRewardExcelTable.End(builder)

def pack_CharacterPotentialStatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterPotentialStatExcel(builder, record, encrypt))
    CharacterPotentialStatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterPotentialStatExcelTable.Start(builder)
    CharacterPotentialStatExcelTable.AddDataList(builder, data_list)
    return CharacterPotentialStatExcelTable.End(builder)

def pack_CharacterSkillListExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterSkillListExcel(builder, record, encrypt))
    CharacterSkillListExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterSkillListExcelTable.Start(builder)
    CharacterSkillListExcelTable.AddDataList(builder, data_list)
    return CharacterSkillListExcelTable.End(builder)

def pack_CharacterStatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterStatExcel(builder, record, encrypt))
    CharacterStatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterStatExcelTable.Start(builder)
    CharacterStatExcelTable.AddDataList(builder, data_list)
    return CharacterStatExcelTable.End(builder)

def pack_CharacterStatLimitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterStatLimitExcel(builder, record, encrypt))
    CharacterStatLimitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterStatLimitExcelTable.Start(builder)
    CharacterStatLimitExcelTable.AddDataList(builder, data_list)
    return CharacterStatLimitExcelTable.End(builder)

def pack_CharacterStatsDetailExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterStatsDetailExcel(builder, record, encrypt))
    CharacterStatsDetailExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterStatsDetailExcelTable.Start(builder)
    CharacterStatsDetailExcelTable.AddDataList(builder, data_list)
    return CharacterStatsDetailExcelTable.End(builder)

def pack_CharacterStatsTransExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterStatsTransExcel(builder, record, encrypt))
    CharacterStatsTransExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterStatsTransExcelTable.Start(builder)
    CharacterStatsTransExcelTable.AddDataList(builder, data_list)
    return CharacterStatsTransExcelTable.End(builder)

def pack_CharacterTranscendenceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterTranscendenceExcel(builder, record, encrypt))
    CharacterTranscendenceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterTranscendenceExcelTable.Start(builder)
    CharacterTranscendenceExcelTable.AddDataList(builder, data_list)
    return CharacterTranscendenceExcelTable.End(builder)

def pack_CharacterVictoryInteractionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterVictoryInteractionExcel(builder, record, encrypt))
    CharacterVictoryInteractionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterVictoryInteractionExcelTable.Start(builder)
    CharacterVictoryInteractionExcelTable.AddDataList(builder, data_list)
    return CharacterVictoryInteractionExcelTable.End(builder)

def pack_CharacterVoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterVoiceExcel(builder, record, encrypt))
    CharacterVoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterVoiceExcelTable.Start(builder)
    CharacterVoiceExcelTable.AddDataList(builder, data_list)
    return CharacterVoiceExcelTable.End(builder)

def pack_CharacterVoiceSubtitleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterVoiceSubtitleExcel(builder, record, encrypt))
    CharacterVoiceSubtitleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterVoiceSubtitleExcelTable.Start(builder)
    CharacterVoiceSubtitleExcelTable.AddDataList(builder, data_list)
    return CharacterVoiceSubtitleExcelTable.End(builder)

def pack_CharacterWeaponExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterWeaponExcel(builder, record, encrypt))
    CharacterWeaponExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterWeaponExcelTable.Start(builder)
    CharacterWeaponExcelTable.AddDataList(builder, data_list)
    return CharacterWeaponExcelTable.End(builder)

def pack_CharacterWeaponExpBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterWeaponExpBonusExcel(builder, record, encrypt))
    CharacterWeaponExpBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterWeaponExpBonusExcelTable.Start(builder)
    CharacterWeaponExpBonusExcelTable.AddDataList(builder, data_list)
    return CharacterWeaponExpBonusExcelTable.End(builder)

def pack_CharacterWeaponLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CharacterWeaponLevelExcel(builder, record, encrypt))
    CharacterWeaponLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CharacterWeaponLevelExcelTable.Start(builder)
    CharacterWeaponLevelExcelTable.AddDataList(builder, data_list)
    return CharacterWeaponLevelExcelTable.End(builder)

def pack_CheatCodeListExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CheatCodeListExcel(builder, record, encrypt))
    CheatCodeListExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CheatCodeListExcelTable.Start(builder)
    CheatCodeListExcelTable.AddDataList(builder, data_list)
    return CheatCodeListExcelTable.End(builder)

def pack_ClanChattingEmojiExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ClanChattingEmojiExcel(builder, record, encrypt))
    ClanChattingEmojiExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ClanChattingEmojiExcelTable.Start(builder)
    ClanChattingEmojiExcelTable.AddDataList(builder, data_list)
    return ClanChattingEmojiExcelTable.End(builder)

def pack_ClanRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ClanRewardExcel(builder, record, encrypt))
    ClanRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ClanRewardExcelTable.Start(builder)
    ClanRewardExcelTable.AddDataList(builder, data_list)
    return ClanRewardExcelTable.End(builder)

def pack_CombatEmojiExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CombatEmojiExcel(builder, record, encrypt))
    CombatEmojiExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CombatEmojiExcelTable.Start(builder)
    CombatEmojiExcelTable.AddDataList(builder, data_list)
    return CombatEmojiExcelTable.End(builder)

def pack_ConquestCalculateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestCalculateExcel(builder, record, encrypt))
    ConquestCalculateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestCalculateExcelTable.Start(builder)
    ConquestCalculateExcelTable.AddDataList(builder, data_list)
    return ConquestCalculateExcelTable.End(builder)

def pack_ConquestCameraSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestCameraSettingExcel(builder, record, encrypt))
    ConquestCameraSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestCameraSettingExcelTable.Start(builder)
    ConquestCameraSettingExcelTable.AddDataList(builder, data_list)
    return ConquestCameraSettingExcelTable.End(builder)

def pack_ConquestErosionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestErosionExcel(builder, record, encrypt))
    ConquestErosionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestErosionExcelTable.Start(builder)
    ConquestErosionExcelTable.AddDataList(builder, data_list)
    return ConquestErosionExcelTable.End(builder)

def pack_ConquestErosionUnitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestErosionUnitExcel(builder, record, encrypt))
    ConquestErosionUnitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestErosionUnitExcelTable.Start(builder)
    ConquestErosionUnitExcelTable.AddDataList(builder, data_list)
    return ConquestErosionUnitExcelTable.End(builder)

def pack_ConquestEventExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestEventExcel(builder, record, encrypt))
    ConquestEventExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestEventExcelTable.Start(builder)
    ConquestEventExcelTable.AddDataList(builder, data_list)
    return ConquestEventExcelTable.End(builder)

def pack_ConquestGroupBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestGroupBonusExcel(builder, record, encrypt))
    ConquestGroupBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestGroupBonusExcelTable.Start(builder)
    ConquestGroupBonusExcelTable.AddDataList(builder, data_list)
    return ConquestGroupBonusExcelTable.End(builder)

def pack_ConquestGroupBuffExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestGroupBuffExcel(builder, record, encrypt))
    ConquestGroupBuffExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestGroupBuffExcelTable.Start(builder)
    ConquestGroupBuffExcelTable.AddDataList(builder, data_list)
    return ConquestGroupBuffExcelTable.End(builder)

def pack_ConquestMapExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestMapExcel(builder, record, encrypt))
    ConquestMapExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestMapExcelTable.Start(builder)
    ConquestMapExcelTable.AddDataList(builder, data_list)
    return ConquestMapExcelTable.End(builder)

def pack_ConquestObjectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestObjectExcel(builder, record, encrypt))
    ConquestObjectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestObjectExcelTable.Start(builder)
    ConquestObjectExcelTable.AddDataList(builder, data_list)
    return ConquestObjectExcelTable.End(builder)

def pack_ConquestPlayGuideExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestPlayGuideExcel(builder, record, encrypt))
    ConquestPlayGuideExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestPlayGuideExcelTable.Start(builder)
    ConquestPlayGuideExcelTable.AddDataList(builder, data_list)
    return ConquestPlayGuideExcelTable.End(builder)

def pack_ConquestProgressResourceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestProgressResourceExcel(builder, record, encrypt))
    ConquestProgressResourceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestProgressResourceExcelTable.Start(builder)
    ConquestProgressResourceExcelTable.AddDataList(builder, data_list)
    return ConquestProgressResourceExcelTable.End(builder)

def pack_ConquestRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestRewardExcel(builder, record, encrypt))
    ConquestRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestRewardExcelTable.Start(builder)
    ConquestRewardExcelTable.AddDataList(builder, data_list)
    return ConquestRewardExcelTable.End(builder)

def pack_ConquestTileExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestTileExcel(builder, record, encrypt))
    ConquestTileExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestTileExcelTable.Start(builder)
    ConquestTileExcelTable.AddDataList(builder, data_list)
    return ConquestTileExcelTable.End(builder)

def pack_ConquestUnexpectedEventExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestUnexpectedEventExcel(builder, record, encrypt))
    ConquestUnexpectedEventExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestUnexpectedEventExcelTable.Start(builder)
    ConquestUnexpectedEventExcelTable.AddDataList(builder, data_list)
    return ConquestUnexpectedEventExcelTable.End(builder)

def pack_ConquestUnitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ConquestUnitExcel(builder, record, encrypt))
    ConquestUnitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ConquestUnitExcelTable.Start(builder)
    ConquestUnitExcelTable.AddDataList(builder, data_list)
    return ConquestUnitExcelTable.End(builder)

def pack_ContentEnterCostReduceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ContentEnterCostReduceExcel(builder, record, encrypt))
    ContentEnterCostReduceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ContentEnterCostReduceExcelTable.Start(builder)
    ContentEnterCostReduceExcelTable.AddDataList(builder, data_list)
    return ContentEnterCostReduceExcelTable.End(builder)

def pack_ContentsFeverExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ContentsFeverExcel(builder, record, encrypt))
    ContentsFeverExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ContentsFeverExcelTable.Start(builder)
    ContentsFeverExcelTable.AddDataList(builder, data_list)
    return ContentsFeverExcelTable.End(builder)

def pack_ContentSpoilerPopupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ContentSpoilerPopupExcel(builder, record, encrypt))
    ContentSpoilerPopupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ContentSpoilerPopupExcelTable.Start(builder)
    ContentSpoilerPopupExcelTable.AddDataList(builder, data_list)
    return ContentSpoilerPopupExcelTable.End(builder)

def pack_ContentsScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ContentsScenarioExcel(builder, record, encrypt))
    ContentsScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ContentsScenarioExcelTable.Start(builder)
    ContentsScenarioExcelTable.AddDataList(builder, data_list)
    return ContentsScenarioExcelTable.End(builder)

def pack_ContentsShortcutExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ContentsShortcutExcel(builder, record, encrypt))
    ContentsShortcutExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ContentsShortcutExcelTable.Start(builder)
    ContentsShortcutExcelTable.AddDataList(builder, data_list)
    return ContentsShortcutExcelTable.End(builder)

def pack_CostumeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CostumeExcel(builder, record, encrypt))
    CostumeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CostumeExcelTable.Start(builder)
    CostumeExcelTable.AddDataList(builder, data_list)
    return CostumeExcelTable.End(builder)

def pack_CurrencyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_CurrencyExcel(builder, record, encrypt))
    CurrencyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    CurrencyExcelTable.Start(builder)
    CurrencyExcelTable.AddDataList(builder, data_list)
    return CurrencyExcelTable.End(builder)

def pack_DuplicateBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_DuplicateBonusExcel(builder, record, encrypt))
    DuplicateBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    DuplicateBonusExcelTable.Start(builder)
    DuplicateBonusExcelTable.AddDataList(builder, data_list)
    return DuplicateBonusExcelTable.End(builder)

def pack_EchelonConstraintExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EchelonConstraintExcel(builder, record, encrypt))
    EchelonConstraintExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EchelonConstraintExcelTable.Start(builder)
    EchelonConstraintExcelTable.AddDataList(builder, data_list)
    return EchelonConstraintExcelTable.End(builder)

def pack_EliminateRaidRankingRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidRankingRewardExcel(builder, record, encrypt))
    EliminateRaidRankingRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidRankingRewardExcelTable.Start(builder)
    EliminateRaidRankingRewardExcelTable.AddDataList(builder, data_list)
    return EliminateRaidRankingRewardExcelTable.End(builder)

def pack_EliminateRaidSeasonManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidSeasonManageExcel(builder, record, encrypt))
    EliminateRaidSeasonManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidSeasonManageExcelTable.Start(builder)
    EliminateRaidSeasonManageExcelTable.AddDataList(builder, data_list)
    return EliminateRaidSeasonManageExcelTable.End(builder)

def pack_EliminateRaidStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidStageExcel(builder, record, encrypt))
    EliminateRaidStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidStageExcelTable.Start(builder)
    EliminateRaidStageExcelTable.AddDataList(builder, data_list)
    return EliminateRaidStageExcelTable.End(builder)

def pack_EliminateRaidStageLimitedRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidStageLimitedRewardExcel(builder, record, encrypt))
    EliminateRaidStageLimitedRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidStageLimitedRewardExcelTable.Start(builder)
    EliminateRaidStageLimitedRewardExcelTable.AddDataList(builder, data_list)
    return EliminateRaidStageLimitedRewardExcelTable.End(builder)

def pack_EliminateRaidStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidStageRewardExcel(builder, record, encrypt))
    EliminateRaidStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidStageRewardExcelTable.Start(builder)
    EliminateRaidStageRewardExcelTable.AddDataList(builder, data_list)
    return EliminateRaidStageRewardExcelTable.End(builder)

def pack_EliminateRaidStageSeasonRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EliminateRaidStageSeasonRewardExcel(builder, record, encrypt))
    EliminateRaidStageSeasonRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EliminateRaidStageSeasonRewardExcelTable.Start(builder)
    EliminateRaidStageSeasonRewardExcelTable.AddDataList(builder, data_list)
    return EliminateRaidStageSeasonRewardExcelTable.End(builder)

def pack_EmblemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EmblemExcel(builder, record, encrypt))
    EmblemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EmblemExcelTable.Start(builder)
    EmblemExcelTable.AddDataList(builder, data_list)
    return EmblemExcelTable.End(builder)

def pack_EquipmentExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EquipmentExcel(builder, record, encrypt))
    EquipmentExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EquipmentExcelTable.Start(builder)
    EquipmentExcelTable.AddDataList(builder, data_list)
    return EquipmentExcelTable.End(builder)

def pack_EquipmentLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EquipmentLevelExcel(builder, record, encrypt))
    EquipmentLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EquipmentLevelExcelTable.Start(builder)
    EquipmentLevelExcelTable.AddDataList(builder, data_list)
    return EquipmentLevelExcelTable.End(builder)

def pack_EquipmentStatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EquipmentStatExcel(builder, record, encrypt))
    EquipmentStatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EquipmentStatExcelTable.Start(builder)
    EquipmentStatExcelTable.AddDataList(builder, data_list)
    return EquipmentStatExcelTable.End(builder)

def pack_EventContentArchiveBannerOffsetExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentArchiveBannerOffsetExcel(builder, record, encrypt))
    EventContentArchiveBannerOffsetExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentArchiveBannerOffsetExcelTable.Start(builder)
    EventContentArchiveBannerOffsetExcelTable.AddDataList(builder, data_list)
    return EventContentArchiveBannerOffsetExcelTable.End(builder)

def pack_EventContentBoxGachaManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentBoxGachaManageExcel(builder, record, encrypt))
    EventContentBoxGachaManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentBoxGachaManageExcelTable.Start(builder)
    EventContentBoxGachaManageExcelTable.AddDataList(builder, data_list)
    return EventContentBoxGachaManageExcelTable.End(builder)

def pack_EventContentBoxGachaShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentBoxGachaShopExcel(builder, record, encrypt))
    EventContentBoxGachaShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentBoxGachaShopExcelTable.Start(builder)
    EventContentBoxGachaShopExcelTable.AddDataList(builder, data_list)
    return EventContentBoxGachaShopExcelTable.End(builder)

def pack_EventContentBuffExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentBuffExcel(builder, record, encrypt))
    EventContentBuffExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentBuffExcelTable.Start(builder)
    EventContentBuffExcelTable.AddDataList(builder, data_list)
    return EventContentBuffExcelTable.End(builder)

def pack_EventContentBuffGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentBuffGroupExcel(builder, record, encrypt))
    EventContentBuffGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentBuffGroupExcelTable.Start(builder)
    EventContentBuffGroupExcelTable.AddDataList(builder, data_list)
    return EventContentBuffGroupExcelTable.End(builder)

def pack_EventContentCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCardExcel(builder, record, encrypt))
    EventContentCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCardExcelTable.Start(builder)
    EventContentCardExcelTable.AddDataList(builder, data_list)
    return EventContentCardExcelTable.End(builder)

def pack_EventContentCardShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCardShopExcel(builder, record, encrypt))
    EventContentCardShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCardShopExcelTable.Start(builder)
    EventContentCardShopExcelTable.AddDataList(builder, data_list)
    return EventContentCardShopExcelTable.End(builder)

def pack_EventContentCardShopModifyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCardShopModifyExcel(builder, record, encrypt))
    EventContentCardShopModifyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCardShopModifyExcelTable.Start(builder)
    EventContentCardShopModifyExcelTable.AddDataList(builder, data_list)
    return EventContentCardShopModifyExcelTable.End(builder)

def pack_EventContentChangeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentChangeExcel(builder, record, encrypt))
    EventContentChangeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentChangeExcelTable.Start(builder)
    EventContentChangeExcelTable.AddDataList(builder, data_list)
    return EventContentChangeExcelTable.End(builder)

def pack_EventContentChangeScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentChangeScenarioExcel(builder, record, encrypt))
    EventContentChangeScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentChangeScenarioExcelTable.Start(builder)
    EventContentChangeScenarioExcelTable.AddDataList(builder, data_list)
    return EventContentChangeScenarioExcelTable.End(builder)

def pack_EventContentCharacterBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCharacterBonusExcel(builder, record, encrypt))
    EventContentCharacterBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCharacterBonusExcelTable.Start(builder)
    EventContentCharacterBonusExcelTable.AddDataList(builder, data_list)
    return EventContentCharacterBonusExcelTable.End(builder)

def pack_EventContentCollectionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCollectionExcel(builder, record, encrypt))
    EventContentCollectionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCollectionExcelTable.Start(builder)
    EventContentCollectionExcelTable.AddDataList(builder, data_list)
    return EventContentCollectionExcelTable.End(builder)

def pack_EventContentConcentrationCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentConcentrationCardExcel(builder, record, encrypt))
    EventContentConcentrationCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentConcentrationCardExcelTable.Start(builder)
    EventContentConcentrationCardExcelTable.AddDataList(builder, data_list)
    return EventContentConcentrationCardExcelTable.End(builder)

def pack_EventContentConcentrationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentConcentrationExcel(builder, record, encrypt))
    EventContentConcentrationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentConcentrationExcelTable.Start(builder)
    EventContentConcentrationExcelTable.AddDataList(builder, data_list)
    return EventContentConcentrationExcelTable.End(builder)

def pack_EventContentConcentrationRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentConcentrationRewardExcel(builder, record, encrypt))
    EventContentConcentrationRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentConcentrationRewardExcelTable.Start(builder)
    EventContentConcentrationRewardExcelTable.AddDataList(builder, data_list)
    return EventContentConcentrationRewardExcelTable.End(builder)

def pack_EventContentConcentrationVoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentConcentrationVoiceExcel(builder, record, encrypt))
    EventContentConcentrationVoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentConcentrationVoiceExcelTable.Start(builder)
    EventContentConcentrationVoiceExcelTable.AddDataList(builder, data_list)
    return EventContentConcentrationVoiceExcelTable.End(builder)

def pack_EventContentCurrencyItemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentCurrencyItemExcel(builder, record, encrypt))
    EventContentCurrencyItemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentCurrencyItemExcelTable.Start(builder)
    EventContentCurrencyItemExcelTable.AddDataList(builder, data_list)
    return EventContentCurrencyItemExcelTable.End(builder)

def pack_EventContentDebuffRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDebuffRewardExcel(builder, record, encrypt))
    EventContentDebuffRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDebuffRewardExcelTable.Start(builder)
    EventContentDebuffRewardExcelTable.AddDataList(builder, data_list)
    return EventContentDebuffRewardExcelTable.End(builder)

def pack_EventContentDiceRaceEffectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDiceRaceEffectExcel(builder, record, encrypt))
    EventContentDiceRaceEffectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDiceRaceEffectExcelTable.Start(builder)
    EventContentDiceRaceEffectExcelTable.AddDataList(builder, data_list)
    return EventContentDiceRaceEffectExcelTable.End(builder)

def pack_EventContentDiceRaceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDiceRaceExcel(builder, record, encrypt))
    EventContentDiceRaceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDiceRaceExcelTable.Start(builder)
    EventContentDiceRaceExcelTable.AddDataList(builder, data_list)
    return EventContentDiceRaceExcelTable.End(builder)

def pack_EventContentDiceRaceNodeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDiceRaceNodeExcel(builder, record, encrypt))
    EventContentDiceRaceNodeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDiceRaceNodeExcelTable.Start(builder)
    EventContentDiceRaceNodeExcelTable.AddDataList(builder, data_list)
    return EventContentDiceRaceNodeExcelTable.End(builder)

def pack_EventContentDiceRaceProbExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDiceRaceProbExcel(builder, record, encrypt))
    EventContentDiceRaceProbExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDiceRaceProbExcelTable.Start(builder)
    EventContentDiceRaceProbExcelTable.AddDataList(builder, data_list)
    return EventContentDiceRaceProbExcelTable.End(builder)

def pack_EventContentDiceRaceTotalRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentDiceRaceTotalRewardExcel(builder, record, encrypt))
    EventContentDiceRaceTotalRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentDiceRaceTotalRewardExcelTable.Start(builder)
    EventContentDiceRaceTotalRewardExcelTable.AddDataList(builder, data_list)
    return EventContentDiceRaceTotalRewardExcelTable.End(builder)

def pack_EventContentFortuneGachaExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentFortuneGachaExcel(builder, record, encrypt))
    EventContentFortuneGachaExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentFortuneGachaExcelTable.Start(builder)
    EventContentFortuneGachaExcelTable.AddDataList(builder, data_list)
    return EventContentFortuneGachaExcelTable.End(builder)

def pack_EventContentFortuneGachaModifyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentFortuneGachaModifyExcel(builder, record, encrypt))
    EventContentFortuneGachaModifyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentFortuneGachaModifyExcelTable.Start(builder)
    EventContentFortuneGachaModifyExcelTable.AddDataList(builder, data_list)
    return EventContentFortuneGachaModifyExcelTable.End(builder)

def pack_EventContentFortuneGachaShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentFortuneGachaShopExcel(builder, record, encrypt))
    EventContentFortuneGachaShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentFortuneGachaShopExcelTable.Start(builder)
    EventContentFortuneGachaShopExcelTable.AddDataList(builder, data_list)
    return EventContentFortuneGachaShopExcelTable.End(builder)

def pack_EventContentLobbyMenuExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentLobbyMenuExcel(builder, record, encrypt))
    EventContentLobbyMenuExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentLobbyMenuExcelTable.Start(builder)
    EventContentLobbyMenuExcelTable.AddDataList(builder, data_list)
    return EventContentLobbyMenuExcelTable.End(builder)

def pack_EventContentLocationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentLocationExcel(builder, record, encrypt))
    EventContentLocationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentLocationExcelTable.Start(builder)
    EventContentLocationExcelTable.AddDataList(builder, data_list)
    return EventContentLocationExcelTable.End(builder)

def pack_EventContentLocationRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentLocationRewardExcel(builder, record, encrypt))
    EventContentLocationRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentLocationRewardExcelTable.Start(builder)
    EventContentLocationRewardExcelTable.AddDataList(builder, data_list)
    return EventContentLocationRewardExcelTable.End(builder)

def pack_EventContentMeetupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentMeetupExcel(builder, record, encrypt))
    EventContentMeetupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentMeetupExcelTable.Start(builder)
    EventContentMeetupExcelTable.AddDataList(builder, data_list)
    return EventContentMeetupExcelTable.End(builder)

def pack_EventContentMeetupInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentMeetupInfoExcel(builder, record, encrypt))
    EventContentMeetupInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentMeetupInfoExcelTable.Start(builder)
    EventContentMeetupInfoExcelTable.AddDataList(builder, data_list)
    return EventContentMeetupInfoExcelTable.End(builder)

def pack_EventContentMiniEventShortCutExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentMiniEventShortCutExcel(builder, record, encrypt))
    EventContentMiniEventShortCutExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentMiniEventShortCutExcelTable.Start(builder)
    EventContentMiniEventShortCutExcelTable.AddDataList(builder, data_list)
    return EventContentMiniEventShortCutExcelTable.End(builder)

def pack_EventContentMiniEventTokenExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentMiniEventTokenExcel(builder, record, encrypt))
    EventContentMiniEventTokenExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentMiniEventTokenExcelTable.Start(builder)
    EventContentMiniEventTokenExcelTable.AddDataList(builder, data_list)
    return EventContentMiniEventTokenExcelTable.End(builder)

def pack_EventContentMissionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentMissionExcel(builder, record, encrypt))
    EventContentMissionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentMissionExcelTable.Start(builder)
    EventContentMissionExcelTable.AddDataList(builder, data_list)
    return EventContentMissionExcelTable.End(builder)

def pack_EventContentNotifyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentNotifyExcel(builder, record, encrypt))
    EventContentNotifyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentNotifyExcelTable.Start(builder)
    EventContentNotifyExcelTable.AddDataList(builder, data_list)
    return EventContentNotifyExcelTable.End(builder)

def pack_EventContentPlayGuideExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentPlayGuideExcel(builder, record, encrypt))
    EventContentPlayGuideExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentPlayGuideExcelTable.Start(builder)
    EventContentPlayGuideExcelTable.AddDataList(builder, data_list)
    return EventContentPlayGuideExcelTable.End(builder)

def pack_EventContentScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentScenarioExcel(builder, record, encrypt))
    EventContentScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentScenarioExcelTable.Start(builder)
    EventContentScenarioExcelTable.AddDataList(builder, data_list)
    return EventContentScenarioExcelTable.End(builder)

def pack_EventContentSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentSeasonExcel(builder, record, encrypt))
    EventContentSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentSeasonExcelTable.Start(builder)
    EventContentSeasonExcelTable.AddDataList(builder, data_list)
    return EventContentSeasonExcelTable.End(builder)

def pack_EventContentShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentShopExcel(builder, record, encrypt))
    EventContentShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentShopExcelTable.Start(builder)
    EventContentShopExcelTable.AddDataList(builder, data_list)
    return EventContentShopExcelTable.End(builder)

def pack_EventContentShopInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentShopInfoExcel(builder, record, encrypt))
    EventContentShopInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentShopInfoExcelTable.Start(builder)
    EventContentShopInfoExcelTable.AddDataList(builder, data_list)
    return EventContentShopInfoExcelTable.End(builder)

def pack_EventContentShopRefreshExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentShopRefreshExcel(builder, record, encrypt))
    EventContentShopRefreshExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentShopRefreshExcelTable.Start(builder)
    EventContentShopRefreshExcelTable.AddDataList(builder, data_list)
    return EventContentShopRefreshExcelTable.End(builder)

def pack_EventContentSpecialOperationsExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentSpecialOperationsExcel(builder, record, encrypt))
    EventContentSpecialOperationsExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentSpecialOperationsExcelTable.Start(builder)
    EventContentSpecialOperationsExcelTable.AddDataList(builder, data_list)
    return EventContentSpecialOperationsExcelTable.End(builder)

def pack_EventContentSpineDialogOffsetExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentSpineDialogOffsetExcel(builder, record, encrypt))
    EventContentSpineDialogOffsetExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentSpineDialogOffsetExcelTable.Start(builder)
    EventContentSpineDialogOffsetExcelTable.AddDataList(builder, data_list)
    return EventContentSpineDialogOffsetExcelTable.End(builder)

def pack_EventContentSpoilerPopupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentSpoilerPopupExcel(builder, record, encrypt))
    EventContentSpoilerPopupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentSpoilerPopupExcelTable.Start(builder)
    EventContentSpoilerPopupExcelTable.AddDataList(builder, data_list)
    return EventContentSpoilerPopupExcelTable.End(builder)

def pack_EventContentStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentStageExcel(builder, record, encrypt))
    EventContentStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentStageExcelTable.Start(builder)
    EventContentStageExcelTable.AddDataList(builder, data_list)
    return EventContentStageExcelTable.End(builder)

def pack_EventContentStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentStageRewardExcel(builder, record, encrypt))
    EventContentStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentStageRewardExcelTable.Start(builder)
    EventContentStageRewardExcelTable.AddDataList(builder, data_list)
    return EventContentStageRewardExcelTable.End(builder)

def pack_EventContentStageTotalRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentStageTotalRewardExcel(builder, record, encrypt))
    EventContentStageTotalRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentStageTotalRewardExcelTable.Start(builder)
    EventContentStageTotalRewardExcelTable.AddDataList(builder, data_list)
    return EventContentStageTotalRewardExcelTable.End(builder)

def pack_EventContentTreasureCellRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentTreasureCellRewardExcel(builder, record, encrypt))
    EventContentTreasureCellRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentTreasureCellRewardExcelTable.Start(builder)
    EventContentTreasureCellRewardExcelTable.AddDataList(builder, data_list)
    return EventContentTreasureCellRewardExcelTable.End(builder)

def pack_EventContentTreasureExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentTreasureExcel(builder, record, encrypt))
    EventContentTreasureExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentTreasureExcelTable.Start(builder)
    EventContentTreasureExcelTable.AddDataList(builder, data_list)
    return EventContentTreasureExcelTable.End(builder)

def pack_EventContentTreasureRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentTreasureRewardExcel(builder, record, encrypt))
    EventContentTreasureRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentTreasureRewardExcelTable.Start(builder)
    EventContentTreasureRewardExcelTable.AddDataList(builder, data_list)
    return EventContentTreasureRewardExcelTable.End(builder)

def pack_EventContentTreasureRoundExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentTreasureRoundExcel(builder, record, encrypt))
    EventContentTreasureRoundExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentTreasureRoundExcelTable.Start(builder)
    EventContentTreasureRoundExcelTable.AddDataList(builder, data_list)
    return EventContentTreasureRoundExcelTable.End(builder)

def pack_EventContentZoneExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentZoneExcel(builder, record, encrypt))
    EventContentZoneExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentZoneExcelTable.Start(builder)
    EventContentZoneExcelTable.AddDataList(builder, data_list)
    return EventContentZoneExcelTable.End(builder)

def pack_EventContentZoneVisitRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_EventContentZoneVisitRewardExcel(builder, record, encrypt))
    EventContentZoneVisitRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    EventContentZoneVisitRewardExcelTable.Start(builder)
    EventContentZoneVisitRewardExcelTable.AddDataList(builder, data_list)
    return EventContentZoneVisitRewardExcelTable.End(builder)

def pack_FarmingDungeonLocationManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FarmingDungeonLocationManageExcel(builder, record, encrypt))
    FarmingDungeonLocationManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FarmingDungeonLocationManageExcelTable.Start(builder)
    FarmingDungeonLocationManageExcelTable.AddDataList(builder, data_list)
    return FarmingDungeonLocationManageExcelTable.End(builder)

def pack_FavorLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FavorLevelExcel(builder, record, encrypt))
    FavorLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FavorLevelExcelTable.Start(builder)
    FavorLevelExcelTable.AddDataList(builder, data_list)
    return FavorLevelExcelTable.End(builder)

def pack_FavorLevelRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FavorLevelRewardExcel(builder, record, encrypt))
    FavorLevelRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FavorLevelRewardExcelTable.Start(builder)
    FavorLevelRewardExcelTable.AddDataList(builder, data_list)
    return FavorLevelRewardExcelTable.End(builder)

def pack_FixedEchelonSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FixedEchelonSettingExcel(builder, record, encrypt))
    FixedEchelonSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FixedEchelonSettingExcelTable.Start(builder)
    FixedEchelonSettingExcelTable.AddDataList(builder, data_list)
    return FixedEchelonSettingExcelTable.End(builder)

def pack_FixedStrategyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FixedStrategyExcel(builder, record, encrypt))
    FixedStrategyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FixedStrategyExcelTable.Start(builder)
    FixedStrategyExcelTable.AddDataList(builder, data_list)
    return FixedStrategyExcelTable.End(builder)

def pack_FloaterCommonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FloaterCommonExcel(builder, record, encrypt))
    FloaterCommonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FloaterCommonExcelTable.Start(builder)
    FloaterCommonExcelTable.AddDataList(builder, data_list)
    return FloaterCommonExcelTable.End(builder)

def pack_FormationLocationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FormationLocationExcel(builder, record, encrypt))
    FormationLocationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FormationLocationExcelTable.Start(builder)
    FormationLocationExcelTable.AddDataList(builder, data_list)
    return FormationLocationExcelTable.End(builder)

def pack_FurnitureExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FurnitureExcel(builder, record, encrypt))
    FurnitureExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FurnitureExcelTable.Start(builder)
    FurnitureExcelTable.AddDataList(builder, data_list)
    return FurnitureExcelTable.End(builder)

def pack_FurnitureGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FurnitureGroupExcel(builder, record, encrypt))
    FurnitureGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FurnitureGroupExcelTable.Start(builder)
    FurnitureGroupExcelTable.AddDataList(builder, data_list)
    return FurnitureGroupExcelTable.End(builder)

def pack_FurnitureTemplateElementExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FurnitureTemplateElementExcel(builder, record, encrypt))
    FurnitureTemplateElementExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FurnitureTemplateElementExcelTable.Start(builder)
    FurnitureTemplateElementExcelTable.AddDataList(builder, data_list)
    return FurnitureTemplateElementExcelTable.End(builder)

def pack_FurnitureTemplateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_FurnitureTemplateExcel(builder, record, encrypt))
    FurnitureTemplateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    FurnitureTemplateExcelTable.Start(builder)
    FurnitureTemplateExcelTable.AddDataList(builder, data_list)
    return FurnitureTemplateExcelTable.End(builder)

def pack_GachaCraftNodeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaCraftNodeExcel(builder, record, encrypt))
    GachaCraftNodeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaCraftNodeExcelTable.Start(builder)
    GachaCraftNodeExcelTable.AddDataList(builder, data_list)
    return GachaCraftNodeExcelTable.End(builder)

def pack_GachaCraftNodeGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaCraftNodeGroupExcel(builder, record, encrypt))
    GachaCraftNodeGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaCraftNodeGroupExcelTable.Start(builder)
    GachaCraftNodeGroupExcelTable.AddDataList(builder, data_list)
    return GachaCraftNodeGroupExcelTable.End(builder)

def pack_GachaCraftOpenTagExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaCraftOpenTagExcel(builder, record, encrypt))
    GachaCraftOpenTagExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaCraftOpenTagExcelTable.Start(builder)
    GachaCraftOpenTagExcelTable.AddDataList(builder, data_list)
    return GachaCraftOpenTagExcelTable.End(builder)

def pack_GachaElementExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaElementExcel(builder, record, encrypt))
    GachaElementExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaElementExcelTable.Start(builder)
    GachaElementExcelTable.AddDataList(builder, data_list)
    return GachaElementExcelTable.End(builder)

def pack_GachaElementRecursiveExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaElementRecursiveExcel(builder, record, encrypt))
    GachaElementRecursiveExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaElementRecursiveExcelTable.Start(builder)
    GachaElementRecursiveExcelTable.AddDataList(builder, data_list)
    return GachaElementRecursiveExcelTable.End(builder)

def pack_GachaGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaGroupExcel(builder, record, encrypt))
    GachaGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaGroupExcelTable.Start(builder)
    GachaGroupExcelTable.AddDataList(builder, data_list)
    return GachaGroupExcelTable.End(builder)

def pack_GachaSelectPickupGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GachaSelectPickupGroupExcel(builder, record, encrypt))
    GachaSelectPickupGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GachaSelectPickupGroupExcelTable.Start(builder)
    GachaSelectPickupGroupExcelTable.AddDataList(builder, data_list)
    return GachaSelectPickupGroupExcelTable.End(builder)

def pack_GoodsExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GoodsExcel(builder, record, encrypt))
    GoodsExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GoodsExcelTable.Start(builder)
    GoodsExcelTable.AddDataList(builder, data_list)
    return GoodsExcelTable.End(builder)

def pack_GroundExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GroundExcel(builder, record, encrypt))
    GroundExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GroundExcelTable.Start(builder)
    GroundExcelTable.AddDataList(builder, data_list)
    return GroundExcelTable.End(builder)

def pack_GroundModuleRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GroundModuleRewardExcel(builder, record, encrypt))
    GroundModuleRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GroundModuleRewardExcelTable.Start(builder)
    GroundModuleRewardExcelTable.AddDataList(builder, data_list)
    return GroundModuleRewardExcelTable.End(builder)

def pack_GrowthScoreCalculationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GrowthScoreCalculationExcel(builder, record, encrypt))
    GrowthScoreCalculationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GrowthScoreCalculationExcelTable.Start(builder)
    GrowthScoreCalculationExcelTable.AddDataList(builder, data_list)
    return GrowthScoreCalculationExcelTable.End(builder)

def pack_GuideMissionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GuideMissionExcel(builder, record, encrypt))
    GuideMissionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GuideMissionExcelTable.Start(builder)
    GuideMissionExcelTable.AddDataList(builder, data_list)
    return GuideMissionExcelTable.End(builder)

def pack_GuideMissionOpenStageConditionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GuideMissionOpenStageConditionExcel(builder, record, encrypt))
    GuideMissionOpenStageConditionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GuideMissionOpenStageConditionExcelTable.Start(builder)
    GuideMissionOpenStageConditionExcelTable.AddDataList(builder, data_list)
    return GuideMissionOpenStageConditionExcelTable.End(builder)

def pack_GuideMissionSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_GuideMissionSeasonExcel(builder, record, encrypt))
    GuideMissionSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    GuideMissionSeasonExcelTable.Start(builder)
    GuideMissionSeasonExcelTable.AddDataList(builder, data_list)
    return GuideMissionSeasonExcelTable.End(builder)

def pack_HpBarAbbreviationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_HpBarAbbreviationExcel(builder, record, encrypt))
    HpBarAbbreviationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    HpBarAbbreviationExcelTable.Start(builder)
    HpBarAbbreviationExcelTable.AddDataList(builder, data_list)
    return HpBarAbbreviationExcelTable.End(builder)

def pack_IdCardBackgroundExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_IdCardBackgroundExcel(builder, record, encrypt))
    IdCardBackgroundExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    IdCardBackgroundExcelTable.Start(builder)
    IdCardBackgroundExcelTable.AddDataList(builder, data_list)
    return IdCardBackgroundExcelTable.End(builder)

def pack_InformationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_InformationExcel(builder, record, encrypt))
    InformationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    InformationExcelTable.Start(builder)
    InformationExcelTable.AddDataList(builder, data_list)
    return InformationExcelTable.End(builder)

def pack_InformationStrategyObjectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_InformationStrategyObjectExcel(builder, record, encrypt))
    InformationStrategyObjectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    InformationStrategyObjectExcelTable.Start(builder)
    InformationStrategyObjectExcelTable.AddDataList(builder, data_list)
    return InformationStrategyObjectExcelTable.End(builder)

def pack_ItemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ItemExcel(builder, record, encrypt))
    ItemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ItemExcelTable.Start(builder)
    ItemExcelTable.AddDataList(builder, data_list)
    return ItemExcelTable.End(builder)

def pack_LevelExpMasterCoinExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LevelExpMasterCoinExcel(builder, record, encrypt))
    LevelExpMasterCoinExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LevelExpMasterCoinExcelTable.Start(builder)
    LevelExpMasterCoinExcelTable.AddDataList(builder, data_list)
    return LevelExpMasterCoinExcelTable.End(builder)

def pack_LoadingImageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LoadingImageExcel(builder, record, encrypt))
    LoadingImageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LoadingImageExcelTable.Start(builder)
    LoadingImageExcelTable.AddDataList(builder, data_list)
    return LoadingImageExcelTable.End(builder)

def pack_LocalizeCharProfileChangeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeCharProfileChangeExcel(builder, record, encrypt))
    LocalizeCharProfileChangeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeCharProfileChangeExcelTable.Start(builder)
    LocalizeCharProfileChangeExcelTable.AddDataList(builder, data_list)
    return LocalizeCharProfileChangeExcelTable.End(builder)

def pack_LocalizeCharProfileExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeCharProfileExcel(builder, record, encrypt))
    LocalizeCharProfileExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeCharProfileExcelTable.Start(builder)
    LocalizeCharProfileExcelTable.AddDataList(builder, data_list)
    return LocalizeCharProfileExcelTable.End(builder)

def pack_LocalizeCodeInBuildExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeCodeInBuildExcel(builder, record, encrypt))
    LocalizeCodeInBuildExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeCodeInBuildExcelTable.Start(builder)
    LocalizeCodeInBuildExcelTable.AddDataList(builder, data_list)
    return LocalizeCodeInBuildExcelTable.End(builder)

def pack_LocalizeErrorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeErrorExcel(builder, record, encrypt))
    LocalizeErrorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeErrorExcelTable.Start(builder)
    LocalizeErrorExcelTable.AddDataList(builder, data_list)
    return LocalizeErrorExcelTable.End(builder)

def pack_LocalizeEtcExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeEtcExcel(builder, record, encrypt))
    LocalizeEtcExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeEtcExcelTable.Start(builder)
    LocalizeEtcExcelTable.AddDataList(builder, data_list)
    return LocalizeEtcExcelTable.End(builder)

def pack_LocalizeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeExcel(builder, record, encrypt))
    LocalizeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeExcelTable.Start(builder)
    LocalizeExcelTable.AddDataList(builder, data_list)
    return LocalizeExcelTable.End(builder)

def pack_LocalizeGachaShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeGachaShopExcel(builder, record, encrypt))
    LocalizeGachaShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeGachaShopExcelTable.Start(builder)
    LocalizeGachaShopExcelTable.AddDataList(builder, data_list)
    return LocalizeGachaShopExcelTable.End(builder)

def pack_LocalizeSkillExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LocalizeSkillExcel(builder, record, encrypt))
    LocalizeSkillExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LocalizeSkillExcelTable.Start(builder)
    LocalizeSkillExcelTable.AddDataList(builder, data_list)
    return LocalizeSkillExcelTable.End(builder)

def pack_LogicEffectCommonVisualExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_LogicEffectCommonVisualExcel(builder, record, encrypt))
    LogicEffectCommonVisualExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    LogicEffectCommonVisualExcelTable.Start(builder)
    LogicEffectCommonVisualExcelTable.AddDataList(builder, data_list)
    return LogicEffectCommonVisualExcelTable.End(builder)

def pack_MemoryLobbyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MemoryLobbyExcel(builder, record, encrypt))
    MemoryLobbyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MemoryLobbyExcelTable.Start(builder)
    MemoryLobbyExcelTable.AddDataList(builder, data_list)
    return MemoryLobbyExcelTable.End(builder)

def pack_MessagePopupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MessagePopupExcel(builder, record, encrypt))
    MessagePopupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MessagePopupExcelTable.Start(builder)
    MessagePopupExcelTable.AddDataList(builder, data_list)
    return MessagePopupExcelTable.End(builder)

def pack_MiniGameAudioAnimatorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameAudioAnimatorExcel(builder, record, encrypt))
    MiniGameAudioAnimatorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameAudioAnimatorExcelTable.Start(builder)
    MiniGameAudioAnimatorExcelTable.AddDataList(builder, data_list)
    return MiniGameAudioAnimatorExcelTable.End(builder)

def pack_MinigameCCGCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGCardExcel(builder, record, encrypt))
    MinigameCCGCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGCardExcelTable.Start(builder)
    MinigameCCGCardExcelTable.AddDataList(builder, data_list)
    return MinigameCCGCardExcelTable.End(builder)

def pack_MinigameCCGCharacterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGCharacterExcel(builder, record, encrypt))
    MinigameCCGCharacterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGCharacterExcelTable.Start(builder)
    MinigameCCGCharacterExcelTable.AddDataList(builder, data_list)
    return MinigameCCGCharacterExcelTable.End(builder)

def pack_MinigameCCGEnemyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGEnemyExcel(builder, record, encrypt))
    MinigameCCGEnemyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGEnemyExcelTable.Start(builder)
    MinigameCCGEnemyExcelTable.AddDataList(builder, data_list)
    return MinigameCCGEnemyExcelTable.End(builder)

def pack_MinigameCCGEnemyGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGEnemyGroupExcel(builder, record, encrypt))
    MinigameCCGEnemyGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGEnemyGroupExcelTable.Start(builder)
    MinigameCCGEnemyGroupExcelTable.AddDataList(builder, data_list)
    return MinigameCCGEnemyGroupExcelTable.End(builder)

def pack_MinigameCCGInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGInfoExcel(builder, record, encrypt))
    MinigameCCGInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGInfoExcelTable.Start(builder)
    MinigameCCGInfoExcelTable.AddDataList(builder, data_list)
    return MinigameCCGInfoExcelTable.End(builder)

def pack_MinigameCCGLevelExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGLevelExcel(builder, record, encrypt))
    MinigameCCGLevelExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGLevelExcelTable.Start(builder)
    MinigameCCGLevelExcelTable.AddDataList(builder, data_list)
    return MinigameCCGLevelExcelTable.End(builder)

def pack_MinigameCCGLevelNodeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGLevelNodeExcel(builder, record, encrypt))
    MinigameCCGLevelNodeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGLevelNodeExcelTable.Start(builder)
    MinigameCCGLevelNodeExcelTable.AddDataList(builder, data_list)
    return MinigameCCGLevelNodeExcelTable.End(builder)

def pack_MinigameCCGLevelStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGLevelStageExcel(builder, record, encrypt))
    MinigameCCGLevelStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGLevelStageExcelTable.Start(builder)
    MinigameCCGLevelStageExcelTable.AddDataList(builder, data_list)
    return MinigameCCGLevelStageExcelTable.End(builder)

def pack_MinigameCCGLogicEffectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGLogicEffectExcel(builder, record, encrypt))
    MinigameCCGLogicEffectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGLogicEffectExcelTable.Start(builder)
    MinigameCCGLogicEffectExcelTable.AddDataList(builder, data_list)
    return MinigameCCGLogicEffectExcelTable.End(builder)

def pack_MinigameCCGOpenDialogExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGOpenDialogExcel(builder, record, encrypt))
    MinigameCCGOpenDialogExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGOpenDialogExcelTable.Start(builder)
    MinigameCCGOpenDialogExcelTable.AddDataList(builder, data_list)
    return MinigameCCGOpenDialogExcelTable.End(builder)

def pack_MinigameCCGPerkExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGPerkExcel(builder, record, encrypt))
    MinigameCCGPerkExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGPerkExcelTable.Start(builder)
    MinigameCCGPerkExcelTable.AddDataList(builder, data_list)
    return MinigameCCGPerkExcelTable.End(builder)

def pack_MinigameCCGRewardCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGRewardCardExcel(builder, record, encrypt))
    MinigameCCGRewardCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGRewardCardExcelTable.Start(builder)
    MinigameCCGRewardCardExcelTable.AddDataList(builder, data_list)
    return MinigameCCGRewardCardExcelTable.End(builder)

def pack_MinigameCCGRewardCardRateExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGRewardCardRateExcel(builder, record, encrypt))
    MinigameCCGRewardCardRateExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGRewardCardRateExcelTable.Start(builder)
    MinigameCCGRewardCardRateExcelTable.AddDataList(builder, data_list)
    return MinigameCCGRewardCardRateExcelTable.End(builder)

def pack_MinigameCCGRewardItemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGRewardItemExcel(builder, record, encrypt))
    MinigameCCGRewardItemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGRewardItemExcelTable.Start(builder)
    MinigameCCGRewardItemExcelTable.AddDataList(builder, data_list)
    return MinigameCCGRewardItemExcelTable.End(builder)

def pack_MinigameCCGSkillExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGSkillExcel(builder, record, encrypt))
    MinigameCCGSkillExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGSkillExcelTable.Start(builder)
    MinigameCCGSkillExcelTable.AddDataList(builder, data_list)
    return MinigameCCGSkillExcelTable.End(builder)

def pack_MinigameCCGStartDeckCardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGStartDeckCardExcel(builder, record, encrypt))
    MinigameCCGStartDeckCardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGStartDeckCardExcelTable.Start(builder)
    MinigameCCGStartDeckCardExcelTable.AddDataList(builder, data_list)
    return MinigameCCGStartDeckCardExcelTable.End(builder)

def pack_MinigameCCGStartDeckCharacterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameCCGStartDeckCharacterExcel(builder, record, encrypt))
    MinigameCCGStartDeckCharacterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameCCGStartDeckCharacterExcelTable.Start(builder)
    MinigameCCGStartDeckCharacterExcelTable.AddDataList(builder, data_list)
    return MinigameCCGStartDeckCharacterExcelTable.End(builder)

def pack_MiniGameDefenseCharacterBanExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDefenseCharacterBanExcel(builder, record, encrypt))
    MiniGameDefenseCharacterBanExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDefenseCharacterBanExcelTable.Start(builder)
    MiniGameDefenseCharacterBanExcelTable.AddDataList(builder, data_list)
    return MiniGameDefenseCharacterBanExcelTable.End(builder)

def pack_MiniGameDefenseFixedStatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDefenseFixedStatExcel(builder, record, encrypt))
    MiniGameDefenseFixedStatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDefenseFixedStatExcelTable.Start(builder)
    MiniGameDefenseFixedStatExcelTable.AddDataList(builder, data_list)
    return MiniGameDefenseFixedStatExcelTable.End(builder)

def pack_MiniGameDefenseInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDefenseInfoExcel(builder, record, encrypt))
    MiniGameDefenseInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDefenseInfoExcelTable.Start(builder)
    MiniGameDefenseInfoExcelTable.AddDataList(builder, data_list)
    return MiniGameDefenseInfoExcelTable.End(builder)

def pack_MiniGameDefenseStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDefenseStageExcel(builder, record, encrypt))
    MiniGameDefenseStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDefenseStageExcelTable.Start(builder)
    MiniGameDefenseStageExcelTable.AddDataList(builder, data_list)
    return MiniGameDefenseStageExcelTable.End(builder)

def pack_MiniGameDreamCollectionScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamCollectionScenarioExcel(builder, record, encrypt))
    MiniGameDreamCollectionScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamCollectionScenarioExcelTable.Start(builder)
    MiniGameDreamCollectionScenarioExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamCollectionScenarioExcelTable.End(builder)

def pack_MiniGameDreamDailyPointExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamDailyPointExcel(builder, record, encrypt))
    MiniGameDreamDailyPointExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamDailyPointExcelTable.Start(builder)
    MiniGameDreamDailyPointExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamDailyPointExcelTable.End(builder)

def pack_MiniGameDreamEndingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamEndingExcel(builder, record, encrypt))
    MiniGameDreamEndingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamEndingExcelTable.Start(builder)
    MiniGameDreamEndingExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamEndingExcelTable.End(builder)

def pack_MiniGameDreamEndingRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamEndingRewardExcel(builder, record, encrypt))
    MiniGameDreamEndingRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamEndingRewardExcelTable.Start(builder)
    MiniGameDreamEndingRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamEndingRewardExcelTable.End(builder)

def pack_MiniGameDreamInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamInfoExcel(builder, record, encrypt))
    MiniGameDreamInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamInfoExcelTable.Start(builder)
    MiniGameDreamInfoExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamInfoExcelTable.End(builder)

def pack_MiniGameDreamParameterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamParameterExcel(builder, record, encrypt))
    MiniGameDreamParameterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamParameterExcelTable.Start(builder)
    MiniGameDreamParameterExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamParameterExcelTable.End(builder)

def pack_MiniGameDreamReplayScenarioExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamReplayScenarioExcel(builder, record, encrypt))
    MiniGameDreamReplayScenarioExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamReplayScenarioExcelTable.Start(builder)
    MiniGameDreamReplayScenarioExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamReplayScenarioExcelTable.End(builder)

def pack_MiniGameDreamScheduleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamScheduleExcel(builder, record, encrypt))
    MiniGameDreamScheduleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamScheduleExcelTable.Start(builder)
    MiniGameDreamScheduleExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamScheduleExcelTable.End(builder)

def pack_MiniGameDreamScheduleResultExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamScheduleResultExcel(builder, record, encrypt))
    MiniGameDreamScheduleResultExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamScheduleResultExcelTable.Start(builder)
    MiniGameDreamScheduleResultExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamScheduleResultExcelTable.End(builder)

def pack_MiniGameDreamTimelineExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameDreamTimelineExcel(builder, record, encrypt))
    MiniGameDreamTimelineExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameDreamTimelineExcelTable.Start(builder)
    MiniGameDreamTimelineExcelTable.AddDataList(builder, data_list)
    return MiniGameDreamTimelineExcelTable.End(builder)

def pack_MinigameDreamVoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameDreamVoiceExcel(builder, record, encrypt))
    MinigameDreamVoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameDreamVoiceExcelTable.Start(builder)
    MinigameDreamVoiceExcelTable.AddDataList(builder, data_list)
    return MinigameDreamVoiceExcelTable.End(builder)

def pack_MiniGameMissionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameMissionExcel(builder, record, encrypt))
    MiniGameMissionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameMissionExcelTable.Start(builder)
    MiniGameMissionExcelTable.AddDataList(builder, data_list)
    return MiniGameMissionExcelTable.End(builder)

def pack_MiniGamePlayGuideExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGamePlayGuideExcel(builder, record, encrypt))
    MiniGamePlayGuideExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGamePlayGuideExcelTable.Start(builder)
    MiniGamePlayGuideExcelTable.AddDataList(builder, data_list)
    return MiniGamePlayGuideExcelTable.End(builder)

def pack_MiniGameRhythmBgmExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRhythmBgmExcel(builder, record, encrypt))
    MiniGameRhythmBgmExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRhythmBgmExcelTable.Start(builder)
    MiniGameRhythmBgmExcelTable.AddDataList(builder, data_list)
    return MiniGameRhythmBgmExcelTable.End(builder)

def pack_MiniGameRhythmExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRhythmExcel(builder, record, encrypt))
    MiniGameRhythmExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRhythmExcelTable.Start(builder)
    MiniGameRhythmExcelTable.AddDataList(builder, data_list)
    return MiniGameRhythmExcelTable.End(builder)

def pack_MiniGameRoadPuzzleAdditionalRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRoadPuzzleAdditionalRewardExcel(builder, record, encrypt))
    MiniGameRoadPuzzleAdditionalRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRoadPuzzleAdditionalRewardExcelTable.Start(builder)
    MiniGameRoadPuzzleAdditionalRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameRoadPuzzleAdditionalRewardExcelTable.End(builder)

def pack_MiniGameRoadPuzzleInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRoadPuzzleInfoExcel(builder, record, encrypt))
    MiniGameRoadPuzzleInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRoadPuzzleInfoExcelTable.Start(builder)
    MiniGameRoadPuzzleInfoExcelTable.AddDataList(builder, data_list)
    return MiniGameRoadPuzzleInfoExcelTable.End(builder)

def pack_MinigameRoadPuzzleMapExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameRoadPuzzleMapExcel(builder, record, encrypt))
    MinigameRoadPuzzleMapExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameRoadPuzzleMapExcelTable.Start(builder)
    MinigameRoadPuzzleMapExcelTable.AddDataList(builder, data_list)
    return MinigameRoadPuzzleMapExcelTable.End(builder)

def pack_MinigameRoadPuzzleMapTileExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameRoadPuzzleMapTileExcel(builder, record, encrypt))
    MinigameRoadPuzzleMapTileExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameRoadPuzzleMapTileExcelTable.Start(builder)
    MinigameRoadPuzzleMapTileExcelTable.AddDataList(builder, data_list)
    return MinigameRoadPuzzleMapTileExcelTable.End(builder)

def pack_MiniGameRoadPuzzleRailSetRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRoadPuzzleRailSetRewardExcel(builder, record, encrypt))
    MiniGameRoadPuzzleRailSetRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRoadPuzzleRailSetRewardExcelTable.Start(builder)
    MiniGameRoadPuzzleRailSetRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameRoadPuzzleRailSetRewardExcelTable.End(builder)

def pack_MinigameRoadPuzzleRailTileExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameRoadPuzzleRailTileExcel(builder, record, encrypt))
    MinigameRoadPuzzleRailTileExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameRoadPuzzleRailTileExcelTable.Start(builder)
    MinigameRoadPuzzleRailTileExcelTable.AddDataList(builder, data_list)
    return MinigameRoadPuzzleRailTileExcelTable.End(builder)

def pack_MiniGameRoadPuzzleRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRoadPuzzleRewardExcel(builder, record, encrypt))
    MiniGameRoadPuzzleRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRoadPuzzleRewardExcelTable.Start(builder)
    MiniGameRoadPuzzleRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameRoadPuzzleRewardExcelTable.End(builder)

def pack_MinigameRoadPuzzleRoadRoundExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameRoadPuzzleRoadRoundExcel(builder, record, encrypt))
    MinigameRoadPuzzleRoadRoundExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameRoadPuzzleRoadRoundExcelTable.Start(builder)
    MinigameRoadPuzzleRoadRoundExcelTable.AddDataList(builder, data_list)
    return MinigameRoadPuzzleRoadRoundExcelTable.End(builder)

def pack_MiniGameRoadPuzzleVoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameRoadPuzzleVoiceExcel(builder, record, encrypt))
    MiniGameRoadPuzzleVoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameRoadPuzzleVoiceExcelTable.Start(builder)
    MiniGameRoadPuzzleVoiceExcelTable.AddDataList(builder, data_list)
    return MiniGameRoadPuzzleVoiceExcelTable.End(builder)

def pack_MiniGameShootingCharacterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameShootingCharacterExcel(builder, record, encrypt))
    MiniGameShootingCharacterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameShootingCharacterExcelTable.Start(builder)
    MiniGameShootingCharacterExcelTable.AddDataList(builder, data_list)
    return MiniGameShootingCharacterExcelTable.End(builder)

def pack_MiniGameShootingGeasExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameShootingGeasExcel(builder, record, encrypt))
    MiniGameShootingGeasExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameShootingGeasExcelTable.Start(builder)
    MiniGameShootingGeasExcelTable.AddDataList(builder, data_list)
    return MiniGameShootingGeasExcelTable.End(builder)

def pack_MiniGameShootingStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameShootingStageExcel(builder, record, encrypt))
    MiniGameShootingStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameShootingStageExcelTable.Start(builder)
    MiniGameShootingStageExcelTable.AddDataList(builder, data_list)
    return MiniGameShootingStageExcelTable.End(builder)

def pack_MiniGameShootingStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameShootingStageRewardExcel(builder, record, encrypt))
    MiniGameShootingStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameShootingStageRewardExcelTable.Start(builder)
    MiniGameShootingStageRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameShootingStageRewardExcelTable.End(builder)

def pack_MinigameTBGDiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGDiceExcel(builder, record, encrypt))
    MinigameTBGDiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGDiceExcelTable.Start(builder)
    MinigameTBGDiceExcelTable.AddDataList(builder, data_list)
    return MinigameTBGDiceExcelTable.End(builder)

def pack_MinigameTBGEncounterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGEncounterExcel(builder, record, encrypt))
    MinigameTBGEncounterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGEncounterExcelTable.Start(builder)
    MinigameTBGEncounterExcelTable.AddDataList(builder, data_list)
    return MinigameTBGEncounterExcelTable.End(builder)

def pack_MinigameTBGEncounterOptionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGEncounterOptionExcel(builder, record, encrypt))
    MinigameTBGEncounterOptionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGEncounterOptionExcelTable.Start(builder)
    MinigameTBGEncounterOptionExcelTable.AddDataList(builder, data_list)
    return MinigameTBGEncounterOptionExcelTable.End(builder)

def pack_MinigameTBGEncounterRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGEncounterRewardExcel(builder, record, encrypt))
    MinigameTBGEncounterRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGEncounterRewardExcelTable.Start(builder)
    MinigameTBGEncounterRewardExcelTable.AddDataList(builder, data_list)
    return MinigameTBGEncounterRewardExcelTable.End(builder)

def pack_MinigameTBGItemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGItemExcel(builder, record, encrypt))
    MinigameTBGItemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGItemExcelTable.Start(builder)
    MinigameTBGItemExcelTable.AddDataList(builder, data_list)
    return MinigameTBGItemExcelTable.End(builder)

def pack_MinigameTBGObjectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGObjectExcel(builder, record, encrypt))
    MinigameTBGObjectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGObjectExcelTable.Start(builder)
    MinigameTBGObjectExcelTable.AddDataList(builder, data_list)
    return MinigameTBGObjectExcelTable.End(builder)

def pack_MinigameTBGSeasonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGSeasonExcel(builder, record, encrypt))
    MinigameTBGSeasonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGSeasonExcelTable.Start(builder)
    MinigameTBGSeasonExcelTable.AddDataList(builder, data_list)
    return MinigameTBGSeasonExcelTable.End(builder)

def pack_MinigameTBGThemaExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGThemaExcel(builder, record, encrypt))
    MinigameTBGThemaExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGThemaExcelTable.Start(builder)
    MinigameTBGThemaExcelTable.AddDataList(builder, data_list)
    return MinigameTBGThemaExcelTable.End(builder)

def pack_MiniGameTBGThemaRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MiniGameTBGThemaRewardExcel(builder, record, encrypt))
    MiniGameTBGThemaRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MiniGameTBGThemaRewardExcelTable.Start(builder)
    MiniGameTBGThemaRewardExcelTable.AddDataList(builder, data_list)
    return MiniGameTBGThemaRewardExcelTable.End(builder)

def pack_MinigameTBGVoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MinigameTBGVoiceExcel(builder, record, encrypt))
    MinigameTBGVoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MinigameTBGVoiceExcelTable.Start(builder)
    MinigameTBGVoiceExcelTable.AddDataList(builder, data_list)
    return MinigameTBGVoiceExcelTable.End(builder)

def pack_MissionEmergencyCompleteExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MissionEmergencyCompleteExcel(builder, record, encrypt))
    MissionEmergencyCompleteExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MissionEmergencyCompleteExcelTable.Start(builder)
    MissionEmergencyCompleteExcelTable.AddDataList(builder, data_list)
    return MissionEmergencyCompleteExcelTable.End(builder)

def pack_MissionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MissionExcel(builder, record, encrypt))
    MissionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MissionExcelTable.Start(builder)
    MissionExcelTable.AddDataList(builder, data_list)
    return MissionExcelTable.End(builder)

def pack_MultiFloorRaidRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MultiFloorRaidRewardExcel(builder, record, encrypt))
    MultiFloorRaidRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MultiFloorRaidRewardExcelTable.Start(builder)
    MultiFloorRaidRewardExcelTable.AddDataList(builder, data_list)
    return MultiFloorRaidRewardExcelTable.End(builder)

def pack_MultiFloorRaidSeasonManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MultiFloorRaidSeasonManageExcel(builder, record, encrypt))
    MultiFloorRaidSeasonManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MultiFloorRaidSeasonManageExcelTable.Start(builder)
    MultiFloorRaidSeasonManageExcelTable.AddDataList(builder, data_list)
    return MultiFloorRaidSeasonManageExcelTable.End(builder)

def pack_MultiFloorRaidStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MultiFloorRaidStageExcel(builder, record, encrypt))
    MultiFloorRaidStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MultiFloorRaidStageExcelTable.Start(builder)
    MultiFloorRaidStageExcelTable.AddDataList(builder, data_list)
    return MultiFloorRaidStageExcelTable.End(builder)

def pack_MultiFloorRaidStatChangeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_MultiFloorRaidStatChangeExcel(builder, record, encrypt))
    MultiFloorRaidStatChangeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    MultiFloorRaidStatChangeExcelTable.Start(builder)
    MultiFloorRaidStatChangeExcelTable.AddDataList(builder, data_list)
    return MultiFloorRaidStatChangeExcelTable.End(builder)

def pack_ObstacleFireLineCheckExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ObstacleFireLineCheckExcel(builder, record, encrypt))
    ObstacleFireLineCheckExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ObstacleFireLineCheckExcelTable.Start(builder)
    ObstacleFireLineCheckExcelTable.AddDataList(builder, data_list)
    return ObstacleFireLineCheckExcelTable.End(builder)

def pack_ObstacleStatExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ObstacleStatExcel(builder, record, encrypt))
    ObstacleStatExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ObstacleStatExcelTable.Start(builder)
    ObstacleStatExcelTable.AddDataList(builder, data_list)
    return ObstacleStatExcelTable.End(builder)

def pack_OpenConditionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_OpenConditionExcel(builder, record, encrypt))
    OpenConditionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    OpenConditionExcelTable.Start(builder)
    OpenConditionExcelTable.AddDataList(builder, data_list)
    return OpenConditionExcelTable.End(builder)

def pack_OperatorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_OperatorExcel(builder, record, encrypt))
    OperatorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    OperatorExcelTable.Start(builder)
    OperatorExcelTable.AddDataList(builder, data_list)
    return OperatorExcelTable.End(builder)

def pack_ParcelAutoSynthExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ParcelAutoSynthExcel(builder, record, encrypt))
    ParcelAutoSynthExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ParcelAutoSynthExcelTable.Start(builder)
    ParcelAutoSynthExcelTable.AddDataList(builder, data_list)
    return ParcelAutoSynthExcelTable.End(builder)

def pack_PersonalityExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PersonalityExcel(builder, record, encrypt))
    PersonalityExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PersonalityExcelTable.Start(builder)
    PersonalityExcelTable.AddDataList(builder, data_list)
    return PersonalityExcelTable.End(builder)

def pack_PickupDuplicateBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PickupDuplicateBonusExcel(builder, record, encrypt))
    PickupDuplicateBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PickupDuplicateBonusExcelTable.Start(builder)
    PickupDuplicateBonusExcelTable.AddDataList(builder, data_list)
    return PickupDuplicateBonusExcelTable.End(builder)

def pack_PickupFirstGetBonusExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PickupFirstGetBonusExcel(builder, record, encrypt))
    PickupFirstGetBonusExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PickupFirstGetBonusExcelTable.Start(builder)
    PickupFirstGetBonusExcelTable.AddDataList(builder, data_list)
    return PickupFirstGetBonusExcelTable.End(builder)

def pack_PossessionCheckExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PossessionCheckExcel(builder, record, encrypt))
    PossessionCheckExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PossessionCheckExcelTable.Start(builder)
    PossessionCheckExcelTable.AddDataList(builder, data_list)
    return PossessionCheckExcelTable.End(builder)

def pack_PresetCharacterGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PresetCharacterGroupExcel(builder, record, encrypt))
    PresetCharacterGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PresetCharacterGroupExcelTable.Start(builder)
    PresetCharacterGroupExcelTable.AddDataList(builder, data_list)
    return PresetCharacterGroupExcelTable.End(builder)

def pack_PresetCharacterGroupSettingExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PresetCharacterGroupSettingExcel(builder, record, encrypt))
    PresetCharacterGroupSettingExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PresetCharacterGroupSettingExcelTable.Start(builder)
    PresetCharacterGroupSettingExcelTable.AddDataList(builder, data_list)
    return PresetCharacterGroupSettingExcelTable.End(builder)

def pack_PresetParcelsExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_PresetParcelsExcel(builder, record, encrypt))
    PresetParcelsExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    PresetParcelsExcelTable.Start(builder)
    PresetParcelsExcelTable.AddDataList(builder, data_list)
    return PresetParcelsExcelTable.End(builder)

def pack_ProductBattlePassExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProductBattlePassExcel(builder, record, encrypt))
    ProductBattlePassExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProductBattlePassExcelTable.Start(builder)
    ProductBattlePassExcelTable.AddDataList(builder, data_list)
    return ProductBattlePassExcelTable.End(builder)

def pack_ProductExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProductExcel(builder, record, encrypt))
    ProductExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProductExcelTable.Start(builder)
    ProductExcelTable.AddDataList(builder, data_list)
    return ProductExcelTable.End(builder)

def pack_ProductMonthlyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProductMonthlyExcel(builder, record, encrypt))
    ProductMonthlyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProductMonthlyExcelTable.Start(builder)
    ProductMonthlyExcelTable.AddDataList(builder, data_list)
    return ProductMonthlyExcelTable.End(builder)

def pack_ProductSelectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProductSelectExcel(builder, record, encrypt))
    ProductSelectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProductSelectExcelTable.Start(builder)
    ProductSelectExcelTable.AddDataList(builder, data_list)
    return ProductSelectExcelTable.End(builder)

def pack_ProductSelectionGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ProductSelectionGroupExcel(builder, record, encrypt))
    ProductSelectionGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ProductSelectionGroupExcelTable.Start(builder)
    ProductSelectionGroupExcelTable.AddDataList(builder, data_list)
    return ProductSelectionGroupExcelTable.End(builder)

def pack_RaidRankingRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RaidRankingRewardExcel(builder, record, encrypt))
    RaidRankingRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RaidRankingRewardExcelTable.Start(builder)
    RaidRankingRewardExcelTable.AddDataList(builder, data_list)
    return RaidRankingRewardExcelTable.End(builder)

def pack_RaidSeasonManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RaidSeasonManageExcel(builder, record, encrypt))
    RaidSeasonManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RaidSeasonManageExcelTable.Start(builder)
    RaidSeasonManageExcelTable.AddDataList(builder, data_list)
    return RaidSeasonManageExcelTable.End(builder)

def pack_RaidStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RaidStageExcel(builder, record, encrypt))
    RaidStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RaidStageExcelTable.Start(builder)
    RaidStageExcelTable.AddDataList(builder, data_list)
    return RaidStageExcelTable.End(builder)

def pack_RaidStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RaidStageRewardExcel(builder, record, encrypt))
    RaidStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RaidStageRewardExcelTable.Start(builder)
    RaidStageRewardExcelTable.AddDataList(builder, data_list)
    return RaidStageRewardExcelTable.End(builder)

def pack_RaidStageSeasonRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RaidStageSeasonRewardExcel(builder, record, encrypt))
    RaidStageSeasonRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RaidStageSeasonRewardExcelTable.Start(builder)
    RaidStageSeasonRewardExcelTable.AddDataList(builder, data_list)
    return RaidStageSeasonRewardExcelTable.End(builder)

def pack_RecipeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RecipeExcel(builder, record, encrypt))
    RecipeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RecipeExcelTable.Start(builder)
    RecipeExcelTable.AddDataList(builder, data_list)
    return RecipeExcelTable.End(builder)

def pack_RecipeIngredientExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RecipeIngredientExcel(builder, record, encrypt))
    RecipeIngredientExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RecipeIngredientExcelTable.Start(builder)
    RecipeIngredientExcelTable.AddDataList(builder, data_list)
    return RecipeIngredientExcelTable.End(builder)

def pack_RecipeSelectionAutoUseExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RecipeSelectionAutoUseExcel(builder, record, encrypt))
    RecipeSelectionAutoUseExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RecipeSelectionAutoUseExcelTable.Start(builder)
    RecipeSelectionAutoUseExcelTable.AddDataList(builder, data_list)
    return RecipeSelectionAutoUseExcelTable.End(builder)

def pack_RecipeSelectionGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_RecipeSelectionGroupExcel(builder, record, encrypt))
    RecipeSelectionGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    RecipeSelectionGroupExcelTable.Start(builder)
    RecipeSelectionGroupExcelTable.AddDataList(builder, data_list)
    return RecipeSelectionGroupExcelTable.End(builder)

def pack_ScenarioBGEffectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioBGEffectExcel(builder, record, encrypt))
    ScenarioBGEffectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioBGEffectExcelTable.Start(builder)
    ScenarioBGEffectExcelTable.AddDataList(builder, data_list)
    return ScenarioBGEffectExcelTable.End(builder)

def pack_ScenarioBGNameExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioBGNameExcel(builder, record, encrypt))
    ScenarioBGNameExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioBGNameExcelTable.Start(builder)
    ScenarioBGNameExcelTable.AddDataList(builder, data_list)
    return ScenarioBGNameExcelTable.End(builder)

def pack_ScenarioCharacterEmotionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioCharacterEmotionExcel(builder, record, encrypt))
    ScenarioCharacterEmotionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioCharacterEmotionExcelTable.Start(builder)
    ScenarioCharacterEmotionExcelTable.AddDataList(builder, data_list)
    return ScenarioCharacterEmotionExcelTable.End(builder)

def pack_ScenarioCharacterNameExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioCharacterNameExcel(builder, record, encrypt))
    ScenarioCharacterNameExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioCharacterNameExcelTable.Start(builder)
    ScenarioCharacterNameExcelTable.AddDataList(builder, data_list)
    return ScenarioCharacterNameExcelTable.End(builder)

def pack_ScenarioCharacterSituationSetExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioCharacterSituationSetExcel(builder, record, encrypt))
    ScenarioCharacterSituationSetExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioCharacterSituationSetExcelTable.Start(builder)
    ScenarioCharacterSituationSetExcelTable.AddDataList(builder, data_list)
    return ScenarioCharacterSituationSetExcelTable.End(builder)

def pack_ScenarioContentCollectionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioContentCollectionExcel(builder, record, encrypt))
    ScenarioContentCollectionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioContentCollectionExcelTable.Start(builder)
    ScenarioContentCollectionExcelTable.AddDataList(builder, data_list)
    return ScenarioContentCollectionExcelTable.End(builder)

def pack_ScenarioEffectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioEffectExcel(builder, record, encrypt))
    ScenarioEffectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioEffectExcelTable.Start(builder)
    ScenarioEffectExcelTable.AddDataList(builder, data_list)
    return ScenarioEffectExcelTable.End(builder)

def pack_ScenarioModeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioModeExcel(builder, record, encrypt))
    ScenarioModeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioModeExcelTable.Start(builder)
    ScenarioModeExcelTable.AddDataList(builder, data_list)
    return ScenarioModeExcelTable.End(builder)

def pack_ScenarioModeRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioModeRewardExcel(builder, record, encrypt))
    ScenarioModeRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioModeRewardExcelTable.Start(builder)
    ScenarioModeRewardExcelTable.AddDataList(builder, data_list)
    return ScenarioModeRewardExcelTable.End(builder)

def pack_ScenarioResourceInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioResourceInfoExcel(builder, record, encrypt))
    ScenarioResourceInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioResourceInfoExcelTable.Start(builder)
    ScenarioResourceInfoExcelTable.AddDataList(builder, data_list)
    return ScenarioResourceInfoExcelTable.End(builder)

def pack_ScenarioScriptExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioScriptExcel(builder, record, encrypt))
    ScenarioScriptExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioScriptExcelTable.Start(builder)
    ScenarioScriptExcelTable.AddDataList(builder, data_list)
    return ScenarioScriptExcelTable.End(builder)

def pack_ScenarioTransitionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ScenarioTransitionExcel(builder, record, encrypt))
    ScenarioTransitionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ScenarioTransitionExcelTable.Start(builder)
    ScenarioTransitionExcelTable.AddDataList(builder, data_list)
    return ScenarioTransitionExcelTable.End(builder)

def pack_SchoolDungeonRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SchoolDungeonRewardExcel(builder, record, encrypt))
    SchoolDungeonRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SchoolDungeonRewardExcelTable.Start(builder)
    SchoolDungeonRewardExcelTable.AddDataList(builder, data_list)
    return SchoolDungeonRewardExcelTable.End(builder)

def pack_SchoolDungeonStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SchoolDungeonStageExcel(builder, record, encrypt))
    SchoolDungeonStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SchoolDungeonStageExcelTable.Start(builder)
    SchoolDungeonStageExcelTable.AddDataList(builder, data_list)
    return SchoolDungeonStageExcelTable.End(builder)

def pack_ServiceActionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ServiceActionExcel(builder, record, encrypt))
    ServiceActionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ServiceActionExcelTable.Start(builder)
    ServiceActionExcelTable.AddDataList(builder, data_list)
    return ServiceActionExcelTable.End(builder)

def pack_ShiftingCraftRecipeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShiftingCraftRecipeExcel(builder, record, encrypt))
    ShiftingCraftRecipeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShiftingCraftRecipeExcelTable.Start(builder)
    ShiftingCraftRecipeExcelTable.AddDataList(builder, data_list)
    return ShiftingCraftRecipeExcelTable.End(builder)

def pack_ShopCashExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopCashExcel(builder, record, encrypt))
    ShopCashExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopCashExcelTable.Start(builder)
    ShopCashExcelTable.AddDataList(builder, data_list)
    return ShopCashExcelTable.End(builder)

def pack_ShopCashScenarioResourceInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopCashScenarioResourceInfoExcel(builder, record, encrypt))
    ShopCashScenarioResourceInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopCashScenarioResourceInfoExcelTable.Start(builder)
    ShopCashScenarioResourceInfoExcelTable.AddDataList(builder, data_list)
    return ShopCashScenarioResourceInfoExcelTable.End(builder)

def pack_ShopExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopExcel(builder, record, encrypt))
    ShopExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopExcelTable.Start(builder)
    ShopExcelTable.AddDataList(builder, data_list)
    return ShopExcelTable.End(builder)

def pack_ShopFilterClassifiedExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopFilterClassifiedExcel(builder, record, encrypt))
    ShopFilterClassifiedExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopFilterClassifiedExcelTable.Start(builder)
    ShopFilterClassifiedExcelTable.AddDataList(builder, data_list)
    return ShopFilterClassifiedExcelTable.End(builder)

def pack_ShopFreeRecruitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopFreeRecruitExcel(builder, record, encrypt))
    ShopFreeRecruitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopFreeRecruitExcelTable.Start(builder)
    ShopFreeRecruitExcelTable.AddDataList(builder, data_list)
    return ShopFreeRecruitExcelTable.End(builder)

def pack_ShopFreeRecruitPeriodExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopFreeRecruitPeriodExcel(builder, record, encrypt))
    ShopFreeRecruitPeriodExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopFreeRecruitPeriodExcelTable.Start(builder)
    ShopFreeRecruitPeriodExcelTable.AddDataList(builder, data_list)
    return ShopFreeRecruitPeriodExcelTable.End(builder)

def pack_ShopInfoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopInfoExcel(builder, record, encrypt))
    ShopInfoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopInfoExcelTable.Start(builder)
    ShopInfoExcelTable.AddDataList(builder, data_list)
    return ShopInfoExcelTable.End(builder)

def pack_ShopRecruitExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopRecruitExcel(builder, record, encrypt))
    ShopRecruitExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopRecruitExcelTable.Start(builder)
    ShopRecruitExcelTable.AddDataList(builder, data_list)
    return ShopRecruitExcelTable.End(builder)

def pack_ShopRefreshExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopRefreshExcel(builder, record, encrypt))
    ShopRefreshExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopRefreshExcelTable.Start(builder)
    ShopRefreshExcelTable.AddDataList(builder, data_list)
    return ShopRefreshExcelTable.End(builder)

def pack_ShopTabGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShopTabGroupExcel(builder, record, encrypt))
    ShopTabGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShopTabGroupExcelTable.Start(builder)
    ShopTabGroupExcelTable.AddDataList(builder, data_list)
    return ShopTabGroupExcelTable.End(builder)

def pack_ShortcutTypeExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ShortcutTypeExcel(builder, record, encrypt))
    ShortcutTypeExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ShortcutTypeExcelTable.Start(builder)
    ShortcutTypeExcelTable.AddDataList(builder, data_list)
    return ShortcutTypeExcelTable.End(builder)

def pack_SkillAdditionalTooltipExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SkillAdditionalTooltipExcel(builder, record, encrypt))
    SkillAdditionalTooltipExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SkillAdditionalTooltipExcelTable.Start(builder)
    SkillAdditionalTooltipExcelTable.AddDataList(builder, data_list)
    return SkillAdditionalTooltipExcelTable.End(builder)

def pack_SkillExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SkillExcel(builder, record, encrypt))
    SkillExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SkillExcelTable.Start(builder)
    SkillExcelTable.AddDataList(builder, data_list)
    return SkillExcelTable.End(builder)

def pack_SkillSelectExTooltipExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SkillSelectExTooltipExcel(builder, record, encrypt))
    SkillSelectExTooltipExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SkillSelectExTooltipExcelTable.Start(builder)
    SkillSelectExTooltipExcelTable.AddDataList(builder, data_list)
    return SkillSelectExTooltipExcelTable.End(builder)

def pack_SoundUIExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SoundUIExcel(builder, record, encrypt))
    SoundUIExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SoundUIExcelTable.Start(builder)
    SoundUIExcelTable.AddDataList(builder, data_list)
    return SoundUIExcelTable.End(builder)

def pack_SpineLipsyncExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_SpineLipsyncExcel(builder, record, encrypt))
    SpineLipsyncExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    SpineLipsyncExcelTable.Start(builder)
    SpineLipsyncExcelTable.AddDataList(builder, data_list)
    return SpineLipsyncExcelTable.End(builder)

def pack_StatLevelInterpolationExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StatLevelInterpolationExcel(builder, record, encrypt))
    StatLevelInterpolationExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StatLevelInterpolationExcelTable.Start(builder)
    StatLevelInterpolationExcelTable.AddDataList(builder, data_list)
    return StatLevelInterpolationExcelTable.End(builder)

def pack_StickerGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StickerGroupExcel(builder, record, encrypt))
    StickerGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StickerGroupExcelTable.Start(builder)
    StickerGroupExcelTable.AddDataList(builder, data_list)
    return StickerGroupExcelTable.End(builder)

def pack_StickerPageContentExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StickerPageContentExcel(builder, record, encrypt))
    StickerPageContentExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StickerPageContentExcelTable.Start(builder)
    StickerPageContentExcelTable.AddDataList(builder, data_list)
    return StickerPageContentExcelTable.End(builder)

def pack_StoryStrategyExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StoryStrategyExcel(builder, record, encrypt))
    StoryStrategyExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StoryStrategyExcelTable.Start(builder)
    StoryStrategyExcelTable.AddDataList(builder, data_list)
    return StoryStrategyExcelTable.End(builder)

def pack_StrategyObjectBuffDefineExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_StrategyObjectBuffDefineExcel(builder, record, encrypt))
    StrategyObjectBuffDefineExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    StrategyObjectBuffDefineExcelTable.Start(builder)
    StrategyObjectBuffDefineExcelTable.AddDataList(builder, data_list)
    return StrategyObjectBuffDefineExcelTable.End(builder)

def pack_TacticalSupportSystemExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticalSupportSystemExcel(builder, record, encrypt))
    TacticalSupportSystemExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticalSupportSystemExcelTable.Start(builder)
    TacticalSupportSystemExcelTable.AddDataList(builder, data_list)
    return TacticalSupportSystemExcelTable.End(builder)

def pack_TacticEntityEffectFilterExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticEntityEffectFilterExcel(builder, record, encrypt))
    TacticEntityEffectFilterExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticEntityEffectFilterExcelTable.Start(builder)
    TacticEntityEffectFilterExcelTable.AddDataList(builder, data_list)
    return TacticEntityEffectFilterExcelTable.End(builder)

def pack_TacticSkipExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TacticSkipExcel(builder, record, encrypt))
    TacticSkipExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TacticSkipExcelTable.Start(builder)
    TacticSkipExcelTable.AddDataList(builder, data_list)
    return TacticSkipExcelTable.End(builder)

def pack_TerrainAdaptationFactorExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TerrainAdaptationFactorExcel(builder, record, encrypt))
    TerrainAdaptationFactorExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TerrainAdaptationFactorExcelTable.Start(builder)
    TerrainAdaptationFactorExcelTable.AddDataList(builder, data_list)
    return TerrainAdaptationFactorExcelTable.End(builder)

def pack_TimeAttackDungeonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TimeAttackDungeonExcel(builder, record, encrypt))
    TimeAttackDungeonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TimeAttackDungeonExcelTable.Start(builder)
    TimeAttackDungeonExcelTable.AddDataList(builder, data_list)
    return TimeAttackDungeonExcelTable.End(builder)

def pack_TimeAttackDungeonGeasExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TimeAttackDungeonGeasExcel(builder, record, encrypt))
    TimeAttackDungeonGeasExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TimeAttackDungeonGeasExcelTable.Start(builder)
    TimeAttackDungeonGeasExcelTable.AddDataList(builder, data_list)
    return TimeAttackDungeonGeasExcelTable.End(builder)

def pack_TimeAttackDungeonRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TimeAttackDungeonRewardExcel(builder, record, encrypt))
    TimeAttackDungeonRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TimeAttackDungeonRewardExcelTable.Start(builder)
    TimeAttackDungeonRewardExcelTable.AddDataList(builder, data_list)
    return TimeAttackDungeonRewardExcelTable.End(builder)

def pack_TimeAttackDungeonSeasonManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TimeAttackDungeonSeasonManageExcel(builder, record, encrypt))
    TimeAttackDungeonSeasonManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TimeAttackDungeonSeasonManageExcelTable.Start(builder)
    TimeAttackDungeonSeasonManageExcelTable.AddDataList(builder, data_list)
    return TimeAttackDungeonSeasonManageExcelTable.End(builder)

def pack_ToastExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_ToastExcel(builder, record, encrypt))
    ToastExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    ToastExcelTable.Start(builder)
    ToastExcelTable.AddDataList(builder, data_list)
    return ToastExcelTable.End(builder)

def pack_TrophyCollectionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TrophyCollectionExcel(builder, record, encrypt))
    TrophyCollectionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TrophyCollectionExcelTable.Start(builder)
    TrophyCollectionExcelTable.AddDataList(builder, data_list)
    return TrophyCollectionExcelTable.End(builder)

def pack_TutorialCharacterDialogExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TutorialCharacterDialogExcel(builder, record, encrypt))
    TutorialCharacterDialogExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TutorialCharacterDialogExcelTable.Start(builder)
    TutorialCharacterDialogExcelTable.AddDataList(builder, data_list)
    return TutorialCharacterDialogExcelTable.End(builder)

def pack_TutorialExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TutorialExcel(builder, record, encrypt))
    TutorialExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TutorialExcelTable.Start(builder)
    TutorialExcelTable.AddDataList(builder, data_list)
    return TutorialExcelTable.End(builder)

def pack_TutorialFailureImageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_TutorialFailureImageExcel(builder, record, encrypt))
    TutorialFailureImageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    TutorialFailureImageExcelTable.Start(builder)
    TutorialFailureImageExcelTable.AddDataList(builder, data_list)
    return TutorialFailureImageExcelTable.End(builder)

def pack_UnderCoverStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_UnderCoverStageExcel(builder, record, encrypt))
    UnderCoverStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    UnderCoverStageExcelTable.Start(builder)
    UnderCoverStageExcelTable.AddDataList(builder, data_list)
    return UnderCoverStageExcelTable.End(builder)

def pack_VideoExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VideoExcel(builder, record, encrypt))
    VideoExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VideoExcelTable.Start(builder)
    VideoExcelTable.AddDataList(builder, data_list)
    return VideoExcelTable.End(builder)

def pack_VoiceCommonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceCommonExcel(builder, record, encrypt))
    VoiceCommonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceCommonExcelTable.Start(builder)
    VoiceCommonExcelTable.AddDataList(builder, data_list)
    return VoiceCommonExcelTable.End(builder)

def pack_VoiceExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceExcel(builder, record, encrypt))
    VoiceExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceExcelTable.Start(builder)
    VoiceExcelTable.AddDataList(builder, data_list)
    return VoiceExcelTable.End(builder)

def pack_VoiceLogicEffectExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceLogicEffectExcel(builder, record, encrypt))
    VoiceLogicEffectExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceLogicEffectExcelTable.Start(builder)
    VoiceLogicEffectExcelTable.AddDataList(builder, data_list)
    return VoiceLogicEffectExcelTable.End(builder)

def pack_VoiceRoomExceptionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceRoomExceptionExcel(builder, record, encrypt))
    VoiceRoomExceptionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceRoomExceptionExcelTable.Start(builder)
    VoiceRoomExceptionExcelTable.AddDataList(builder, data_list)
    return VoiceRoomExceptionExcelTable.End(builder)

def pack_VoiceSpineExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceSpineExcel(builder, record, encrypt))
    VoiceSpineExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceSpineExcelTable.Start(builder)
    VoiceSpineExcelTable.AddDataList(builder, data_list)
    return VoiceSpineExcelTable.End(builder)

def pack_VoiceTimelineExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_VoiceTimelineExcel(builder, record, encrypt))
    VoiceTimelineExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    VoiceTimelineExcelTable.Start(builder)
    VoiceTimelineExcelTable.AddDataList(builder, data_list)
    return VoiceTimelineExcelTable.End(builder)

def pack_WeekDungeonExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WeekDungeonExcel(builder, record, encrypt))
    WeekDungeonExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WeekDungeonExcelTable.Start(builder)
    WeekDungeonExcelTable.AddDataList(builder, data_list)
    return WeekDungeonExcelTable.End(builder)

def pack_WeekDungeonGroupBuffExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WeekDungeonGroupBuffExcel(builder, record, encrypt))
    WeekDungeonGroupBuffExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WeekDungeonGroupBuffExcelTable.Start(builder)
    WeekDungeonGroupBuffExcelTable.AddDataList(builder, data_list)
    return WeekDungeonGroupBuffExcelTable.End(builder)

def pack_WeekDungeonOpenScheduleExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WeekDungeonOpenScheduleExcel(builder, record, encrypt))
    WeekDungeonOpenScheduleExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WeekDungeonOpenScheduleExcelTable.Start(builder)
    WeekDungeonOpenScheduleExcelTable.AddDataList(builder, data_list)
    return WeekDungeonOpenScheduleExcelTable.End(builder)

def pack_WeekDungeonRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WeekDungeonRewardExcel(builder, record, encrypt))
    WeekDungeonRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WeekDungeonRewardExcelTable.Start(builder)
    WeekDungeonRewardExcelTable.AddDataList(builder, data_list)
    return WeekDungeonRewardExcelTable.End(builder)

def pack_WorldRaidBossGroupExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidBossGroupExcel(builder, record, encrypt))
    WorldRaidBossGroupExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidBossGroupExcelTable.Start(builder)
    WorldRaidBossGroupExcelTable.AddDataList(builder, data_list)
    return WorldRaidBossGroupExcelTable.End(builder)

def pack_WorldRaidConditionExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidConditionExcel(builder, record, encrypt))
    WorldRaidConditionExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidConditionExcelTable.Start(builder)
    WorldRaidConditionExcelTable.AddDataList(builder, data_list)
    return WorldRaidConditionExcelTable.End(builder)

def pack_WorldRaidFavorBuffExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidFavorBuffExcel(builder, record, encrypt))
    WorldRaidFavorBuffExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidFavorBuffExcelTable.Start(builder)
    WorldRaidFavorBuffExcelTable.AddDataList(builder, data_list)
    return WorldRaidFavorBuffExcelTable.End(builder)

def pack_WorldRaidSeasonManageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidSeasonManageExcel(builder, record, encrypt))
    WorldRaidSeasonManageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidSeasonManageExcelTable.Start(builder)
    WorldRaidSeasonManageExcelTable.AddDataList(builder, data_list)
    return WorldRaidSeasonManageExcelTable.End(builder)

def pack_WorldRaidStageExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidStageExcel(builder, record, encrypt))
    WorldRaidStageExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidStageExcelTable.Start(builder)
    WorldRaidStageExcelTable.AddDataList(builder, data_list)
    return WorldRaidStageExcelTable.End(builder)

def pack_WorldRaidStageRewardExcelTable(builder: flatbuffers.Builder, dump_list: list, encrypt=True) -> int:
    offsets = []
    for record in dump_list:
        offsets.append(pack_WorldRaidStageRewardExcel(builder, record, encrypt))
    WorldRaidStageRewardExcelTable.StartDataListVector(builder, len(offsets))
    for offset in reversed(offsets):
        builder.PrependUOffsetTRelative(offset)
    data_list = builder.EndVector(len(offsets))
    WorldRaidStageRewardExcelTable.Start(builder)
    WorldRaidStageRewardExcelTable.AddDataList(builder, data_list)
    return WorldRaidStageRewardExcelTable.End(builder)

